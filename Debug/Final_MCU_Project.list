
Final_MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003100  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800322c  0800322c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800322c  0800322c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800322c  0800322c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000084  080032b8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080032b8  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097fb  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bef  00000000  00000000  000298a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f2a  00000000  00000000  0002c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b81f  00000000  00000000  00043812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084696  00000000  00000000  0004f031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d36c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f4  00000000  00000000  000d371c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080031f4 	.word	0x080031f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080031f4 	.word	0x080031f4

0800014c <is_pressed>:

int flag_for_pressed[NUMBER_OF_BUTTON] = {0};
int flag_for_pressed_3s[NUMBER_OF_BUTTON] = {0};


int is_pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(index > NUMBER_OF_BUTTON) return 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b04      	cmp	r3, #4
 8000158:	dd01      	ble.n	800015e <is_pressed+0x12>
 800015a:	2300      	movs	r3, #0
 800015c:	e00d      	b.n	800017a <is_pressed+0x2e>
	if(flag_for_pressed[index]){
 800015e:	4a09      	ldr	r2, [pc, #36]	; (8000184 <is_pressed+0x38>)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d006      	beq.n	8000178 <is_pressed+0x2c>
		flag_for_pressed[index] = 0;
 800016a:	4a06      	ldr	r2, [pc, #24]	; (8000184 <is_pressed+0x38>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2100      	movs	r1, #0
 8000170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <is_pressed+0x2e>
	}
	return 0;
 8000178:	2300      	movs	r3, #0
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	200000a0 	.word	0x200000a0

08000188 <read_input>:

int register0_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int register1_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int register2_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int button_buffer[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
void read_input(){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_BUTTON; ++i){
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	e069      	b.n	8000268 <read_input+0xe0>
		register0_key[i] = register1_key[i];
 8000194:	4a38      	ldr	r2, [pc, #224]	; (8000278 <read_input+0xf0>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800019c:	4937      	ldr	r1, [pc, #220]	; (800027c <read_input+0xf4>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		register1_key[i] = register2_key[i];
 80001a4:	4a36      	ldr	r2, [pc, #216]	; (8000280 <read_input+0xf8>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ac:	4932      	ldr	r1, [pc, #200]	; (8000278 <read_input+0xf0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b03      	cmp	r3, #3
 80001b8:	d836      	bhi.n	8000228 <read_input+0xa0>
 80001ba:	a201      	add	r2, pc, #4	; (adr r2, 80001c0 <read_input+0x38>)
 80001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c0:	080001d1 	.word	0x080001d1
 80001c4:	080001e7 	.word	0x080001e7
 80001c8:	080001fd 	.word	0x080001fd
 80001cc:	08000213 	.word	0x08000213
		switch(i){
		case 0 :
			 register2_key[i] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001d0:	2101      	movs	r1, #1
 80001d2:	482c      	ldr	r0, [pc, #176]	; (8000284 <read_input+0xfc>)
 80001d4:	f001 fc6c 	bl	8001ab0 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	4619      	mov	r1, r3
 80001dc:	4a28      	ldr	r2, [pc, #160]	; (8000280 <read_input+0xf8>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001e4:	e021      	b.n	800022a <read_input+0xa2>
		case 1:
			register2_key[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001e6:	2102      	movs	r1, #2
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <read_input+0xfc>)
 80001ea:	f001 fc61 	bl	8001ab0 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4619      	mov	r1, r3
 80001f2:	4a23      	ldr	r2, [pc, #140]	; (8000280 <read_input+0xf8>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001fa:	e016      	b.n	800022a <read_input+0xa2>
		case 2:
			register2_key[i] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80001fc:	2110      	movs	r1, #16
 80001fe:	4821      	ldr	r0, [pc, #132]	; (8000284 <read_input+0xfc>)
 8000200:	f001 fc56 	bl	8001ab0 <HAL_GPIO_ReadPin>
 8000204:	4603      	mov	r3, r0
 8000206:	4619      	mov	r1, r3
 8000208:	4a1d      	ldr	r2, [pc, #116]	; (8000280 <read_input+0xf8>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000210:	e00b      	b.n	800022a <read_input+0xa2>
		case 3:
			register2_key[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8000212:	2101      	movs	r1, #1
 8000214:	481c      	ldr	r0, [pc, #112]	; (8000288 <read_input+0x100>)
 8000216:	f001 fc4b 	bl	8001ab0 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <read_input+0xf8>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000226:	e000      	b.n	800022a <read_input+0xa2>
		default:
			break;
 8000228:	bf00      	nop
		}

		if(register0_key[i] == register1_key[i] && register1_key[i] == register2_key[i]){
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <read_input+0xf4>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4911      	ldr	r1, [pc, #68]	; (8000278 <read_input+0xf0>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d111      	bne.n	8000262 <read_input+0xda>
 800023e:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <read_input+0xf0>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	490e      	ldr	r1, [pc, #56]	; (8000280 <read_input+0xf8>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024e:	429a      	cmp	r2, r3
 8000250:	d107      	bne.n	8000262 <read_input+0xda>
			button_buffer[i] = register2_key[i];
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <read_input+0xf8>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025a:	490c      	ldr	r1, [pc, #48]	; (800028c <read_input+0x104>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_BUTTON; ++i){
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3301      	adds	r3, #1
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b03      	cmp	r3, #3
 800026c:	dd92      	ble.n	8000194 <read_input+0xc>
		}
	}
}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000020 	.word	0x20000020
 800027c:	20000010 	.word	0x20000010
 8000280:	20000030 	.word	0x20000030
 8000284:	40010800 	.word	0x40010800
 8000288:	40010c00 	.word	0x40010c00
 800028c:	20000040 	.word	0x20000040

08000290 <fsm_for_button>:

void fsm_for_button(){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e057      	b.n	800034c <fsm_for_button+0xbc>
		switch(state_of_button[i]){
 800029c:	4a2f      	ldr	r2, [pc, #188]	; (800035c <fsm_for_button+0xcc>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a4:	2b16      	cmp	r3, #22
 80002a6:	d03b      	beq.n	8000320 <fsm_for_button+0x90>
 80002a8:	2b16      	cmp	r3, #22
 80002aa:	dc45      	bgt.n	8000338 <fsm_for_button+0xa8>
 80002ac:	2b14      	cmp	r3, #20
 80002ae:	d002      	beq.n	80002b6 <fsm_for_button+0x26>
 80002b0:	2b15      	cmp	r3, #21
 80002b2:	d016      	beq.n	80002e2 <fsm_for_button+0x52>
				state_of_button[i] = BUTTON_RELEASED;
			}

			break;
		default:
			break;
 80002b4:	e040      	b.n	8000338 <fsm_for_button+0xa8>
			if(button_buffer[i] == BUTTON_IS_PRESSED){
 80002b6:	4a2a      	ldr	r2, [pc, #168]	; (8000360 <fsm_for_button+0xd0>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d13c      	bne.n	800033c <fsm_for_button+0xac>
				flag_for_pressed[i] = 1;
 80002c2:	4a28      	ldr	r2, [pc, #160]	; (8000364 <fsm_for_button+0xd4>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2101      	movs	r1, #1
 80002c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				set_timer(i, 3000);
 80002cc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f000 ff6d 	bl	80011b0 <set_timer>
				state_of_button[i] = BUTTON_PRESSED;
 80002d6:	4a21      	ldr	r2, [pc, #132]	; (800035c <fsm_for_button+0xcc>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2115      	movs	r1, #21
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002e0:	e02c      	b.n	800033c <fsm_for_button+0xac>
			if(is_timer_timeout(i)){
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f000 ffaa 	bl	800123c <is_timer_timeout>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d009      	beq.n	8000302 <fsm_for_button+0x72>
				flag_for_pressed_3s[i] = 1;
 80002ee:	4a1e      	ldr	r2, [pc, #120]	; (8000368 <fsm_for_button+0xd8>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2101      	movs	r1, #1
 80002f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				state_of_button[i] = BUTTON_PRESSED_3S;
 80002f8:	4a18      	ldr	r2, [pc, #96]	; (800035c <fsm_for_button+0xcc>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2116      	movs	r1, #22
 80002fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(button_buffer[i] == BUTTON_IS_RELEASED){
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <fsm_for_button+0xd0>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d118      	bne.n	8000340 <fsm_for_button+0xb0>
				clear_timer(i);
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	f000 ff68 	bl	80011e4 <clear_timer>
				state_of_button[i] = BUTTON_RELEASED;
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <fsm_for_button+0xcc>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2114      	movs	r1, #20
 800031a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800031e:	e00f      	b.n	8000340 <fsm_for_button+0xb0>
			if(button_buffer[i] == BUTTON_IS_RELEASED){
 8000320:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <fsm_for_button+0xd0>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10b      	bne.n	8000344 <fsm_for_button+0xb4>
				state_of_button[i] = BUTTON_RELEASED;
 800032c:	4a0b      	ldr	r2, [pc, #44]	; (800035c <fsm_for_button+0xcc>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2114      	movs	r1, #20
 8000332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000336:	e005      	b.n	8000344 <fsm_for_button+0xb4>
			break;
 8000338:	bf00      	nop
 800033a:	e004      	b.n	8000346 <fsm_for_button+0xb6>
			break;
 800033c:	bf00      	nop
 800033e:	e002      	b.n	8000346 <fsm_for_button+0xb6>
			break;
 8000340:	bf00      	nop
 8000342:	e000      	b.n	8000346 <fsm_for_button+0xb6>
			break;
 8000344:	bf00      	nop
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3301      	adds	r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b03      	cmp	r3, #3
 8000350:	dda4      	ble.n	800029c <fsm_for_button+0xc>



		}
	}
}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000000 	.word	0x20000000
 8000360:	20000040 	.word	0x20000040
 8000364:	200000a0 	.word	0x200000a0
 8000368:	200000b0 	.word	0x200000b0

0800036c <fsm_traffic_1_run>:

#include "fsm_traffic.h"



void fsm_traffic_1_run(){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 8000370:	4b29      	ldr	r3, [pc, #164]	; (8000418 <fsm_traffic_1_run+0xac>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b0c      	cmp	r3, #12
 8000376:	d030      	beq.n	80003da <fsm_traffic_1_run+0x6e>
 8000378:	2b0c      	cmp	r3, #12
 800037a:	dc43      	bgt.n	8000404 <fsm_traffic_1_run+0x98>
 800037c:	2b0a      	cmp	r3, #10
 800037e:	d002      	beq.n	8000386 <fsm_traffic_1_run+0x1a>
 8000380:	2b0b      	cmp	r3, #11
 8000382:	d015      	beq.n	80003b0 <fsm_traffic_1_run+0x44>
				turn_on_traffic_led_1(state_led_traffic_1);
				set_timer(TIMER_LED_TRAFFIC_1,duration_time_of_YELLOW);
			}
		break;
		default:
		break;
 8000384:	e03e      	b.n	8000404 <fsm_traffic_1_run+0x98>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_1)){
 8000386:	2004      	movs	r0, #4
 8000388:	f000 ff58 	bl	800123c <is_timer_timeout>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d03a      	beq.n	8000408 <fsm_traffic_1_run+0x9c>
				state_led_traffic_1 =GREEN;
 8000392:	4b21      	ldr	r3, [pc, #132]	; (8000418 <fsm_traffic_1_run+0xac>)
 8000394:	220c      	movs	r2, #12
 8000396:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 8000398:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <fsm_traffic_1_run+0xac>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 ff97 	bl	80012d0 <turn_on_traffic_led_1>
				set_timer(TIMER_LED_TRAFFIC_1,duration_time_of_GREEN);
 80003a2:	4b1e      	ldr	r3, [pc, #120]	; (800041c <fsm_traffic_1_run+0xb0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	2004      	movs	r0, #4
 80003aa:	f000 ff01 	bl	80011b0 <set_timer>
		break;
 80003ae:	e02b      	b.n	8000408 <fsm_traffic_1_run+0x9c>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_1)){
 80003b0:	2004      	movs	r0, #4
 80003b2:	f000 ff43 	bl	800123c <is_timer_timeout>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d027      	beq.n	800040c <fsm_traffic_1_run+0xa0>
				state_led_traffic_1 = RED;
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003be:	220a      	movs	r2, #10
 80003c0:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 ff82 	bl	80012d0 <turn_on_traffic_led_1>
				set_timer(TIMER_LED_TRAFFIC_1,duration_time_of_RED);
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <fsm_traffic_1_run+0xb4>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	2004      	movs	r0, #4
 80003d4:	f000 feec 	bl	80011b0 <set_timer>
		break;
 80003d8:	e018      	b.n	800040c <fsm_traffic_1_run+0xa0>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_1)){
 80003da:	2004      	movs	r0, #4
 80003dc:	f000 ff2e 	bl	800123c <is_timer_timeout>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d014      	beq.n	8000410 <fsm_traffic_1_run+0xa4>
				state_led_traffic_1 = YELLOW;
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003e8:	220b      	movs	r2, #11
 80003ea:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 ff6d 	bl	80012d0 <turn_on_traffic_led_1>
				set_timer(TIMER_LED_TRAFFIC_1,duration_time_of_YELLOW);
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <fsm_traffic_1_run+0xb8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4619      	mov	r1, r3
 80003fc:	2004      	movs	r0, #4
 80003fe:	f000 fed7 	bl	80011b0 <set_timer>
		break;
 8000402:	e005      	b.n	8000410 <fsm_traffic_1_run+0xa4>
		break;
 8000404:	bf00      	nop
 8000406:	e004      	b.n	8000412 <fsm_traffic_1_run+0xa6>
		break;
 8000408:	bf00      	nop
 800040a:	e002      	b.n	8000412 <fsm_traffic_1_run+0xa6>
		break;
 800040c:	bf00      	nop
 800040e:	e000      	b.n	8000412 <fsm_traffic_1_run+0xa6>
		break;
 8000410:	bf00      	nop
	}
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000050 	.word	0x20000050
 800041c:	20000060 	.word	0x20000060
 8000420:	20000058 	.word	0x20000058
 8000424:	2000005c 	.word	0x2000005c

08000428 <fsm_traffic_2_run>:


void fsm_traffic_2_run(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 800042c:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <fsm_traffic_2_run+0xac>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b0c      	cmp	r3, #12
 8000432:	d030      	beq.n	8000496 <fsm_traffic_2_run+0x6e>
 8000434:	2b0c      	cmp	r3, #12
 8000436:	dc43      	bgt.n	80004c0 <fsm_traffic_2_run+0x98>
 8000438:	2b0a      	cmp	r3, #10
 800043a:	d002      	beq.n	8000442 <fsm_traffic_2_run+0x1a>
 800043c:	2b0b      	cmp	r3, #11
 800043e:	d015      	beq.n	800046c <fsm_traffic_2_run+0x44>
				turn_on_traffic_led_2(state_led_traffic_2);
				set_timer(TIMER_LED_TRAFFIC_2,duration_time_of_YELLOW);
			}
		break;
		default:
		break;
 8000440:	e03e      	b.n	80004c0 <fsm_traffic_2_run+0x98>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_2)){
 8000442:	2005      	movs	r0, #5
 8000444:	f000 fefa 	bl	800123c <is_timer_timeout>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d03a      	beq.n	80004c4 <fsm_traffic_2_run+0x9c>
				state_led_traffic_2 = GREEN;
 800044e:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <fsm_traffic_2_run+0xac>)
 8000450:	220c      	movs	r2, #12
 8000452:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 8000454:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <fsm_traffic_2_run+0xac>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f000 ff8b 	bl	8001374 <turn_on_traffic_led_2>
				set_timer(TIMER_LED_TRAFFIC_2,duration_time_of_GREEN);
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <fsm_traffic_2_run+0xb0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	2005      	movs	r0, #5
 8000466:	f000 fea3 	bl	80011b0 <set_timer>
		break;
 800046a:	e02b      	b.n	80004c4 <fsm_traffic_2_run+0x9c>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_2)){
 800046c:	2005      	movs	r0, #5
 800046e:	f000 fee5 	bl	800123c <is_timer_timeout>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d027      	beq.n	80004c8 <fsm_traffic_2_run+0xa0>
				state_led_traffic_2 = RED;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <fsm_traffic_2_run+0xac>)
 800047a:	220a      	movs	r2, #10
 800047c:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <fsm_traffic_2_run+0xac>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f000 ff76 	bl	8001374 <turn_on_traffic_led_2>
				set_timer(TIMER_LED_TRAFFIC_2,duration_time_of_RED);
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <fsm_traffic_2_run+0xb4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4619      	mov	r1, r3
 800048e:	2005      	movs	r0, #5
 8000490:	f000 fe8e 	bl	80011b0 <set_timer>
		break;
 8000494:	e018      	b.n	80004c8 <fsm_traffic_2_run+0xa0>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_2)){
 8000496:	2005      	movs	r0, #5
 8000498:	f000 fed0 	bl	800123c <is_timer_timeout>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d014      	beq.n	80004cc <fsm_traffic_2_run+0xa4>
				state_led_traffic_2 = YELLOW;
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <fsm_traffic_2_run+0xac>)
 80004a4:	220b      	movs	r2, #11
 80004a6:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <fsm_traffic_2_run+0xac>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 ff61 	bl	8001374 <turn_on_traffic_led_2>
				set_timer(TIMER_LED_TRAFFIC_2,duration_time_of_YELLOW);
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <fsm_traffic_2_run+0xb8>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4619      	mov	r1, r3
 80004b8:	2005      	movs	r0, #5
 80004ba:	f000 fe79 	bl	80011b0 <set_timer>
		break;
 80004be:	e005      	b.n	80004cc <fsm_traffic_2_run+0xa4>
		break;
 80004c0:	bf00      	nop
 80004c2:	e004      	b.n	80004ce <fsm_traffic_2_run+0xa6>
		break;
 80004c4:	bf00      	nop
 80004c6:	e002      	b.n	80004ce <fsm_traffic_2_run+0xa6>
		break;
 80004c8:	bf00      	nop
 80004ca:	e000      	b.n	80004ce <fsm_traffic_2_run+0xa6>
		break;
 80004cc:	bf00      	nop
	}
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000054 	.word	0x20000054
 80004d8:	20000060 	.word	0x20000060
 80004dc:	20000058 	.word	0x20000058
 80004e0:	2000005c 	.word	0x2000005c

080004e4 <fsm_system_run>:


void fsm_system_run(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	switch(mode){
 80004e8:	4b9d      	ldr	r3, [pc, #628]	; (8000760 <fsm_system_run+0x27c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	f200 81ac 	bhi.w	800084a <fsm_system_run+0x366>
 80004f2:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <fsm_system_run+0x14>)
 80004f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f8:	0800050d 	.word	0x0800050d
 80004fc:	08000569 	.word	0x08000569
 8000500:	080005f9 	.word	0x080005f9
 8000504:	080006ad 	.word	0x080006ad
 8000508:	08000789 	.word	0x08000789
		case INIT_SYSTEM:
			//TODO
			state_led_traffic_1 = RED;
 800050c:	4b95      	ldr	r3, [pc, #596]	; (8000764 <fsm_system_run+0x280>)
 800050e:	220a      	movs	r2, #10
 8000510:	601a      	str	r2, [r3, #0]
			turn_on_traffic_led_1(state_led_traffic_1);
 8000512:	4b94      	ldr	r3, [pc, #592]	; (8000764 <fsm_system_run+0x280>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 feda 	bl	80012d0 <turn_on_traffic_led_1>
			state_led_traffic_2 = GREEN;
 800051c:	4b92      	ldr	r3, [pc, #584]	; (8000768 <fsm_system_run+0x284>)
 800051e:	220c      	movs	r2, #12
 8000520:	601a      	str	r2, [r3, #0]
			turn_on_traffic_led_2(state_led_traffic_2);
 8000522:	4b91      	ldr	r3, [pc, #580]	; (8000768 <fsm_system_run+0x284>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 ff24 	bl	8001374 <turn_on_traffic_led_2>

			set_timer(TIMER_LED_TRAFFIC_1, duration_time_of_RED);
 800052c:	4b8f      	ldr	r3, [pc, #572]	; (800076c <fsm_system_run+0x288>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	2004      	movs	r0, #4
 8000534:	f000 fe3c 	bl	80011b0 <set_timer>
			set_timer(TIMER_LED_TRAFFIC_2, duration_time_of_GREEN);
 8000538:	4b8d      	ldr	r3, [pc, #564]	; (8000770 <fsm_system_run+0x28c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	2005      	movs	r0, #5
 8000540:	f000 fe36 	bl	80011b0 <set_timer>

			update_buffer_high(get_time_of_counter(TIMER_LED_TRAFFIC_1));
 8000544:	2004      	movs	r0, #4
 8000546:	f000 fe65 	bl	8001214 <get_time_of_counter>
 800054a:	4603      	mov	r3, r0
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f997 	bl	8000880 <update_buffer_high>
			update_buffer_low(get_time_of_counter(TIMER_LED_TRAFFIC_2));
 8000552:	2005      	movs	r0, #5
 8000554:	f000 fe5e 	bl	8001214 <get_time_of_counter>
 8000558:	4603      	mov	r3, r0
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f9be 	bl	80008dc <update_buffer_low>
			//STATE STRANSITION
			mode = NORMAL_MODE;
 8000560:	4b7f      	ldr	r3, [pc, #508]	; (8000760 <fsm_system_run+0x27c>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
		break;
 8000566:	e179      	b.n	800085c <fsm_system_run+0x378>
		case NORMAL_MODE:
			//TODO
			fsm_traffic_1_run();
 8000568:	f7ff ff00 	bl	800036c <fsm_traffic_1_run>
			fsm_traffic_2_run();
 800056c:	f7ff ff5c 	bl	8000428 <fsm_traffic_2_run>
			update_buffer_high(get_time_of_counter(TIMER_LED_TRAFFIC_1));
 8000570:	2004      	movs	r0, #4
 8000572:	f000 fe4f 	bl	8001214 <get_time_of_counter>
 8000576:	4603      	mov	r3, r0
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f981 	bl	8000880 <update_buffer_high>
			update_buffer_low(get_time_of_counter(TIMER_LED_TRAFFIC_2));
 800057e:	2005      	movs	r0, #5
 8000580:	f000 fe48 	bl	8001214 <get_time_of_counter>
 8000584:	4603      	mov	r3, r0
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f9a8 	bl	80008dc <update_buffer_low>

			//STATE STRANSITION
			//button 1 is pressed,  NORMAl_MODE -> MODIFY_RED_MODE
			if(is_pressed(BUTTON_1)){
 800058c:	2001      	movs	r0, #1
 800058e:	f7ff fddd 	bl	800014c <is_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	f000 815a 	beq.w	800084e <fsm_system_run+0x36a>
				clear_timer(TIMER_LED_TRAFFIC_1);
 800059a:	2004      	movs	r0, #4
 800059c:	f000 fe22 	bl	80011e4 <clear_timer>
				clear_timer(TIMER_LED_TRAFFIC_2);
 80005a0:	2005      	movs	r0, #5
 80005a2:	f000 fe1f 	bl	80011e4 <clear_timer>
				state_led_traffic_1 = RED;
 80005a6:	4b6f      	ldr	r3, [pc, #444]	; (8000764 <fsm_system_run+0x280>)
 80005a8:	220a      	movs	r2, #10
 80005aa:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 80005ac:	4b6d      	ldr	r3, [pc, #436]	; (8000764 <fsm_system_run+0x280>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fe8d 	bl	80012d0 <turn_on_traffic_led_1>
				state_led_traffic_2 = RED;
 80005b6:	4b6c      	ldr	r3, [pc, #432]	; (8000768 <fsm_system_run+0x284>)
 80005b8:	220a      	movs	r2, #10
 80005ba:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 80005bc:	4b6a      	ldr	r3, [pc, #424]	; (8000768 <fsm_system_run+0x284>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fed7 	bl	8001374 <turn_on_traffic_led_2>

				is_led_ON= 0;
 80005c6:	4b6b      	ldr	r3, [pc, #428]	; (8000774 <fsm_system_run+0x290>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
				set_timer(TIMER_BLINKING_LED, 500);
 80005cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005d0:	2006      	movs	r0, #6
 80005d2:	f000 fded 	bl	80011b0 <set_timer>
				buffer_duration_time = duration_time_of_RED;
 80005d6:	4b65      	ldr	r3, [pc, #404]	; (800076c <fsm_system_run+0x288>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a67      	ldr	r2, [pc, #412]	; (8000778 <fsm_system_run+0x294>)
 80005dc:	6013      	str	r3, [r2, #0]


				update_buffer_high(1000);
 80005de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e2:	f000 f94d 	bl	8000880 <update_buffer_high>
				update_buffer_low(buffer_duration_time);
 80005e6:	4b64      	ldr	r3, [pc, #400]	; (8000778 <fsm_system_run+0x294>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f976 	bl	80008dc <update_buffer_low>
				mode = MODIFY_RED_MODE;
 80005f0:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <fsm_system_run+0x27c>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	601a      	str	r2, [r3, #0]
			}
		break;
 80005f6:	e12a      	b.n	800084e <fsm_system_run+0x36a>
		case MODIFY_RED_MODE:
			//todo

			blinking_led_traffic(state_led_traffic_1);
 80005f8:	4b5a      	ldr	r3, [pc, #360]	; (8000764 <fsm_system_run+0x280>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 ff13 	bl	8001428 <blinking_led_traffic>



			//button 2 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(BUTTON_2)){
 8000602:	2002      	movs	r0, #2
 8000604:	f7ff fda2 	bl	800014c <is_pressed>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d014      	beq.n	8000638 <fsm_system_run+0x154>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 800060e:	4b5a      	ldr	r3, [pc, #360]	; (8000778 <fsm_system_run+0x294>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000616:	4b59      	ldr	r3, [pc, #356]	; (800077c <fsm_system_run+0x298>)
 8000618:	fb83 1302 	smull	r1, r3, r3, r2
 800061c:	1359      	asrs	r1, r3, #13
 800061e:	17d3      	asrs	r3, r2, #31
 8000620:	1acb      	subs	r3, r1, r3
 8000622:	4957      	ldr	r1, [pc, #348]	; (8000780 <fsm_system_run+0x29c>)
 8000624:	fb01 f303 	mul.w	r3, r1, r3
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	4a53      	ldr	r2, [pc, #332]	; (8000778 <fsm_system_run+0x294>)
 800062c:	6013      	str	r3, [r2, #0]
				update_buffer_low(buffer_duration_time);
 800062e:	4b52      	ldr	r3, [pc, #328]	; (8000778 <fsm_system_run+0x294>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f952 	bl	80008dc <update_buffer_low>
			}
			//button 3 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(BUTTON_3)){
 8000638:	2003      	movs	r0, #3
 800063a:	f7ff fd87 	bl	800014c <is_pressed>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d003      	beq.n	800064c <fsm_system_run+0x168>
				duration_time_of_RED = buffer_duration_time;
 8000644:	4b4c      	ldr	r3, [pc, #304]	; (8000778 <fsm_system_run+0x294>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a48      	ldr	r2, [pc, #288]	; (800076c <fsm_system_run+0x288>)
 800064a:	6013      	str	r3, [r2, #0]
			}
			//STATE STRANSITION
			//button 1 is pressed, MODIFY_RED_MODE -> MODIFY_YELLOW_MODE
			if(is_pressed(BUTTON_1)){
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff fd7d 	bl	800014c <is_pressed>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	f000 80fc 	beq.w	8000852 <fsm_system_run+0x36e>
				state_led_traffic_1 = YELLOW;
 800065a:	4b42      	ldr	r3, [pc, #264]	; (8000764 <fsm_system_run+0x280>)
 800065c:	220b      	movs	r2, #11
 800065e:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 8000660:	4b40      	ldr	r3, [pc, #256]	; (8000764 <fsm_system_run+0x280>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fe33 	bl	80012d0 <turn_on_traffic_led_1>
				state_led_traffic_2 = YELLOW;
 800066a:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <fsm_system_run+0x284>)
 800066c:	220b      	movs	r2, #11
 800066e:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 8000670:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <fsm_system_run+0x284>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fe7d 	bl	8001374 <turn_on_traffic_led_2>

				is_led_ON= 0;
 800067a:	4b3e      	ldr	r3, [pc, #248]	; (8000774 <fsm_system_run+0x290>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
				set_timer(TIMER_BLINKING_LED, 500);
 8000680:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000684:	2006      	movs	r0, #6
 8000686:	f000 fd93 	bl	80011b0 <set_timer>
				buffer_duration_time = duration_time_of_YELLOW;
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <fsm_system_run+0x2a0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a3a      	ldr	r2, [pc, #232]	; (8000778 <fsm_system_run+0x294>)
 8000690:	6013      	str	r3, [r2, #0]

				update_buffer_high(2000);
 8000692:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000696:	f000 f8f3 	bl	8000880 <update_buffer_high>
				update_buffer_low(buffer_duration_time);
 800069a:	4b37      	ldr	r3, [pc, #220]	; (8000778 <fsm_system_run+0x294>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f91c 	bl	80008dc <update_buffer_low>

				mode = MODIFY_YELLOW_MODE;
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <fsm_system_run+0x27c>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	601a      	str	r2, [r3, #0]
			}
		break;
 80006aa:	e0d2      	b.n	8000852 <fsm_system_run+0x36e>
		case MODIFY_YELLOW_MODE:
			blinking_led_traffic(state_led_traffic_1);
 80006ac:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <fsm_system_run+0x280>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 feb9 	bl	8001428 <blinking_led_traffic>

			//button 2 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(BUTTON_2)){
 80006b6:	2002      	movs	r0, #2
 80006b8:	f7ff fd48 	bl	800014c <is_pressed>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d014      	beq.n	80006ec <fsm_system_run+0x208>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 80006c2:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <fsm_system_run+0x294>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <fsm_system_run+0x298>)
 80006cc:	fb83 1302 	smull	r1, r3, r3, r2
 80006d0:	1359      	asrs	r1, r3, #13
 80006d2:	17d3      	asrs	r3, r2, #31
 80006d4:	1acb      	subs	r3, r1, r3
 80006d6:	492a      	ldr	r1, [pc, #168]	; (8000780 <fsm_system_run+0x29c>)
 80006d8:	fb01 f303 	mul.w	r3, r1, r3
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	4a26      	ldr	r2, [pc, #152]	; (8000778 <fsm_system_run+0x294>)
 80006e0:	6013      	str	r3, [r2, #0]
				update_buffer_low(buffer_duration_time);
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <fsm_system_run+0x294>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f8f8 	bl	80008dc <update_buffer_low>
			}
			//button 3 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(BUTTON_3)){
 80006ec:	2003      	movs	r0, #3
 80006ee:	f7ff fd2d 	bl	800014c <is_pressed>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d003      	beq.n	8000700 <fsm_system_run+0x21c>
				duration_time_of_YELLOW = buffer_duration_time;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <fsm_system_run+0x294>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <fsm_system_run+0x2a0>)
 80006fe:	6013      	str	r3, [r2, #0]
			}

			//STATE STRANSITION
			//button 1 is pressed,MODIFY_YELLOW_MODE  ->  MODIFY_GREEN_MODE
			if(is_pressed(BUTTON_1)){
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff fd23 	bl	800014c <is_pressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	f000 80a4 	beq.w	8000856 <fsm_system_run+0x372>
				state_led_traffic_1 = GREEN;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <fsm_system_run+0x280>)
 8000710:	220c      	movs	r2, #12
 8000712:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <fsm_system_run+0x280>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fdd9 	bl	80012d0 <turn_on_traffic_led_1>
				state_led_traffic_2 = GREEN;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <fsm_system_run+0x284>)
 8000720:	220c      	movs	r2, #12
 8000722:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <fsm_system_run+0x284>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe23 	bl	8001374 <turn_on_traffic_led_2>

				is_led_ON= 0;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <fsm_system_run+0x290>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
				set_timer(TIMER_BLINKING_LED, 500);
 8000734:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000738:	2006      	movs	r0, #6
 800073a:	f000 fd39 	bl	80011b0 <set_timer>
				buffer_duration_time = duration_time_of_GREEN;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <fsm_system_run+0x28c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <fsm_system_run+0x294>)
 8000744:	6013      	str	r3, [r2, #0]

				update_buffer_high(3000);
 8000746:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800074a:	f000 f899 	bl	8000880 <update_buffer_high>
				update_buffer_low(buffer_duration_time);
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <fsm_system_run+0x294>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f8c2 	bl	80008dc <update_buffer_low>

				mode = MODIFY_GREEN_MODE;
 8000758:	4b01      	ldr	r3, [pc, #4]	; (8000760 <fsm_system_run+0x27c>)
 800075a:	2204      	movs	r2, #4
 800075c:	601a      	str	r2, [r3, #0]
			}
		break;
 800075e:	e07a      	b.n	8000856 <fsm_system_run+0x372>
 8000760:	200000c0 	.word	0x200000c0
 8000764:	20000050 	.word	0x20000050
 8000768:	20000054 	.word	0x20000054
 800076c:	20000058 	.word	0x20000058
 8000770:	20000060 	.word	0x20000060
 8000774:	20000158 	.word	0x20000158
 8000778:	20000064 	.word	0x20000064
 800077c:	14f8b589 	.word	0x14f8b589
 8000780:	000186a0 	.word	0x000186a0
 8000784:	2000005c 	.word	0x2000005c
		case MODIFY_GREEN_MODE:
			blinking_led_traffic(state_led_traffic_1);
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <fsm_system_run+0x37c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fe4b 	bl	8001428 <blinking_led_traffic>
			//button 2 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(BUTTON_2)){
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff fcda 	bl	800014c <is_pressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d014      	beq.n	80007c8 <fsm_system_run+0x2e4>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <fsm_system_run+0x380>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <fsm_system_run+0x384>)
 80007a8:	fb83 1302 	smull	r1, r3, r3, r2
 80007ac:	1359      	asrs	r1, r3, #13
 80007ae:	17d3      	asrs	r3, r2, #31
 80007b0:	1acb      	subs	r3, r1, r3
 80007b2:	492e      	ldr	r1, [pc, #184]	; (800086c <fsm_system_run+0x388>)
 80007b4:	fb01 f303 	mul.w	r3, r1, r3
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <fsm_system_run+0x380>)
 80007bc:	6013      	str	r3, [r2, #0]
				update_buffer_low(buffer_duration_time);
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <fsm_system_run+0x380>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f88a 	bl	80008dc <update_buffer_low>
			}
			//button 3 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(BUTTON_3)){
 80007c8:	2003      	movs	r0, #3
 80007ca:	f7ff fcbf 	bl	800014c <is_pressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <fsm_system_run+0x2f8>
				duration_time_of_GREEN = buffer_duration_time;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <fsm_system_run+0x380>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a25      	ldr	r2, [pc, #148]	; (8000870 <fsm_system_run+0x38c>)
 80007da:	6013      	str	r3, [r2, #0]
			}

			//STATE STRANSITION
			//button 1 is pressed, MODIFY_GREEN_MODE -> NORMAL_MODE
			if(is_pressed(BUTTON_1)){
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff fcb5 	bl	800014c <is_pressed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d038      	beq.n	800085a <fsm_system_run+0x376>
				clear_timer(TIMER_BLINKING_LED);
 80007e8:	2006      	movs	r0, #6
 80007ea:	f000 fcfb 	bl	80011e4 <clear_timer>
				state_led_traffic_1 = RED;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <fsm_system_run+0x37c>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <fsm_system_run+0x37c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fd69 	bl	80012d0 <turn_on_traffic_led_1>
				state_led_traffic_2 = GREEN;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <fsm_system_run+0x390>)
 8000800:	220c      	movs	r2, #12
 8000802:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <fsm_system_run+0x390>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fdb3 	bl	8001374 <turn_on_traffic_led_2>
				set_timer(TIMER_LED_TRAFFIC_1, duration_time_of_RED);
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <fsm_system_run+0x394>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4619      	mov	r1, r3
 8000814:	2004      	movs	r0, #4
 8000816:	f000 fccb 	bl	80011b0 <set_timer>
				set_timer(TIMER_LED_TRAFFIC_2, duration_time_of_GREEN);
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <fsm_system_run+0x38c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	2005      	movs	r0, #5
 8000822:	f000 fcc5 	bl	80011b0 <set_timer>
				update_buffer_high(get_time_of_counter(TIMER_LED_TRAFFIC_1));
 8000826:	2004      	movs	r0, #4
 8000828:	f000 fcf4 	bl	8001214 <get_time_of_counter>
 800082c:	4603      	mov	r3, r0
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f826 	bl	8000880 <update_buffer_high>
				update_buffer_low(get_time_of_counter(TIMER_LED_TRAFFIC_2));
 8000834:	2005      	movs	r0, #5
 8000836:	f000 fced 	bl	8001214 <get_time_of_counter>
 800083a:	4603      	mov	r3, r0
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f84d 	bl	80008dc <update_buffer_low>
				mode = NORMAL_MODE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <fsm_system_run+0x398>)
 8000844:	2201      	movs	r2, #1
 8000846:	601a      	str	r2, [r3, #0]
			}
		break;
 8000848:	e007      	b.n	800085a <fsm_system_run+0x376>
		default:
		break;
 800084a:	bf00      	nop
 800084c:	e006      	b.n	800085c <fsm_system_run+0x378>
		break;
 800084e:	bf00      	nop
 8000850:	e004      	b.n	800085c <fsm_system_run+0x378>
		break;
 8000852:	bf00      	nop
 8000854:	e002      	b.n	800085c <fsm_system_run+0x378>
		break;
 8000856:	bf00      	nop
 8000858:	e000      	b.n	800085c <fsm_system_run+0x378>
		break;
 800085a:	bf00      	nop
	}
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000050 	.word	0x20000050
 8000864:	20000064 	.word	0x20000064
 8000868:	14f8b589 	.word	0x14f8b589
 800086c:	000186a0 	.word	0x000186a0
 8000870:	20000060 	.word	0x20000060
 8000874:	20000054 	.word	0x20000054
 8000878:	20000058 	.word	0x20000058
 800087c:	200000c0 	.word	0x200000c0

08000880 <update_buffer_high>:
#include "led_7_seg.h"

int buffer_output [NUMBER_OF_BUFFER] = {0};


void update_buffer_high(int number){
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	number /= 1000;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <update_buffer_high+0x50>)
 800088c:	fb82 1203 	smull	r1, r2, r2, r3
 8000890:	1192      	asrs	r2, r2, #6
 8000892:	17db      	asrs	r3, r3, #31
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	607b      	str	r3, [r7, #4]
	buffer_output[0] = number/10;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <update_buffer_high+0x54>)
 800089c:	fb82 1203 	smull	r1, r2, r2, r3
 80008a0:	1092      	asrs	r2, r2, #2
 80008a2:	17db      	asrs	r3, r3, #31
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <update_buffer_high+0x58>)
 80008a8:	6013      	str	r3, [r2, #0]
	buffer_output[1] = number%10;
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <update_buffer_high+0x54>)
 80008ae:	fb83 2301 	smull	r2, r3, r3, r1
 80008b2:	109a      	asrs	r2, r3, #2
 80008b4:	17cb      	asrs	r3, r1, #31
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	4613      	mov	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	4413      	add	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1aca      	subs	r2, r1, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <update_buffer_high+0x58>)
 80008c4:	605a      	str	r2, [r3, #4]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	10624dd3 	.word	0x10624dd3
 80008d4:	66666667 	.word	0x66666667
 80008d8:	200000c4 	.word	0x200000c4

080008dc <update_buffer_low>:
void update_buffer_low(int number){
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	number /= 1000;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <update_buffer_low+0x50>)
 80008e8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ec:	1192      	asrs	r2, r2, #6
 80008ee:	17db      	asrs	r3, r3, #31
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	607b      	str	r3, [r7, #4]
	buffer_output[2] = number/10;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <update_buffer_low+0x54>)
 80008f8:	fb82 1203 	smull	r1, r2, r2, r3
 80008fc:	1092      	asrs	r2, r2, #2
 80008fe:	17db      	asrs	r3, r3, #31
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <update_buffer_low+0x58>)
 8000904:	6093      	str	r3, [r2, #8]
	buffer_output[3] = number%10;
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <update_buffer_low+0x54>)
 800090a:	fb83 2301 	smull	r2, r3, r3, r1
 800090e:	109a      	asrs	r2, r3, #2
 8000910:	17cb      	asrs	r3, r1, #31
 8000912:	1ad2      	subs	r2, r2, r3
 8000914:	4613      	mov	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	1aca      	subs	r2, r1, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <update_buffer_low+0x58>)
 8000920:	60da      	str	r2, [r3, #12]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	10624dd3 	.word	0x10624dd3
 8000930:	66666667 	.word	0x66666667
 8000934:	200000c4 	.word	0x200000c4

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 fdc4 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f820 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f000 f922 	bl	8000b8c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000948:	f000 f85e 	bl	8000a08 <MX_TIM2_Init>
  MX_TIM3_Init();
 800094c:	f000 f8a8 	bl	8000aa0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <main+0x40>)
 8000952:	f001 fd15 	bl	8002380 <HAL_TIM_Base_Start_IT>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000956:	2100      	movs	r1, #0
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <main+0x44>)
 800095a:	f001 fdbb 	bl	80024d4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
mode = INIT_SYSTEM;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <main+0x48>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]


  while (1)
  {

	  fsm_for_button();
 8000964:	f7ff fc94 	bl	8000290 <fsm_for_button>
	  fsm_system_run();
 8000968:	f7ff fdbc 	bl	80004e4 <fsm_system_run>
	  fsm_pedestrian_run();
 800096c:	f000 fa66 	bl	8000e3c <fsm_pedestrian_run>
	 control_buzzer();
 8000970:	f000 f986 	bl	8000c80 <control_buzzer>
	  fsm_for_button();
 8000974:	e7f6      	b.n	8000964 <main+0x2c>
 8000976:	bf00      	nop
 8000978:	200001a4 	.word	0x200001a4
 800097c:	2000015c 	.word	0x2000015c
 8000980:	200000c0 	.word	0x200000c0

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b090      	sub	sp, #64	; 0x40
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	2228      	movs	r2, #40	; 0x28
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fc26 	bl	80031e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009aa:	2301      	movs	r3, #1
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ae:	2310      	movs	r3, #16
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009b6:	2300      	movs	r3, #0
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80009ba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 f8a3 	bl	8001b10 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80009d0:	f000 f9a6 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	230f      	movs	r3, #15
 80009d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d8:	2302      	movs	r3, #2
 80009da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2102      	movs	r1, #2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fb0e 	bl	8002010 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80009fa:	f000 f991 	bl	8000d20 <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3740      	adds	r7, #64	; 0x40
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_TIM2_Init+0x94>)
 8000a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_TIM2_Init+0x94>)
 8000a2e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_TIM2_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_TIM2_Init+0x94>)
 8000a3c:	220a      	movs	r2, #10
 8000a3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_TIM2_Init+0x94>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_TIM2_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <MX_TIM2_Init+0x94>)
 8000a4e:	f001 fc47 	bl	80022e0 <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a58:	f000 f962 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4619      	mov	r1, r3
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <MX_TIM2_Init+0x94>)
 8000a6a:	f001 ff9b 	bl	80029a4 <HAL_TIM_ConfigClockSource>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a74:	f000 f954 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_TIM2_Init+0x94>)
 8000a86:	f002 fb19 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a90:	f000 f946 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200001a4 	.word	0x200001a4

08000aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	f107 0320 	add.w	r3, r7, #32
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000ad2:	4a2d      	ldr	r2, [pc, #180]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000ad8:	223f      	movs	r2, #63	; 0x3f
 8000ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000ae4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000af6:	4823      	ldr	r0, [pc, #140]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000af8:	f001 fbf2 	bl	80022e0 <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b02:	f000 f90d 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b10:	4619      	mov	r1, r3
 8000b12:	481c      	ldr	r0, [pc, #112]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000b14:	f001 ff46 	bl	80029a4 <HAL_TIM_ConfigClockSource>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b1e:	f000 f8ff 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b22:	4818      	ldr	r0, [pc, #96]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000b24:	f001 fc7e 	bl	8002424 <HAL_TIM_PWM_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b2e:	f000 f8f7 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4810      	ldr	r0, [pc, #64]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000b42:	f002 fabb 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b4c:	f000 f8e8 	bl	8000d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b50:	2360      	movs	r3, #96	; 0x60
 8000b52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000b68:	f001 fe5e 	bl	8002828 <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b72:	f000 f8d5 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM3_Init+0xe4>)
 8000b78:	f000 fab0 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000b7c:	bf00      	nop
 8000b7e:	3738      	adds	r7, #56	; 0x38
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000015c 	.word	0x2000015c
 8000b88:	40000400 	.word	0x40000400

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a2d      	ldr	r2, [pc, #180]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <MX_GPIO_Init+0xd0>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000bd6:	4822      	ldr	r0, [pc, #136]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000bd8:	f000 ff81 	bl	8001ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000be2:	4820      	ldr	r0, [pc, #128]	; (8000c64 <MX_GPIO_Init+0xd8>)
 8000be4:	f000 ff7b 	bl	8001ade <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000be8:	2313      	movs	r3, #19
 8000bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481a      	ldr	r0, [pc, #104]	; (8000c64 <MX_GPIO_Init+0xd8>)
 8000bfc:	f000 fdd4 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000c00:	2301      	movs	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	4813      	ldr	r0, [pc, #76]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000c14:	f000 fdc8 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000c18:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2302      	movs	r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000c32:	f000 fdb9 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000c36:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000c3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2302      	movs	r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_GPIO_Init+0xd8>)
 8000c50:	f000 fdaa 	bl	80017a8 <HAL_GPIO_Init>

}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010c00 	.word	0x40010c00
 8000c64:	40010800 	.word	0x40010800

08000c68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	timer_run();
 8000c70:	f000 fafe 	bl	8001270 <timer_run>
	read_input();
 8000c74:	f7ff fa88 	bl	8000188 <read_input>

}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <control_buzzer>:



void control_buzzer(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	if(buzzer_flag == 1){
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <control_buzzer+0x8c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d138      	bne.n	8000cfe <control_buzzer+0x7e>
		// pedestrian led is GREEN
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1, 1000 - pulse_width);
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <control_buzzer+0x90>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <control_buzzer+0x94>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34
		if(is_timer_timeout(TIMER_BUZZER)){
 8000c9a:	2008      	movs	r0, #8
 8000c9c:	f000 face 	bl	800123c <is_timer_timeout>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d030      	beq.n	8000d08 <control_buzzer+0x88>
			if(is_buzzer_active){
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <control_buzzer+0x98>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00c      	beq.n	8000cc8 <control_buzzer+0x48>
				pulse_width = 0;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <control_buzzer+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
				is_buzzer_active = 0;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <control_buzzer+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
				set_timer(TIMER_BUZZER,  time_of_buzzer );
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <control_buzzer+0x9c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	2008      	movs	r0, #8
 8000cc2:	f000 fa75 	bl	80011b0 <set_timer>
	else{
		// pedestrian led is RED
		//turn_of_buzzer
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1, 1000);
	}
}
 8000cc6:	e01f      	b.n	8000d08 <control_buzzer+0x88>
				pulse_width = 500;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <control_buzzer+0x90>)
 8000cca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cce:	601a      	str	r2, [r3, #0]
				if( time_of_buzzer  > 50) time_of_buzzer =  time_of_buzzer - 50 ;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <control_buzzer+0x9c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b32      	cmp	r3, #50	; 0x32
 8000cd6:	dd05      	ble.n	8000ce4 <control_buzzer+0x64>
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <control_buzzer+0x9c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3b32      	subs	r3, #50	; 0x32
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <control_buzzer+0x9c>)
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e002      	b.n	8000cea <control_buzzer+0x6a>
				else time_of_buzzer = 50;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <control_buzzer+0x9c>)
 8000ce6:	2232      	movs	r2, #50	; 0x32
 8000ce8:	601a      	str	r2, [r3, #0]
				set_timer(TIMER_BUZZER,  time_of_buzzer );
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <control_buzzer+0x9c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	2008      	movs	r0, #8
 8000cf2:	f000 fa5d 	bl	80011b0 <set_timer>
				is_buzzer_active = 1;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <control_buzzer+0x98>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	e004      	b.n	8000d08 <control_buzzer+0x88>
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1, 1000);
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <control_buzzer+0x94>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200000d8 	.word	0x200000d8
 8000d10:	200000d4 	.word	0x200000d4
 8000d14:	2000015c 	.word	0x2000015c
 8000d18:	20000074 	.word	0x20000074
 8000d1c:	200000dc 	.word	0x200000dc

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <turn_on_buzzer>:
int safe_time = 5000;
int time_of_buzzer = 0;

int is_buzzer_active= 1;

void turn_on_buzzer(){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	pulse_width = 500;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <turn_on_buzzer+0x2c>)
 8000d32:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d36:	601a      	str	r2, [r3, #0]
	time_of_buzzer = 300;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <turn_on_buzzer+0x30>)
 8000d3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d3e:	601a      	str	r2, [r3, #0]
	buzzer_flag = 1;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <turn_on_buzzer+0x34>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
	set_timer(TIMER_BUZZER, time_of_buzzer);
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <turn_on_buzzer+0x30>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	2008      	movs	r0, #8
 8000d4e:	f000 fa2f 	bl	80011b0 <set_timer>
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000d4 	.word	0x200000d4
 8000d5c:	200000dc 	.word	0x200000dc
 8000d60:	200000d8 	.word	0x200000d8

08000d64 <turn_off_buzzer>:

void turn_off_buzzer(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	pulse_width = 0;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <turn_off_buzzer+0x20>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
	time_of_buzzer = 0;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <turn_off_buzzer+0x24>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
	buzzer_flag = 0;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <turn_off_buzzer+0x28>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
	clear_timer(TIMER_BUZZER);
 8000d7a:	2008      	movs	r0, #8
 8000d7c:	f000 fa32 	bl	80011e4 <clear_timer>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200000d4 	.word	0x200000d4
 8000d88:	200000dc 	.word	0x200000dc
 8000d8c:	200000d8 	.word	0x200000d8

08000d90 <turn_on_led_PED>:


void turn_on_led_PED(int state){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	switch(state){
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b0c      	cmp	r3, #12
 8000d9c:	d016      	beq.n	8000dcc <turn_on_led_PED+0x3c>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0c      	cmp	r3, #12
 8000da2:	dc2d      	bgt.n	8000e00 <turn_on_led_PED+0x70>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	d003      	beq.n	8000db2 <turn_on_led_PED+0x22>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0b      	cmp	r3, #11
 8000dae:	d01a      	beq.n	8000de6 <turn_on_led_PED+0x56>
		case YELLOW:
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
		break;
		default:
		break;
 8000db0:	e026      	b.n	8000e00 <turn_on_led_PED+0x70>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db8:	4814      	ldr	r0, [pc, #80]	; (8000e0c <turn_on_led_PED+0x7c>)
 8000dba:	f000 fe90 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4812      	ldr	r0, [pc, #72]	; (8000e10 <turn_on_led_PED+0x80>)
 8000dc6:	f000 fe8a 	bl	8001ade <HAL_GPIO_WritePin>
		break;
 8000dca:	e01a      	b.n	8000e02 <turn_on_led_PED+0x72>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <turn_on_led_PED+0x7c>)
 8000dd4:	f000 fe83 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dde:	480c      	ldr	r0, [pc, #48]	; (8000e10 <turn_on_led_PED+0x80>)
 8000de0:	f000 fe7d 	bl	8001ade <HAL_GPIO_WritePin>
		break;
 8000de4:	e00d      	b.n	8000e02 <turn_on_led_PED+0x72>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <turn_on_led_PED+0x7c>)
 8000dee:	f000 fe76 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <turn_on_led_PED+0x80>)
 8000dfa:	f000 fe70 	bl	8001ade <HAL_GPIO_WritePin>
		break;
 8000dfe:	e000      	b.n	8000e02 <turn_on_led_PED+0x72>
		break;
 8000e00:	bf00      	nop
	}
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40010800 	.word	0x40010800

08000e14 <turn_off_led_PED>:
void turn_off_led_PED(){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <turn_off_led_PED+0x20>)
 8000e20:	f000 fe5d 	bl	8001ade <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2a:	4803      	ldr	r0, [pc, #12]	; (8000e38 <turn_off_led_PED+0x24>)
 8000e2c:	f000 fe57 	bl	8001ade <HAL_GPIO_WritePin>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40010c00 	.word	0x40010c00
 8000e38:	40010800 	.word	0x40010800

08000e3c <fsm_pedestrian_run>:




void fsm_pedestrian_run(){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	switch(state_of_pedestrian){
 8000e40:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3b1e      	subs	r3, #30
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	f200 80c0 	bhi.w	8000fcc <fsm_pedestrian_run+0x190>
 8000e4c:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <fsm_pedestrian_run+0x18>)
 8000e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e52:	bf00      	nop
 8000e54:	08000e65 	.word	0x08000e65
 8000e58:	08000ecd 	.word	0x08000ecd
 8000e5c:	08000f2b 	.word	0x08000f2b
 8000e60:	08000fb9 	.word	0x08000fb9
	case OFF_PEDESTRIAN:
		cycle_of_pedestrian =( duration_time_of_RED + duration_time_of_YELLOW+ duration_time_of_GREEN) *2;
 8000e64:	4b60      	ldr	r3, [pc, #384]	; (8000fe8 <fsm_pedestrian_run+0x1ac>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b60      	ldr	r3, [pc, #384]	; (8000fec <fsm_pedestrian_run+0x1b0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	441a      	add	r2, r3
 8000e6e:	4b60      	ldr	r3, [pc, #384]	; (8000ff0 <fsm_pedestrian_run+0x1b4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4a5f      	ldr	r2, [pc, #380]	; (8000ff4 <fsm_pedestrian_run+0x1b8>)
 8000e78:	6013      	str	r3, [r2, #0]
		if(is_pressed( BUTTON_0 )){
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff f966 	bl	800014c <is_pressed>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d016      	beq.n	8000eb4 <fsm_pedestrian_run+0x78>
			set_timer(TIMER_PEDESTRIAN ,cycle_of_pedestrian);
 8000e86:	4b5b      	ldr	r3, [pc, #364]	; (8000ff4 <fsm_pedestrian_run+0x1b8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2007      	movs	r0, #7
 8000e8e:	f000 f98f 	bl	80011b0 <set_timer>
			if(state_led_traffic_1 != RED){
 8000e92:	4b59      	ldr	r3, [pc, #356]	; (8000ff8 <fsm_pedestrian_run+0x1bc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b0a      	cmp	r3, #10
 8000e98:	d006      	beq.n	8000ea8 <fsm_pedestrian_run+0x6c>
				state_of_pedestrian = RED_PEDESTRIAN;
 8000e9a:	4b52      	ldr	r3, [pc, #328]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000e9c:	221f      	movs	r2, #31
 8000e9e:	601a      	str	r2, [r3, #0]
				turn_on_led_PED(RED);
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f7ff ff75 	bl	8000d90 <turn_on_led_PED>
 8000ea6:	e005      	b.n	8000eb4 <fsm_pedestrian_run+0x78>
			}
			else {
				state_of_pedestrian = GREEN_PEDESTRIAN;
 8000ea8:	4b4e      	ldr	r3, [pc, #312]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000eaa:	2220      	movs	r2, #32
 8000eac:	601a      	str	r2, [r3, #0]
				turn_on_led_PED(GREEN);
 8000eae:	200c      	movs	r0, #12
 8000eb0:	f7ff ff6e 	bl	8000d90 <turn_on_led_PED>
			}
		}

		if(mode != NORMAL_MODE){
 8000eb4:	4b51      	ldr	r3, [pc, #324]	; (8000ffc <fsm_pedestrian_run+0x1c0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	f000 8089 	beq.w	8000fd0 <fsm_pedestrian_run+0x194>
			state_of_pedestrian = YELLOW_PEDESTRIAN;
 8000ebe:	4b49      	ldr	r3, [pc, #292]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000ec0:	2221      	movs	r2, #33	; 0x21
 8000ec2:	601a      	str	r2, [r3, #0]
			turn_on_led_PED(YELLOW);
 8000ec4:	200b      	movs	r0, #11
 8000ec6:	f7ff ff63 	bl	8000d90 <turn_on_led_PED>
		}

	break;
 8000eca:	e081      	b.n	8000fd0 <fsm_pedestrian_run+0x194>
	case RED_PEDESTRIAN:

		if(is_pressed( BUTTON_0 )){
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff f93d 	bl	800014c <is_pressed>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d005      	beq.n	8000ee4 <fsm_pedestrian_run+0xa8>
			set_timer(TIMER_PEDESTRIAN ,cycle_of_pedestrian);
 8000ed8:	4b46      	ldr	r3, [pc, #280]	; (8000ff4 <fsm_pedestrian_run+0x1b8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	2007      	movs	r0, #7
 8000ee0:	f000 f966 	bl	80011b0 <set_timer>
		}


		if(is_timer_timeout( TIMER_PEDESTRIAN )){
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	f000 f9a9 	bl	800123c <is_timer_timeout>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <fsm_pedestrian_run+0xbe>
			turn_off_led_PED();
 8000ef0:	f7ff ff90 	bl	8000e14 <turn_off_led_PED>
			state_of_pedestrian = OFF_PEDESTRIAN;
 8000ef4:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000ef6:	221e      	movs	r2, #30
 8000ef8:	601a      	str	r2, [r3, #0]
		}


		if(state_led_traffic_1 == RED){
 8000efa:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <fsm_pedestrian_run+0x1bc>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b0a      	cmp	r3, #10
 8000f00:	d105      	bne.n	8000f0e <fsm_pedestrian_run+0xd2>
			state_of_pedestrian = GREEN_PEDESTRIAN;
 8000f02:	4b38      	ldr	r3, [pc, #224]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000f04:	2220      	movs	r2, #32
 8000f06:	601a      	str	r2, [r3, #0]
			turn_on_led_PED(GREEN);
 8000f08:	200c      	movs	r0, #12
 8000f0a:	f7ff ff41 	bl	8000d90 <turn_on_led_PED>
		}

		if(mode != NORMAL_MODE){
 8000f0e:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <fsm_pedestrian_run+0x1c0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d05e      	beq.n	8000fd4 <fsm_pedestrian_run+0x198>
			clear_timer( TIMER_PEDESTRIAN );
 8000f16:	2007      	movs	r0, #7
 8000f18:	f000 f964 	bl	80011e4 <clear_timer>
			turn_on_led_PED(YELLOW);
 8000f1c:	200b      	movs	r0, #11
 8000f1e:	f7ff ff37 	bl	8000d90 <turn_on_led_PED>
			state_of_pedestrian = YELLOW_PEDESTRIAN;
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000f24:	2221      	movs	r2, #33	; 0x21
 8000f26:	601a      	str	r2, [r3, #0]
		}


	break;
 8000f28:	e054      	b.n	8000fd4 <fsm_pedestrian_run+0x198>
	case GREEN_PEDESTRIAN:


		if(is_pressed( BUTTON_0 )){
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff f90e 	bl	800014c <is_pressed>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <fsm_pedestrian_run+0x106>
			set_timer(TIMER_PEDESTRIAN ,cycle_of_pedestrian);
 8000f36:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <fsm_pedestrian_run+0x1b8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2007      	movs	r0, #7
 8000f3e:	f000 f937 	bl	80011b0 <set_timer>
		}
// bat loa khi chi con 1 khoang thoi gian cuoi
		if(get_time_of_counter(TIMER_LED_TRAFFIC_1) <= safe_time && state_led_traffic_1 == RED){
 8000f42:	2004      	movs	r0, #4
 8000f44:	f000 f966 	bl	8001214 <get_time_of_counter>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <fsm_pedestrian_run+0x1c4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dc09      	bgt.n	8000f66 <fsm_pedestrian_run+0x12a>
 8000f52:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <fsm_pedestrian_run+0x1bc>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b0a      	cmp	r3, #10
 8000f58:	d105      	bne.n	8000f66 <fsm_pedestrian_run+0x12a>
			if(buzzer_flag == 0) turn_on_buzzer();
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <fsm_pedestrian_run+0x1c8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <fsm_pedestrian_run+0x12a>
 8000f62:	f7ff fee3 	bl	8000d2c <turn_on_buzzer>
		}

		if(is_timer_timeout( TIMER_PEDESTRIAN )){
 8000f66:	2007      	movs	r0, #7
 8000f68:	f000 f968 	bl	800123c <is_timer_timeout>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <fsm_pedestrian_run+0x144>
			turn_off_buzzer();
 8000f72:	f7ff fef7 	bl	8000d64 <turn_off_buzzer>
			turn_off_led_PED();
 8000f76:	f7ff ff4d 	bl	8000e14 <turn_off_led_PED>
			state_of_pedestrian = OFF_PEDESTRIAN;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000f7c:	221e      	movs	r2, #30
 8000f7e:	601a      	str	r2, [r3, #0]
		}

		if(state_led_traffic_1 != RED){
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <fsm_pedestrian_run+0x1bc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b0a      	cmp	r3, #10
 8000f86:	d007      	beq.n	8000f98 <fsm_pedestrian_run+0x15c>
			turn_off_buzzer();
 8000f88:	f7ff feec 	bl	8000d64 <turn_off_buzzer>
			state_of_pedestrian = RED_PEDESTRIAN;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000f8e:	221f      	movs	r2, #31
 8000f90:	601a      	str	r2, [r3, #0]
			turn_on_led_PED(RED);
 8000f92:	200a      	movs	r0, #10
 8000f94:	f7ff fefc 	bl	8000d90 <turn_on_led_PED>
		}

		if(mode != NORMAL_MODE){
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <fsm_pedestrian_run+0x1c0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d01b      	beq.n	8000fd8 <fsm_pedestrian_run+0x19c>
			turn_off_buzzer();
 8000fa0:	f7ff fee0 	bl	8000d64 <turn_off_buzzer>
			clear_timer( TIMER_PEDESTRIAN );
 8000fa4:	2007      	movs	r0, #7
 8000fa6:	f000 f91d 	bl	80011e4 <clear_timer>
			turn_on_led_PED(YELLOW);
 8000faa:	200b      	movs	r0, #11
 8000fac:	f7ff fef0 	bl	8000d90 <turn_on_led_PED>
			state_of_pedestrian = YELLOW_PEDESTRIAN;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000fb2:	2221      	movs	r2, #33	; 0x21
 8000fb4:	601a      	str	r2, [r3, #0]
		}
	break;
 8000fb6:	e00f      	b.n	8000fd8 <fsm_pedestrian_run+0x19c>

	case YELLOW_PEDESTRIAN:
		if(mode == NORMAL_MODE){
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <fsm_pedestrian_run+0x1c0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d10d      	bne.n	8000fdc <fsm_pedestrian_run+0x1a0>
			turn_off_led_PED();
 8000fc0:	f7ff ff28 	bl	8000e14 <turn_off_led_PED>
			state_of_pedestrian = OFF_PEDESTRIAN;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <fsm_pedestrian_run+0x1a8>)
 8000fc6:	221e      	movs	r2, #30
 8000fc8:	601a      	str	r2, [r3, #0]
		}
	break;
 8000fca:	e007      	b.n	8000fdc <fsm_pedestrian_run+0x1a0>
	default:

	break;
 8000fcc:	bf00      	nop
 8000fce:	e006      	b.n	8000fde <fsm_pedestrian_run+0x1a2>
	break;
 8000fd0:	bf00      	nop
 8000fd2:	e004      	b.n	8000fde <fsm_pedestrian_run+0x1a2>
	break;
 8000fd4:	bf00      	nop
 8000fd6:	e002      	b.n	8000fde <fsm_pedestrian_run+0x1a2>
	break;
 8000fd8:	bf00      	nop
 8000fda:	e000      	b.n	8000fde <fsm_pedestrian_run+0x1a2>
	break;
 8000fdc:	bf00      	nop
	}


}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000068 	.word	0x20000068
 8000fe8:	20000058 	.word	0x20000058
 8000fec:	2000005c 	.word	0x2000005c
 8000ff0:	20000060 	.word	0x20000060
 8000ff4:	2000006c 	.word	0x2000006c
 8000ff8:	20000050 	.word	0x20000050
 8000ffc:	200000c0 	.word	0x200000c0
 8001000:	20000070 	.word	0x20000070
 8001004:	200000d8 	.word	0x200000d8

08001008 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_MspInit+0x5c>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_MspInit+0x5c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_MspInit+0x5c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_MspInit+0x5c>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_MspInit+0x5c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_MspInit+0x5c>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_MspInit+0x60>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_MspInit+0x60>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000

0800106c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800107c:	d114      	bne.n	80010a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_TIM_Base_MspInit+0x68>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_TIM_Base_MspInit+0x68>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_TIM_Base_MspInit+0x68>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	201c      	movs	r0, #28
 800109c:	f000 fb4d 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a0:	201c      	movs	r0, #28
 80010a2:	f000 fb66 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010a6:	e010      	b.n	80010ca <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_TIM_Base_MspInit+0x6c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d10b      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_TIM_Base_MspInit+0x68>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_TIM_Base_MspInit+0x68>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_TIM_Base_MspInit+0x68>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40000400 	.word	0x40000400

080010dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_TIM_MspPostInit+0x58>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d117      	bne.n	800112c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_TIM_MspPostInit+0x5c>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_TIM_MspPostInit+0x5c>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_TIM_MspPostInit+0x5c>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001114:	2340      	movs	r3, #64	; 0x40
 8001116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2302      	movs	r3, #2
 800111e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_TIM_MspPostInit+0x60>)
 8001128:	f000 fb3e 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40000400 	.word	0x40000400
 8001138:	40021000 	.word	0x40021000
 800113c:	40010800 	.word	0x40010800

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <NMI_Handler+0x4>

08001146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <MemManage_Handler+0x4>

08001152 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <UsageFault_Handler+0x4>

0800115e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001186:	f000 f9e5 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <TIM2_IRQHandler+0x10>)
 8001196:	f001 fa3f 	bl	8002618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001a4 	.word	0x200001a4

080011a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <set_timer>:
#include "timer.h"

int timer_counter[NUMBER_OF_TIMER] = {0};
int timer_flag[NUMBER_OF_TIMER] = {0};

void set_timer(int index, int duration){
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <set_timer+0x2c>)
 80011be:	fb82 1203 	smull	r1, r2, r2, r3
 80011c2:	1092      	asrs	r2, r2, #2
 80011c4:	17db      	asrs	r3, r3, #31
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	4905      	ldr	r1, [pc, #20]	; (80011e0 <set_timer+0x30>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	66666667 	.word	0x66666667
 80011e0:	200000e0 	.word	0x200000e0

080011e4 <clear_timer>:
void clear_timer(int index){
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <clear_timer+0x28>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2100      	movs	r1, #0
 80011f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <clear_timer+0x2c>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2100      	movs	r1, #0
 80011fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	200000e0 	.word	0x200000e0
 8001210:	2000011c 	.word	0x2000011c

08001214 <get_time_of_counter>:


int get_time_of_counter(int index){
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	return timer_counter[index]*TIME_CYCLE;
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <get_time_of_counter+0x24>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200000e0 	.word	0x200000e0

0800123c <is_timer_timeout>:


int is_timer_timeout(int index){
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]){
 8001244:	4a09      	ldr	r2, [pc, #36]	; (800126c <is_timer_timeout+0x30>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <is_timer_timeout+0x22>
		timer_flag[index] = 0;
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <is_timer_timeout+0x30>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2100      	movs	r1, #0
 8001256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <is_timer_timeout+0x24>
	}
	return 0;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	2000011c 	.word	0x2000011c

08001270 <timer_run>:
void timer_run(){
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	e01c      	b.n	80012b6 <timer_run+0x46>
		if(timer_counter[i] > 0){
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <timer_run+0x58>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	2b00      	cmp	r3, #0
 8001286:	dd13      	ble.n	80012b0 <timer_run+0x40>
			timer_counter[i]--;
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <timer_run+0x58>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	490d      	ldr	r1, [pc, #52]	; (80012c8 <timer_run+0x58>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <timer_run+0x58>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	dc04      	bgt.n	80012b0 <timer_run+0x40>
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <timer_run+0x5c>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2101      	movs	r1, #1
 80012ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3301      	adds	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0e      	cmp	r3, #14
 80012ba:	dddf      	ble.n	800127c <timer_run+0xc>
		}
	}
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	200000e0 	.word	0x200000e0
 80012cc:	2000011c 	.word	0x2000011c

080012d0 <turn_on_traffic_led_1>:
#include "traffic_led.h"

int is_led_ON = 0;


void turn_on_traffic_led_1(int state){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	switch(state){
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b0c      	cmp	r3, #12
 80012dc:	d021      	beq.n	8001322 <turn_on_traffic_led_1+0x52>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	dc2a      	bgt.n	800133a <turn_on_traffic_led_1+0x6a>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b0a      	cmp	r3, #10
 80012e8:	d003      	beq.n	80012f2 <turn_on_traffic_led_1+0x22>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0b      	cmp	r3, #11
 80012ee:	d00c      	beq.n	800130a <turn_on_traffic_led_1+0x3a>
		case GREEN:
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
		break;
		default:
		break;
 80012f0:	e023      	b.n	800133a <turn_on_traffic_led_1+0x6a>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f8:	4812      	ldr	r0, [pc, #72]	; (8001344 <turn_on_traffic_led_1+0x74>)
 80012fa:	f000 fbf0 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2108      	movs	r1, #8
 8001302:	4811      	ldr	r0, [pc, #68]	; (8001348 <turn_on_traffic_led_1+0x78>)
 8001304:	f000 fbeb 	bl	8001ade <HAL_GPIO_WritePin>
		break;
 8001308:	e018      	b.n	800133c <turn_on_traffic_led_1+0x6c>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <turn_on_traffic_led_1+0x74>)
 8001312:	f000 fbe4 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8001316:	2201      	movs	r2, #1
 8001318:	2108      	movs	r1, #8
 800131a:	480b      	ldr	r0, [pc, #44]	; (8001348 <turn_on_traffic_led_1+0x78>)
 800131c:	f000 fbdf 	bl	8001ade <HAL_GPIO_WritePin>
		break;
 8001320:	e00c      	b.n	800133c <turn_on_traffic_led_1+0x6c>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <turn_on_traffic_led_1+0x74>)
 800132a:	f000 fbd8 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2108      	movs	r1, #8
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <turn_on_traffic_led_1+0x78>)
 8001334:	f000 fbd3 	bl	8001ade <HAL_GPIO_WritePin>
		break;
 8001338:	e000      	b.n	800133c <turn_on_traffic_led_1+0x6c>
		break;
 800133a:	bf00      	nop
	}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00

0800134c <turn_off_traffic_led_1>:

void turn_off_traffic_led_1(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <turn_off_traffic_led_1+0x20>)
 8001358:	f000 fbc1 	bl	8001ade <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2108      	movs	r1, #8
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <turn_off_traffic_led_1+0x24>)
 8001362:	f000 fbbc 	bl	8001ade <HAL_GPIO_WritePin>
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40010800 	.word	0x40010800
 8001370:	40010c00 	.word	0x40010c00

08001374 <turn_on_traffic_led_2>:

void turn_on_traffic_led_2(int state){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b0a      	subs	r3, #10
 8001380:	2b04      	cmp	r3, #4
 8001382:	d839      	bhi.n	80013f8 <turn_on_traffic_led_2+0x84>
 8001384:	a201      	add	r2, pc, #4	; (adr r2, 800138c <turn_on_traffic_led_2+0x18>)
 8001386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138a:	bf00      	nop
 800138c:	080013a1 	.word	0x080013a1
 8001390:	080013b7 	.word	0x080013b7
 8001394:	080013cd 	.word	0x080013cd
 8001398:	080013f9 	.word	0x080013f9
 800139c:	080013e3 	.word	0x080013e3
	switch(state){
		case RED:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2120      	movs	r1, #32
 80013a4:	4817      	ldr	r0, [pc, #92]	; (8001404 <turn_on_traffic_led_2+0x90>)
 80013a6:	f000 fb9a 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2110      	movs	r1, #16
 80013ae:	4815      	ldr	r0, [pc, #84]	; (8001404 <turn_on_traffic_led_2+0x90>)
 80013b0:	f000 fb95 	bl	8001ade <HAL_GPIO_WritePin>
		break;
 80013b4:	e021      	b.n	80013fa <turn_on_traffic_led_2+0x86>
		case YELLOW:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2120      	movs	r1, #32
 80013ba:	4812      	ldr	r0, [pc, #72]	; (8001404 <turn_on_traffic_led_2+0x90>)
 80013bc:	f000 fb8f 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2110      	movs	r1, #16
 80013c4:	480f      	ldr	r0, [pc, #60]	; (8001404 <turn_on_traffic_led_2+0x90>)
 80013c6:	f000 fb8a 	bl	8001ade <HAL_GPIO_WritePin>
		break;
 80013ca:	e016      	b.n	80013fa <turn_on_traffic_led_2+0x86>
		case GREEN:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2120      	movs	r1, #32
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <turn_on_traffic_led_2+0x90>)
 80013d2:	f000 fb84 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2110      	movs	r1, #16
 80013da:	480a      	ldr	r0, [pc, #40]	; (8001404 <turn_on_traffic_led_2+0x90>)
 80013dc:	f000 fb7f 	bl	8001ade <HAL_GPIO_WritePin>
		break;
 80013e0:	e00b      	b.n	80013fa <turn_on_traffic_led_2+0x86>
		case OFF:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2120      	movs	r1, #32
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <turn_on_traffic_led_2+0x90>)
 80013e8:	f000 fb79 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2110      	movs	r1, #16
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <turn_on_traffic_led_2+0x90>)
 80013f2:	f000 fb74 	bl	8001ade <HAL_GPIO_WritePin>
		break;
 80013f6:	e000      	b.n	80013fa <turn_on_traffic_led_2+0x86>
		default:
		break;
 80013f8:	bf00      	nop
	}
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40010c00 	.word	0x40010c00

08001408 <turn_off_traffic_led_2>:
void turn_off_traffic_led_2(){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2120      	movs	r1, #32
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <turn_off_traffic_led_2+0x1c>)
 8001412:	f000 fb64 	bl	8001ade <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2110      	movs	r1, #16
 800141a:	4802      	ldr	r0, [pc, #8]	; (8001424 <turn_off_traffic_led_2+0x1c>)
 800141c:	f000 fb5f 	bl	8001ade <HAL_GPIO_WritePin>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40010c00 	.word	0x40010c00

08001428 <blinking_led_traffic>:

void blinking_led_traffic(int state){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if(is_timer_timeout( TIMER_BLINKING_LED )){
 8001430:	2006      	movs	r0, #6
 8001432:	f7ff ff03 	bl	800123c <is_timer_timeout>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d019      	beq.n	8001470 <blinking_led_traffic+0x48>
		if(is_led_ON){
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <blinking_led_traffic+0x50>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d009      	beq.n	8001458 <blinking_led_traffic+0x30>
			turn_on_traffic_led_1(state);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff43 	bl	80012d0 <turn_on_traffic_led_1>
			turn_on_traffic_led_2(state);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff92 	bl	8001374 <turn_on_traffic_led_2>
			is_led_ON= 0;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <blinking_led_traffic+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e006      	b.n	8001466 <blinking_led_traffic+0x3e>
		}
		else{
			turn_off_traffic_led_1();
 8001458:	f7ff ff78 	bl	800134c <turn_off_traffic_led_1>
			turn_off_traffic_led_2();
 800145c:	f7ff ffd4 	bl	8001408 <turn_off_traffic_led_2>
			is_led_ON = 1;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <blinking_led_traffic+0x50>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]
		}
		set_timer(TIMER_BLINKING_LED, 500);
 8001466:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800146a:	2006      	movs	r0, #6
 800146c:	f7ff fea0 	bl	80011b0 <set_timer>
	}
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000158 	.word	0x20000158

0800147c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a2:	f7ff fe7f 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f001 fe79 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff fa45 	bl	8000938 <main>
  bx lr
 80014ae:	4770      	bx	lr
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80014b8:	08003234 	.word	0x08003234
  ldr r2, =_sbss
 80014bc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80014c0:	200001f0 	.word	0x200001f0

080014c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x28>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f923 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fd90 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f93b 	bl	800178e <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f903 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000078 	.word	0x20000078
 800154c:	20000080 	.word	0x20000080
 8001550:	2000007c 	.word	0x2000007c

08001554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x1c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_IncTick+0x20>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_IncTick+0x20>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	20000080 	.word	0x20000080
 8001574:	200001ec 	.word	0x200001ec

08001578 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b02      	ldr	r3, [pc, #8]	; (8001588 <HAL_GetTick+0x10>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	200001ec 	.word	0x200001ec

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4906      	ldr	r1, [pc, #24]	; (8001624 <__NVIC_EnableIRQ+0x34>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff90 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff2d 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff42 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff90 	bl	800167c <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5f 	bl	8001628 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff35 	bl	80015f0 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	; 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e169      	b.n	8001a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017bc:	2201      	movs	r2, #1
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8158 	bne.w	8001a8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a9a      	ldr	r2, [pc, #616]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d05e      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017e4:	4a98      	ldr	r2, [pc, #608]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d875      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017ea:	4a98      	ldr	r2, [pc, #608]	; (8001a4c <HAL_GPIO_Init+0x2a4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d058      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017f0:	4a96      	ldr	r2, [pc, #600]	; (8001a4c <HAL_GPIO_Init+0x2a4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d86f      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017f6:	4a96      	ldr	r2, [pc, #600]	; (8001a50 <HAL_GPIO_Init+0x2a8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d052      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017fc:	4a94      	ldr	r2, [pc, #592]	; (8001a50 <HAL_GPIO_Init+0x2a8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d869      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001802:	4a94      	ldr	r2, [pc, #592]	; (8001a54 <HAL_GPIO_Init+0x2ac>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d04c      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001808:	4a92      	ldr	r2, [pc, #584]	; (8001a54 <HAL_GPIO_Init+0x2ac>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d863      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800180e:	4a92      	ldr	r2, [pc, #584]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d046      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001814:	4a90      	ldr	r2, [pc, #576]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d85d      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d82a      	bhi.n	8001874 <HAL_GPIO_Init+0xcc>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d859      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001822:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <HAL_GPIO_Init+0x80>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	080018a3 	.word	0x080018a3
 800182c:	0800187d 	.word	0x0800187d
 8001830:	0800188f 	.word	0x0800188f
 8001834:	080018d1 	.word	0x080018d1
 8001838:	080018d7 	.word	0x080018d7
 800183c:	080018d7 	.word	0x080018d7
 8001840:	080018d7 	.word	0x080018d7
 8001844:	080018d7 	.word	0x080018d7
 8001848:	080018d7 	.word	0x080018d7
 800184c:	080018d7 	.word	0x080018d7
 8001850:	080018d7 	.word	0x080018d7
 8001854:	080018d7 	.word	0x080018d7
 8001858:	080018d7 	.word	0x080018d7
 800185c:	080018d7 	.word	0x080018d7
 8001860:	080018d7 	.word	0x080018d7
 8001864:	080018d7 	.word	0x080018d7
 8001868:	080018d7 	.word	0x080018d7
 800186c:	08001885 	.word	0x08001885
 8001870:	08001899 	.word	0x08001899
 8001874:	4a79      	ldr	r2, [pc, #484]	; (8001a5c <HAL_GPIO_Init+0x2b4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187a:	e02c      	b.n	80018d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e029      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	3304      	adds	r3, #4
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e024      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	3308      	adds	r3, #8
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e01f      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	330c      	adds	r3, #12
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e01a      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018aa:	2304      	movs	r3, #4
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e013      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	611a      	str	r2, [r3, #16]
          break;
 80018c2:	e009      	b.n	80018d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	615a      	str	r2, [r3, #20]
          break;
 80018ce:	e003      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          break;
 80018d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d801      	bhi.n	80018e2 <HAL_GPIO_Init+0x13a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	e001      	b.n	80018e6 <HAL_GPIO_Init+0x13e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3304      	adds	r3, #4
 80018e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d802      	bhi.n	80018f4 <HAL_GPIO_Init+0x14c>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_Init+0x152>
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	3b08      	subs	r3, #8
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	210f      	movs	r1, #15
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80b1 	beq.w	8001a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001928:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a4c      	ldr	r2, [pc, #304]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001940:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_GPIO_Init+0x2bc>)
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a40      	ldr	r2, [pc, #256]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d013      	beq.n	8001994 <HAL_GPIO_Init+0x1ec>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3f      	ldr	r2, [pc, #252]	; (8001a6c <HAL_GPIO_Init+0x2c4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_GPIO_Init+0x1e8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <HAL_GPIO_Init+0x2c8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_GPIO_Init+0x1e4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3d      	ldr	r2, [pc, #244]	; (8001a74 <HAL_GPIO_Init+0x2cc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_GPIO_Init+0x1e0>
 8001984:	2303      	movs	r3, #3
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001988:	2304      	movs	r3, #4
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001994:	2300      	movs	r3, #0
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019a6:	492f      	ldr	r1, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x2bc>)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	492c      	ldr	r1, [pc, #176]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4928      	ldr	r1, [pc, #160]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019d8:	4013      	ands	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4922      	ldr	r1, [pc, #136]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	491e      	ldr	r1, [pc, #120]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4918      	ldr	r1, [pc, #96]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4914      	ldr	r1, [pc, #80]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d021      	beq.n	8001a7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
 8001a44:	e021      	b.n	8001a8a <HAL_GPIO_Init+0x2e2>
 8001a46:	bf00      	nop
 8001a48:	10320000 	.word	0x10320000
 8001a4c:	10310000 	.word	0x10310000
 8001a50:	10220000 	.word	0x10220000
 8001a54:	10210000 	.word	0x10210000
 8001a58:	10120000 	.word	0x10120000
 8001a5c:	10110000 	.word	0x10110000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	40010c00 	.word	0x40010c00
 8001a70:	40011000 	.word	0x40011000
 8001a74:	40011400 	.word	0x40011400
 8001a78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4909      	ldr	r1, [pc, #36]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f47f ae8e 	bne.w	80017bc <HAL_GPIO_Init+0x14>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	372c      	adds	r7, #44	; 0x2c
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e001      	b.n	8001ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	807b      	strh	r3, [r7, #2]
 8001aea:	4613      	mov	r3, r2
 8001aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aee:	787b      	ldrb	r3, [r7, #1]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af4:	887a      	ldrh	r2, [r7, #2]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001afa:	e003      	b.n	8001b04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	041a      	lsls	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	611a      	str	r2, [r3, #16]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e26c      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8087 	beq.w	8001c3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b30:	4b92      	ldr	r3, [pc, #584]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d00c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b3c:	4b8f      	ldr	r3, [pc, #572]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d112      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5e>
 8001b48:	4b8c      	ldr	r3, [pc, #560]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d10b      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b56:	4b89      	ldr	r3, [pc, #548]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d06c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x12c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d168      	bne.n	8001c3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e246      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x76>
 8001b78:	4b80      	ldr	r3, [pc, #512]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a7f      	ldr	r2, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e02e      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x98>
 8001b8e:	4b7b      	ldr	r3, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7a      	ldr	r2, [pc, #488]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a77      	ldr	r2, [pc, #476]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e01d      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0xbc>
 8001bb2:	4b72      	ldr	r3, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a71      	ldr	r2, [pc, #452]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6e      	ldr	r2, [pc, #440]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001bcc:	4b6b      	ldr	r3, [pc, #428]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a6a      	ldr	r2, [pc, #424]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a67      	ldr	r2, [pc, #412]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d013      	beq.n	8001c14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fcc4 	bl	8001578 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fcc0 	bl	8001578 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e1fa      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xe4>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fcb0 	bl	8001578 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fcac 	bl	8001578 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1e6      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x10c>
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d063      	beq.n	8001d12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4a:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c56:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d11c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x18c>
 8001c62:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d116      	bne.n	8001c9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_RCC_OscConfig+0x176>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e1ba      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4939      	ldr	r1, [pc, #228]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	e03a      	b.n	8001d12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d020      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fc65 	bl	8001578 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fc61 	bl	8001578 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e19b      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4927      	ldr	r1, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
 8001ce4:	e015      	b.n	8001d12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fc44 	bl	8001578 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fc40 	bl	8001578 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e17a      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d03a      	beq.n	8001d94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d019      	beq.n	8001d5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fc24 	bl	8001578 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff fc20 	bl	8001578 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e15a      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f000 faa6 	bl	80022a4 <RCC_Delay>
 8001d58:	e01c      	b.n	8001d94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7ff fc0a 	bl	8001578 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d66:	e00f      	b.n	8001d88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fc06 	bl	8001578 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d908      	bls.n	8001d88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e140      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	42420000 	.word	0x42420000
 8001d84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b9e      	ldr	r3, [pc, #632]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e9      	bne.n	8001d68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a6 	beq.w	8001eee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b97      	ldr	r3, [pc, #604]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10d      	bne.n	8001dce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b94      	ldr	r3, [pc, #592]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a93      	ldr	r2, [pc, #588]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b91      	ldr	r3, [pc, #580]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	4b8e      	ldr	r3, [pc, #568]	; (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d118      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dda:	4b8b      	ldr	r3, [pc, #556]	; (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a8a      	ldr	r2, [pc, #552]	; (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fbc7 	bl	8001578 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dee:	f7ff fbc3 	bl	8001578 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b64      	cmp	r3, #100	; 0x64
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0fd      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	4b81      	ldr	r3, [pc, #516]	; (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x312>
 8001e14:	4b7b      	ldr	r3, [pc, #492]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a7a      	ldr	r2, [pc, #488]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6213      	str	r3, [r2, #32]
 8001e20:	e02d      	b.n	8001e7e <HAL_RCC_OscConfig+0x36e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x334>
 8001e2a:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	4b73      	ldr	r3, [pc, #460]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a72      	ldr	r2, [pc, #456]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	e01c      	b.n	8001e7e <HAL_RCC_OscConfig+0x36e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	d10c      	bne.n	8001e66 <HAL_RCC_OscConfig+0x356>
 8001e4c:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a6c      	ldr	r2, [pc, #432]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a69      	ldr	r2, [pc, #420]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6213      	str	r3, [r2, #32]
 8001e64:	e00b      	b.n	8001e7e <HAL_RCC_OscConfig+0x36e>
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a66      	ldr	r2, [pc, #408]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	4b64      	ldr	r3, [pc, #400]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a63      	ldr	r2, [pc, #396]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	f023 0304 	bic.w	r3, r3, #4
 8001e7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d015      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7ff fb77 	bl	8001578 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7ff fb73 	bl	8001578 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0ab      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea4:	4b57      	ldr	r3, [pc, #348]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ee      	beq.n	8001e8e <HAL_RCC_OscConfig+0x37e>
 8001eb0:	e014      	b.n	8001edc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fb61 	bl	8001578 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff fb5d 	bl	8001578 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e095      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ee      	bne.n	8001eba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d105      	bne.n	8001eee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee2:	4b48      	ldr	r3, [pc, #288]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a47      	ldr	r2, [pc, #284]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8081 	beq.w	8001ffa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef8:	4b42      	ldr	r3, [pc, #264]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d061      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d146      	bne.n	8001f9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0c:	4b3f      	ldr	r3, [pc, #252]	; (800200c <HAL_RCC_OscConfig+0x4fc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff fb31 	bl	8001578 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff fb2d 	bl	8001578 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e067      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f40:	d108      	bne.n	8001f54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	492d      	ldr	r1, [pc, #180]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a19      	ldr	r1, [r3, #32]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	430b      	orrs	r3, r1
 8001f66:	4927      	ldr	r1, [pc, #156]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x4fc>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7ff fb01 	bl	8001578 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7ff fafd 	bl	8001578 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e037      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x46a>
 8001f98:	e02f      	b.n	8001ffa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <HAL_RCC_OscConfig+0x4fc>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff faea 	bl	8001578 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff fae6 	bl	8001578 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e020      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x498>
 8001fc6:	e018      	b.n	8001ffa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e013      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	42420060 	.word	0x42420060

08002010 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0d0      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d910      	bls.n	8002054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b67      	ldr	r3, [pc, #412]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4965      	ldr	r1, [pc, #404]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0b8      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d020      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800206c:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002076:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002084:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a52      	ldr	r2, [pc, #328]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800208e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002090:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	494d      	ldr	r1, [pc, #308]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d040      	beq.n	8002130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d115      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e07f      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e073      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e06b      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ee:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4936      	ldr	r1, [pc, #216]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002100:	f7ff fa3a 	bl	8001578 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7ff fa36 	bl	8001578 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e053      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 020c 	and.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	429a      	cmp	r2, r3
 800212e:	d1eb      	bne.n	8002108 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d210      	bcs.n	8002160 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 0207 	bic.w	r2, r3, #7
 8002146:	4922      	ldr	r1, [pc, #136]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e032      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4916      	ldr	r1, [pc, #88]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	490e      	ldr	r1, [pc, #56]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800219e:	f000 f821 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	490a      	ldr	r1, [pc, #40]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	5ccb      	ldrb	r3, [r1, r3]
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1cc>)
 80021b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x1d0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f998 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40022000 	.word	0x40022000
 80021d4:	40021000 	.word	0x40021000
 80021d8:	0800321c 	.word	0x0800321c
 80021dc:	20000078 	.word	0x20000078
 80021e0:	2000007c 	.word	0x2000007c

080021e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e4:	b490      	push	{r4, r7}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ea:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021ec:	1d3c      	adds	r4, r7, #4
 80021ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021f4:	f240 2301 	movw	r3, #513	; 0x201
 80021f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b04      	cmp	r3, #4
 800221c:	d002      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x40>
 800221e:	2b08      	cmp	r3, #8
 8002220:	d003      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0x46>
 8002222:	e02d      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002226:	623b      	str	r3, [r7, #32]
      break;
 8002228:	e02d      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	0c9b      	lsrs	r3, r3, #18
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002236:	4413      	add	r3, r2
 8002238:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800223c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0c5b      	lsrs	r3, r3, #17
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002256:	4413      	add	r3, r2
 8002258:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800225c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002262:	fb02 f203 	mul.w	r2, r2, r3
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	e004      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	623b      	str	r3, [r7, #32]
      break;
 800227e:	e002      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002282:	623b      	str	r3, [r7, #32]
      break;
 8002284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002286:	6a3b      	ldr	r3, [r7, #32]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bc90      	pop	{r4, r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	0800320c 	.word	0x0800320c
 8002298:	40021000 	.word	0x40021000
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	003d0900 	.word	0x003d0900

080022a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <RCC_Delay+0x34>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <RCC_Delay+0x38>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0a5b      	lsrs	r3, r3, #9
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c0:	bf00      	nop
  }
  while (Delay --);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	60fa      	str	r2, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <RCC_Delay+0x1c>
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	20000078 	.word	0x20000078
 80022dc:	10624dd3 	.word	0x10624dd3

080022e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e041      	b.n	8002376 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe feb0 	bl	800106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f000 fc28 	bl	8002b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d001      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e03a      	b.n	800240e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a18      	ldr	r2, [pc, #96]	; (8002418 <HAL_TIM_Base_Start_IT+0x98>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x58>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c2:	d009      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x58>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <HAL_TIM_Base_Start_IT+0x9c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x58>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <HAL_TIM_Base_Start_IT+0xa0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d111      	bne.n	80023fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d010      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fa:	e007      	b.n	800240c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40000400 	.word	0x40000400
 8002420:	40000800 	.word	0x40000800

08002424 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e041      	b.n	80024ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f839 	bl	80024c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f000 fb86 	bl	8002b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_TIM_PWM_Start+0x24>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e022      	b.n	800253e <HAL_TIM_PWM_Start+0x6a>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d109      	bne.n	8002512 <HAL_TIM_PWM_Start+0x3e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	e015      	b.n	800253e <HAL_TIM_PWM_Start+0x6a>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d109      	bne.n	800252c <HAL_TIM_PWM_Start+0x58>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e008      	b.n	800253e <HAL_TIM_PWM_Start+0x6a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e05e      	b.n	8002604 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d104      	bne.n	8002556 <HAL_TIM_PWM_Start+0x82>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002554:	e013      	b.n	800257e <HAL_TIM_PWM_Start+0xaa>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d104      	bne.n	8002566 <HAL_TIM_PWM_Start+0x92>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002564:	e00b      	b.n	800257e <HAL_TIM_PWM_Start+0xaa>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d104      	bne.n	8002576 <HAL_TIM_PWM_Start+0xa2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002574:	e003      	b.n	800257e <HAL_TIM_PWM_Start+0xaa>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2202      	movs	r2, #2
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fd74 	bl	8003074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1e      	ldr	r2, [pc, #120]	; (800260c <HAL_TIM_PWM_Start+0x138>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d107      	bne.n	80025a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_TIM_PWM_Start+0x138>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00e      	beq.n	80025ce <HAL_TIM_PWM_Start+0xfa>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b8:	d009      	beq.n	80025ce <HAL_TIM_PWM_Start+0xfa>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_TIM_PWM_Start+0x13c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_TIM_PWM_Start+0xfa>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_TIM_PWM_Start+0x140>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d111      	bne.n	80025f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b06      	cmp	r3, #6
 80025de:	d010      	beq.n	8002602 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	e007      	b.n	8002602 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40012c00 	.word	0x40012c00
 8002610:	40000400 	.word	0x40000400
 8002614:	40000800 	.word	0x40000800

08002618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b02      	cmp	r3, #2
 800262c:	d122      	bne.n	8002674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	d11b      	bne.n	8002674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0202 	mvn.w	r2, #2
 8002644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fa6f 	bl	8002b3e <HAL_TIM_IC_CaptureCallback>
 8002660:	e005      	b.n	800266e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa62 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fa71 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b04      	cmp	r3, #4
 8002680:	d122      	bne.n	80026c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b04      	cmp	r3, #4
 800268e:	d11b      	bne.n	80026c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0204 	mvn.w	r2, #4
 8002698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa45 	bl	8002b3e <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fa38 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa47 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d122      	bne.n	800271c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0208 	mvn.w	r2, #8
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2204      	movs	r2, #4
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa1b 	bl	8002b3e <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa0e 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fa1d 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b10      	cmp	r3, #16
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b10      	cmp	r3, #16
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0210 	mvn.w	r2, #16
 8002740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2208      	movs	r2, #8
 8002746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f9f1 	bl	8002b3e <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9e4 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f9f3 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10e      	bne.n	800279c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d107      	bne.n	800279c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0201 	mvn.w	r2, #1
 8002794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fa66 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	2b80      	cmp	r3, #128	; 0x80
 80027a8:	d10e      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b4:	2b80      	cmp	r3, #128	; 0x80
 80027b6:	d107      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fce1 	bl	800318a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d10e      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d107      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f9b7 	bl	8002b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b20      	cmp	r3, #32
 8002800:	d10e      	bne.n	8002820 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b20      	cmp	r3, #32
 800280e:	d107      	bne.n	8002820 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0220 	mvn.w	r2, #32
 8002818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fcac 	bl	8003178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800283e:	2302      	movs	r3, #2
 8002840:	e0ac      	b.n	800299c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0c      	cmp	r3, #12
 800284e:	f200 809f 	bhi.w	8002990 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	0800288d 	.word	0x0800288d
 800285c:	08002991 	.word	0x08002991
 8002860:	08002991 	.word	0x08002991
 8002864:	08002991 	.word	0x08002991
 8002868:	080028cd 	.word	0x080028cd
 800286c:	08002991 	.word	0x08002991
 8002870:	08002991 	.word	0x08002991
 8002874:	08002991 	.word	0x08002991
 8002878:	0800290f 	.word	0x0800290f
 800287c:	08002991 	.word	0x08002991
 8002880:	08002991 	.word	0x08002991
 8002884:	08002991 	.word	0x08002991
 8002888:	0800294f 	.word	0x0800294f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f9d0 	bl	8002c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0208 	orr.w	r2, r2, #8
 80028a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6999      	ldr	r1, [r3, #24]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	619a      	str	r2, [r3, #24]
      break;
 80028ca:	e062      	b.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fa16 	bl	8002d04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6999      	ldr	r1, [r3, #24]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	021a      	lsls	r2, r3, #8
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	619a      	str	r2, [r3, #24]
      break;
 800290c:	e041      	b.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fa5f 	bl	8002dd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0208 	orr.w	r2, r2, #8
 8002928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0204 	bic.w	r2, r2, #4
 8002938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69d9      	ldr	r1, [r3, #28]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	61da      	str	r2, [r3, #28]
      break;
 800294c:	e021      	b.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 faa9 	bl	8002eac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69d9      	ldr	r1, [r3, #28]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	021a      	lsls	r2, r3, #8
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	61da      	str	r2, [r3, #28]
      break;
 800298e:	e000      	b.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002990:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_TIM_ConfigClockSource+0x18>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0b3      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x180>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f4:	d03e      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0xd0>
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fa:	f200 8087 	bhi.w	8002b0c <HAL_TIM_ConfigClockSource+0x168>
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	f000 8085 	beq.w	8002b10 <HAL_TIM_ConfigClockSource+0x16c>
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0a:	d87f      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x168>
 8002a0c:	2b70      	cmp	r3, #112	; 0x70
 8002a0e:	d01a      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0xa2>
 8002a10:	2b70      	cmp	r3, #112	; 0x70
 8002a12:	d87b      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x168>
 8002a14:	2b60      	cmp	r3, #96	; 0x60
 8002a16:	d050      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x116>
 8002a18:	2b60      	cmp	r3, #96	; 0x60
 8002a1a:	d877      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x168>
 8002a1c:	2b50      	cmp	r3, #80	; 0x50
 8002a1e:	d03c      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0xf6>
 8002a20:	2b50      	cmp	r3, #80	; 0x50
 8002a22:	d873      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x168>
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d058      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x136>
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d86f      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x168>
 8002a2c:	2b30      	cmp	r3, #48	; 0x30
 8002a2e:	d064      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x156>
 8002a30:	2b30      	cmp	r3, #48	; 0x30
 8002a32:	d86b      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x168>
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d060      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x156>
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d867      	bhi.n	8002b0c <HAL_TIM_ConfigClockSource+0x168>
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d05c      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x156>
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d05a      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a44:	e062      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f000 faee 	bl	8003036 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	609a      	str	r2, [r3, #8]
      break;
 8002a72:	e04e      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f000 fad7 	bl	8003036 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a96:	609a      	str	r2, [r3, #8]
      break;
 8002a98:	e03b      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f000 fa4e 	bl	8002f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2150      	movs	r1, #80	; 0x50
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 faa5 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002ab8:	e02b      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6859      	ldr	r1, [r3, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f000 fa6c 	bl	8002fa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2160      	movs	r1, #96	; 0x60
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fa95 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002ad8:	e01b      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f000 fa2e 	bl	8002f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2140      	movs	r1, #64	; 0x40
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fa85 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002af8:	e00b      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f000 fa7c 	bl	8003002 <TIM_ITRx_SetConfig>
        break;
 8002b0a:	e002      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b0c:	bf00      	nop
 8002b0e:	e000      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <TIM_Base_SetConfig+0xb8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00b      	beq.n	8002ba4 <TIM_Base_SetConfig+0x30>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b92:	d007      	beq.n	8002ba4 <TIM_Base_SetConfig+0x30>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <TIM_Base_SetConfig+0xbc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d003      	beq.n	8002ba4 <TIM_Base_SetConfig+0x30>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a25      	ldr	r2, [pc, #148]	; (8002c34 <TIM_Base_SetConfig+0xc0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d108      	bne.n	8002bb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <TIM_Base_SetConfig+0xb8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_Base_SetConfig+0x62>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc4:	d007      	beq.n	8002bd6 <TIM_Base_SetConfig+0x62>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <TIM_Base_SetConfig+0xbc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_Base_SetConfig+0x62>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <TIM_Base_SetConfig+0xc0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d108      	bne.n	8002be8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a07      	ldr	r2, [pc, #28]	; (8002c2c <TIM_Base_SetConfig+0xb8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d103      	bne.n	8002c1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	615a      	str	r2, [r3, #20]
}
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800

08002c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f023 0201 	bic.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0303 	bic.w	r3, r3, #3
 8002c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f023 0302 	bic.w	r3, r3, #2
 8002c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <TIM_OC1_SetConfig+0xc8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10c      	bne.n	8002cae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f023 0308 	bic.w	r3, r3, #8
 8002c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <TIM_OC1_SetConfig+0xc8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d111      	bne.n	8002cda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	621a      	str	r2, [r3, #32]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40012c00 	.word	0x40012c00

08002d04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f023 0210 	bic.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0320 	bic.w	r3, r3, #32
 8002d4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <TIM_OC2_SetConfig+0xd0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d10d      	bne.n	8002d80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <TIM_OC2_SetConfig+0xd0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d113      	bne.n	8002db0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	40012c00 	.word	0x40012c00

08002dd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <TIM_OC3_SetConfig+0xd0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10d      	bne.n	8002e52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <TIM_OC3_SetConfig+0xd0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d113      	bne.n	8002e82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	621a      	str	r2, [r3, #32]
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40012c00 	.word	0x40012c00

08002eac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	031b      	lsls	r3, r3, #12
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <TIM_OC4_SetConfig+0x98>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d109      	bne.n	8002f20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40012c00 	.word	0x40012c00

08002f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	f023 0201 	bic.w	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f023 030a 	bic.w	r3, r3, #10
 8002f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	621a      	str	r2, [r3, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f023 0210 	bic.w	r2, r3, #16
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	031b      	lsls	r3, r3, #12
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	621a      	str	r2, [r3, #32]
}
 8002ff8:	bf00      	nop
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	f043 0307 	orr.w	r3, r3, #7
 8003024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003036:	b480      	push	{r7}
 8003038:	b087      	sub	sp, #28
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003050:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	021a      	lsls	r2, r3, #8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	431a      	orrs	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4313      	orrs	r3, r2
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	609a      	str	r2, [r3, #8]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2201      	movs	r2, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	43db      	mvns	r3, r3
 8003096:	401a      	ands	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e046      	b.n	8003162 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d009      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10c      	bne.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800313c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	4313      	orrs	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800

08003178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	2600      	movs	r6, #0
 80031a0:	4d0c      	ldr	r5, [pc, #48]	; (80031d4 <__libc_init_array+0x38>)
 80031a2:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a4:	1b64      	subs	r4, r4, r5
 80031a6:	10a4      	asrs	r4, r4, #2
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	f000 f822 	bl	80031f4 <_init>
 80031b0:	2600      	movs	r6, #0
 80031b2:	4d0a      	ldr	r5, [pc, #40]	; (80031dc <__libc_init_array+0x40>)
 80031b4:	4c0a      	ldr	r4, [pc, #40]	; (80031e0 <__libc_init_array+0x44>)
 80031b6:	1b64      	subs	r4, r4, r5
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c4:	4798      	blx	r3
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ce:	4798      	blx	r3
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	0800322c 	.word	0x0800322c
 80031d8:	0800322c 	.word	0x0800322c
 80031dc:	0800322c 	.word	0x0800322c
 80031e0:	08003230 	.word	0x08003230

080031e4 <memset>:
 80031e4:	4603      	mov	r3, r0
 80031e6:	4402      	add	r2, r0
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d100      	bne.n	80031ee <memset+0xa>
 80031ec:	4770      	bx	lr
 80031ee:	f803 1b01 	strb.w	r1, [r3], #1
 80031f2:	e7f9      	b.n	80031e8 <memset+0x4>

080031f4 <_init>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr

08003200 <_fini>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	bf00      	nop
 8003204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003206:	bc08      	pop	{r3}
 8003208:	469e      	mov	lr, r3
 800320a:	4770      	bx	lr
