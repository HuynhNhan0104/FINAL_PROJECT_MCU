
Final_MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004650  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c4  080047c4  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  080047c4  080047c4  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047c4  080047c4  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  080047cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200000e8  080048b4  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080048b4  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0f7  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f8  00000000  00000000  0002d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0002f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00030280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018508  00000000  00000000  00030ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e67e  00000000  00000000  000493e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1ff  00000000  00000000  00057a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2c65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  000e2cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004744 	.word	0x08004744

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	08004744 	.word	0x08004744

0800014c <is_pressed>:

int flag_for_pressed[NUMBER_OF_BUTTON] = {0};
int flag_for_pressed_3s[NUMBER_OF_BUTTON] = {0};


int is_pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(index > NUMBER_OF_BUTTON) return 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b04      	cmp	r3, #4
 8000158:	dd01      	ble.n	800015e <is_pressed+0x12>
 800015a:	2300      	movs	r3, #0
 800015c:	e00d      	b.n	800017a <is_pressed+0x2e>
	if(flag_for_pressed[index]){
 800015e:	4a09      	ldr	r2, [pc, #36]	; (8000184 <is_pressed+0x38>)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d006      	beq.n	8000178 <is_pressed+0x2c>
		flag_for_pressed[index] = 0;
 800016a:	4a06      	ldr	r2, [pc, #24]	; (8000184 <is_pressed+0x38>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2100      	movs	r1, #0
 8000170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <is_pressed+0x2e>
	}
	return 0;
 8000178:	2300      	movs	r3, #0
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000104 	.word	0x20000104

08000188 <read_input>:

int register0_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int register1_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int register2_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int button_buffer[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
void read_input(){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_BUTTON; ++i){
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	e069      	b.n	8000268 <read_input+0xe0>
		register0_key[i] = register1_key[i];
 8000194:	4a38      	ldr	r2, [pc, #224]	; (8000278 <read_input+0xf0>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800019c:	4937      	ldr	r1, [pc, #220]	; (800027c <read_input+0xf4>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		register1_key[i] = register2_key[i];
 80001a4:	4a36      	ldr	r2, [pc, #216]	; (8000280 <read_input+0xf8>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ac:	4932      	ldr	r1, [pc, #200]	; (8000278 <read_input+0xf0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b03      	cmp	r3, #3
 80001b8:	d836      	bhi.n	8000228 <read_input+0xa0>
 80001ba:	a201      	add	r2, pc, #4	; (adr r2, 80001c0 <read_input+0x38>)
 80001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c0:	080001d1 	.word	0x080001d1
 80001c4:	080001e7 	.word	0x080001e7
 80001c8:	080001fd 	.word	0x080001fd
 80001cc:	08000213 	.word	0x08000213
		switch(i){
		case 0 :
			 register2_key[i] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001d0:	2101      	movs	r1, #1
 80001d2:	482c      	ldr	r0, [pc, #176]	; (8000284 <read_input+0xfc>)
 80001d4:	f001 fdca 	bl	8001d6c <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	4619      	mov	r1, r3
 80001dc:	4a28      	ldr	r2, [pc, #160]	; (8000280 <read_input+0xf8>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001e4:	e021      	b.n	800022a <read_input+0xa2>
		case 1:
			register2_key[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001e6:	2102      	movs	r1, #2
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <read_input+0xfc>)
 80001ea:	f001 fdbf 	bl	8001d6c <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4619      	mov	r1, r3
 80001f2:	4a23      	ldr	r2, [pc, #140]	; (8000280 <read_input+0xf8>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001fa:	e016      	b.n	800022a <read_input+0xa2>
		case 2:
			register2_key[i] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80001fc:	2110      	movs	r1, #16
 80001fe:	4821      	ldr	r0, [pc, #132]	; (8000284 <read_input+0xfc>)
 8000200:	f001 fdb4 	bl	8001d6c <HAL_GPIO_ReadPin>
 8000204:	4603      	mov	r3, r0
 8000206:	4619      	mov	r1, r3
 8000208:	4a1d      	ldr	r2, [pc, #116]	; (8000280 <read_input+0xf8>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000210:	e00b      	b.n	800022a <read_input+0xa2>
		case 3:
			register2_key[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8000212:	2101      	movs	r1, #1
 8000214:	481c      	ldr	r0, [pc, #112]	; (8000288 <read_input+0x100>)
 8000216:	f001 fda9 	bl	8001d6c <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <read_input+0xf8>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000226:	e000      	b.n	800022a <read_input+0xa2>
		default:
			break;
 8000228:	bf00      	nop
		}

		if(register0_key[i] == register1_key[i] && register1_key[i] == register2_key[i]){
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <read_input+0xf4>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4911      	ldr	r1, [pc, #68]	; (8000278 <read_input+0xf0>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d111      	bne.n	8000262 <read_input+0xda>
 800023e:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <read_input+0xf0>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	490e      	ldr	r1, [pc, #56]	; (8000280 <read_input+0xf8>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024e:	429a      	cmp	r2, r3
 8000250:	d107      	bne.n	8000262 <read_input+0xda>
			button_buffer[i] = register2_key[i];
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <read_input+0xf8>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025a:	490c      	ldr	r1, [pc, #48]	; (800028c <read_input+0x104>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_BUTTON; ++i){
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3301      	adds	r3, #1
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b03      	cmp	r3, #3
 800026c:	dd92      	ble.n	8000194 <read_input+0xc>
		}
	}
}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000020 	.word	0x20000020
 800027c:	20000010 	.word	0x20000010
 8000280:	20000030 	.word	0x20000030
 8000284:	40010800 	.word	0x40010800
 8000288:	40010c00 	.word	0x40010c00
 800028c:	20000040 	.word	0x20000040

08000290 <fsm_for_button>:

void fsm_for_button(){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e057      	b.n	800034c <fsm_for_button+0xbc>
		switch(state_of_button[i]){
 800029c:	4a2f      	ldr	r2, [pc, #188]	; (800035c <fsm_for_button+0xcc>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a4:	2b16      	cmp	r3, #22
 80002a6:	d03b      	beq.n	8000320 <fsm_for_button+0x90>
 80002a8:	2b16      	cmp	r3, #22
 80002aa:	dc45      	bgt.n	8000338 <fsm_for_button+0xa8>
 80002ac:	2b14      	cmp	r3, #20
 80002ae:	d002      	beq.n	80002b6 <fsm_for_button+0x26>
 80002b0:	2b15      	cmp	r3, #21
 80002b2:	d016      	beq.n	80002e2 <fsm_for_button+0x52>
				state_of_button[i] = BUTTON_RELEASED;
			}

			break;
		default:
			break;
 80002b4:	e040      	b.n	8000338 <fsm_for_button+0xa8>
			if(button_buffer[i] == BUTTON_IS_PRESSED){
 80002b6:	4a2a      	ldr	r2, [pc, #168]	; (8000360 <fsm_for_button+0xd0>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d13c      	bne.n	800033c <fsm_for_button+0xac>
				flag_for_pressed[i] = 1;
 80002c2:	4a28      	ldr	r2, [pc, #160]	; (8000364 <fsm_for_button+0xd4>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2101      	movs	r1, #1
 80002c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				set_timer(i, 3000);
 80002cc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f001 f81b 	bl	800130c <set_timer>
				state_of_button[i] = BUTTON_PRESSED;
 80002d6:	4a21      	ldr	r2, [pc, #132]	; (800035c <fsm_for_button+0xcc>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2115      	movs	r1, #21
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002e0:	e02c      	b.n	800033c <fsm_for_button+0xac>
			if(is_timer_timeout(i)){
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f001 f858 	bl	8001398 <is_timer_timeout>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d009      	beq.n	8000302 <fsm_for_button+0x72>
				flag_for_pressed_3s[i] = 1;
 80002ee:	4a1e      	ldr	r2, [pc, #120]	; (8000368 <fsm_for_button+0xd8>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2101      	movs	r1, #1
 80002f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				state_of_button[i] = BUTTON_PRESSED_3S;
 80002f8:	4a18      	ldr	r2, [pc, #96]	; (800035c <fsm_for_button+0xcc>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2116      	movs	r1, #22
 80002fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(button_buffer[i] == BUTTON_IS_RELEASED){
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <fsm_for_button+0xd0>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d118      	bne.n	8000340 <fsm_for_button+0xb0>
				clear_timer(i);
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	f001 f816 	bl	8001340 <clear_timer>
				state_of_button[i] = BUTTON_RELEASED;
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <fsm_for_button+0xcc>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2114      	movs	r1, #20
 800031a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800031e:	e00f      	b.n	8000340 <fsm_for_button+0xb0>
			if(button_buffer[i] == BUTTON_IS_RELEASED){
 8000320:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <fsm_for_button+0xd0>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10b      	bne.n	8000344 <fsm_for_button+0xb4>
				state_of_button[i] = BUTTON_RELEASED;
 800032c:	4a0b      	ldr	r2, [pc, #44]	; (800035c <fsm_for_button+0xcc>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2114      	movs	r1, #20
 8000332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000336:	e005      	b.n	8000344 <fsm_for_button+0xb4>
			break;
 8000338:	bf00      	nop
 800033a:	e004      	b.n	8000346 <fsm_for_button+0xb6>
			break;
 800033c:	bf00      	nop
 800033e:	e002      	b.n	8000346 <fsm_for_button+0xb6>
			break;
 8000340:	bf00      	nop
 8000342:	e000      	b.n	8000346 <fsm_for_button+0xb6>
			break;
 8000344:	bf00      	nop
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3301      	adds	r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b03      	cmp	r3, #3
 8000350:	dda4      	ble.n	800029c <fsm_for_button+0xc>



		}
	}
}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000000 	.word	0x20000000
 8000360:	20000040 	.word	0x20000040
 8000364:	20000104 	.word	0x20000104
 8000368:	20000114 	.word	0x20000114

0800036c <fsm_traffic_1_run>:

#include "fsm_traffic.h"



void fsm_traffic_1_run(){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 8000370:	4b29      	ldr	r3, [pc, #164]	; (8000418 <fsm_traffic_1_run+0xac>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b0c      	cmp	r3, #12
 8000376:	d030      	beq.n	80003da <fsm_traffic_1_run+0x6e>
 8000378:	2b0c      	cmp	r3, #12
 800037a:	dc43      	bgt.n	8000404 <fsm_traffic_1_run+0x98>
 800037c:	2b0a      	cmp	r3, #10
 800037e:	d002      	beq.n	8000386 <fsm_traffic_1_run+0x1a>
 8000380:	2b0b      	cmp	r3, #11
 8000382:	d015      	beq.n	80003b0 <fsm_traffic_1_run+0x44>
				turn_on_traffic_led_1(state_led_traffic_1);
				set_timer(TIMER_LED_TRAFFIC_1,duration_time_of_YELLOW);
			}
		break;
		default:
		break;
 8000384:	e03e      	b.n	8000404 <fsm_traffic_1_run+0x98>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_1)){
 8000386:	2004      	movs	r0, #4
 8000388:	f001 f806 	bl	8001398 <is_timer_timeout>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d03a      	beq.n	8000408 <fsm_traffic_1_run+0x9c>
				state_led_traffic_1 =GREEN;
 8000392:	4b21      	ldr	r3, [pc, #132]	; (8000418 <fsm_traffic_1_run+0xac>)
 8000394:	220c      	movs	r2, #12
 8000396:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 8000398:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <fsm_traffic_1_run+0xac>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f001 f845 	bl	800142c <turn_on_traffic_led_1>
				set_timer(TIMER_LED_TRAFFIC_1,duration_time_of_GREEN);
 80003a2:	4b1e      	ldr	r3, [pc, #120]	; (800041c <fsm_traffic_1_run+0xb0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	2004      	movs	r0, #4
 80003aa:	f000 ffaf 	bl	800130c <set_timer>
		break;
 80003ae:	e02b      	b.n	8000408 <fsm_traffic_1_run+0x9c>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_1)){
 80003b0:	2004      	movs	r0, #4
 80003b2:	f000 fff1 	bl	8001398 <is_timer_timeout>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d027      	beq.n	800040c <fsm_traffic_1_run+0xa0>
				state_led_traffic_1 = RED;
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003be:	220a      	movs	r2, #10
 80003c0:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 f830 	bl	800142c <turn_on_traffic_led_1>
				set_timer(TIMER_LED_TRAFFIC_1,duration_time_of_RED);
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <fsm_traffic_1_run+0xb4>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	2004      	movs	r0, #4
 80003d4:	f000 ff9a 	bl	800130c <set_timer>
		break;
 80003d8:	e018      	b.n	800040c <fsm_traffic_1_run+0xa0>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_1)){
 80003da:	2004      	movs	r0, #4
 80003dc:	f000 ffdc 	bl	8001398 <is_timer_timeout>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d014      	beq.n	8000410 <fsm_traffic_1_run+0xa4>
				state_led_traffic_1 = YELLOW;
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003e8:	220b      	movs	r2, #11
 80003ea:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 f81b 	bl	800142c <turn_on_traffic_led_1>
				set_timer(TIMER_LED_TRAFFIC_1,duration_time_of_YELLOW);
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <fsm_traffic_1_run+0xb8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4619      	mov	r1, r3
 80003fc:	2004      	movs	r0, #4
 80003fe:	f000 ff85 	bl	800130c <set_timer>
		break;
 8000402:	e005      	b.n	8000410 <fsm_traffic_1_run+0xa4>
		break;
 8000404:	bf00      	nop
 8000406:	e004      	b.n	8000412 <fsm_traffic_1_run+0xa6>
		break;
 8000408:	bf00      	nop
 800040a:	e002      	b.n	8000412 <fsm_traffic_1_run+0xa6>
		break;
 800040c:	bf00      	nop
 800040e:	e000      	b.n	8000412 <fsm_traffic_1_run+0xa6>
		break;
 8000410:	bf00      	nop
	}
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000050 	.word	0x20000050
 800041c:	20000060 	.word	0x20000060
 8000420:	20000058 	.word	0x20000058
 8000424:	2000005c 	.word	0x2000005c

08000428 <fsm_traffic_2_run>:


void fsm_traffic_2_run(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 800042c:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <fsm_traffic_2_run+0xac>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b0c      	cmp	r3, #12
 8000432:	d030      	beq.n	8000496 <fsm_traffic_2_run+0x6e>
 8000434:	2b0c      	cmp	r3, #12
 8000436:	dc43      	bgt.n	80004c0 <fsm_traffic_2_run+0x98>
 8000438:	2b0a      	cmp	r3, #10
 800043a:	d002      	beq.n	8000442 <fsm_traffic_2_run+0x1a>
 800043c:	2b0b      	cmp	r3, #11
 800043e:	d015      	beq.n	800046c <fsm_traffic_2_run+0x44>
				turn_on_traffic_led_2(state_led_traffic_2);
				set_timer(TIMER_LED_TRAFFIC_2,duration_time_of_YELLOW);
			}
		break;
		default:
		break;
 8000440:	e03e      	b.n	80004c0 <fsm_traffic_2_run+0x98>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_2)){
 8000442:	2005      	movs	r0, #5
 8000444:	f000 ffa8 	bl	8001398 <is_timer_timeout>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d03a      	beq.n	80004c4 <fsm_traffic_2_run+0x9c>
				state_led_traffic_2 = GREEN;
 800044e:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <fsm_traffic_2_run+0xac>)
 8000450:	220c      	movs	r2, #12
 8000452:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 8000454:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <fsm_traffic_2_run+0xac>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f001 f839 	bl	80014d0 <turn_on_traffic_led_2>
				set_timer(TIMER_LED_TRAFFIC_2,duration_time_of_GREEN);
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <fsm_traffic_2_run+0xb0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	2005      	movs	r0, #5
 8000466:	f000 ff51 	bl	800130c <set_timer>
		break;
 800046a:	e02b      	b.n	80004c4 <fsm_traffic_2_run+0x9c>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_2)){
 800046c:	2005      	movs	r0, #5
 800046e:	f000 ff93 	bl	8001398 <is_timer_timeout>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d027      	beq.n	80004c8 <fsm_traffic_2_run+0xa0>
				state_led_traffic_2 = RED;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <fsm_traffic_2_run+0xac>)
 800047a:	220a      	movs	r2, #10
 800047c:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <fsm_traffic_2_run+0xac>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f001 f824 	bl	80014d0 <turn_on_traffic_led_2>
				set_timer(TIMER_LED_TRAFFIC_2,duration_time_of_RED);
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <fsm_traffic_2_run+0xb4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4619      	mov	r1, r3
 800048e:	2005      	movs	r0, #5
 8000490:	f000 ff3c 	bl	800130c <set_timer>
		break;
 8000494:	e018      	b.n	80004c8 <fsm_traffic_2_run+0xa0>
			if(is_timer_timeout(TIMER_LED_TRAFFIC_2)){
 8000496:	2005      	movs	r0, #5
 8000498:	f000 ff7e 	bl	8001398 <is_timer_timeout>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d014      	beq.n	80004cc <fsm_traffic_2_run+0xa4>
				state_led_traffic_2 = YELLOW;
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <fsm_traffic_2_run+0xac>)
 80004a4:	220b      	movs	r2, #11
 80004a6:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <fsm_traffic_2_run+0xac>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 f80f 	bl	80014d0 <turn_on_traffic_led_2>
				set_timer(TIMER_LED_TRAFFIC_2,duration_time_of_YELLOW);
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <fsm_traffic_2_run+0xb8>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4619      	mov	r1, r3
 80004b8:	2005      	movs	r0, #5
 80004ba:	f000 ff27 	bl	800130c <set_timer>
		break;
 80004be:	e005      	b.n	80004cc <fsm_traffic_2_run+0xa4>
		break;
 80004c0:	bf00      	nop
 80004c2:	e004      	b.n	80004ce <fsm_traffic_2_run+0xa6>
		break;
 80004c4:	bf00      	nop
 80004c6:	e002      	b.n	80004ce <fsm_traffic_2_run+0xa6>
		break;
 80004c8:	bf00      	nop
 80004ca:	e000      	b.n	80004ce <fsm_traffic_2_run+0xa6>
		break;
 80004cc:	bf00      	nop
	}
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000054 	.word	0x20000054
 80004d8:	20000060 	.word	0x20000060
 80004dc:	20000058 	.word	0x20000058
 80004e0:	2000005c 	.word	0x2000005c

080004e4 <fsm_system_run>:


void fsm_system_run(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	switch(mode){
 80004e8:	4b9d      	ldr	r3, [pc, #628]	; (8000760 <fsm_system_run+0x27c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	f200 81ac 	bhi.w	800084a <fsm_system_run+0x366>
 80004f2:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <fsm_system_run+0x14>)
 80004f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f8:	0800050d 	.word	0x0800050d
 80004fc:	08000569 	.word	0x08000569
 8000500:	080005f9 	.word	0x080005f9
 8000504:	080006ad 	.word	0x080006ad
 8000508:	08000789 	.word	0x08000789
		case INIT_SYSTEM:
			//TODO
			state_led_traffic_1 = RED;
 800050c:	4b95      	ldr	r3, [pc, #596]	; (8000764 <fsm_system_run+0x280>)
 800050e:	220a      	movs	r2, #10
 8000510:	601a      	str	r2, [r3, #0]
			turn_on_traffic_led_1(state_led_traffic_1);
 8000512:	4b94      	ldr	r3, [pc, #592]	; (8000764 <fsm_system_run+0x280>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 ff88 	bl	800142c <turn_on_traffic_led_1>
			state_led_traffic_2 = GREEN;
 800051c:	4b92      	ldr	r3, [pc, #584]	; (8000768 <fsm_system_run+0x284>)
 800051e:	220c      	movs	r2, #12
 8000520:	601a      	str	r2, [r3, #0]
			turn_on_traffic_led_2(state_led_traffic_2);
 8000522:	4b91      	ldr	r3, [pc, #580]	; (8000768 <fsm_system_run+0x284>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 ffd2 	bl	80014d0 <turn_on_traffic_led_2>

			set_timer(TIMER_LED_TRAFFIC_1, duration_time_of_RED);
 800052c:	4b8f      	ldr	r3, [pc, #572]	; (800076c <fsm_system_run+0x288>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	2004      	movs	r0, #4
 8000534:	f000 feea 	bl	800130c <set_timer>
			set_timer(TIMER_LED_TRAFFIC_2, duration_time_of_GREEN);
 8000538:	4b8d      	ldr	r3, [pc, #564]	; (8000770 <fsm_system_run+0x28c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	2005      	movs	r0, #5
 8000540:	f000 fee4 	bl	800130c <set_timer>

			update_buffer_high(get_time_of_counter(TIMER_LED_TRAFFIC_1));
 8000544:	2004      	movs	r0, #4
 8000546:	f000 ff13 	bl	8001370 <get_time_of_counter>
 800054a:	4603      	mov	r3, r0
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f997 	bl	8000880 <update_buffer_high>
			update_buffer_low(get_time_of_counter(TIMER_LED_TRAFFIC_2));
 8000552:	2005      	movs	r0, #5
 8000554:	f000 ff0c 	bl	8001370 <get_time_of_counter>
 8000558:	4603      	mov	r3, r0
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f9a8 	bl	80008b0 <update_buffer_low>
			//STATE STRANSITION
			mode = NORMAL_MODE;
 8000560:	4b7f      	ldr	r3, [pc, #508]	; (8000760 <fsm_system_run+0x27c>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
		break;
 8000566:	e179      	b.n	800085c <fsm_system_run+0x378>
		case NORMAL_MODE:
			//TODO
			fsm_traffic_1_run();
 8000568:	f7ff ff00 	bl	800036c <fsm_traffic_1_run>
			fsm_traffic_2_run();
 800056c:	f7ff ff5c 	bl	8000428 <fsm_traffic_2_run>
			update_buffer_high(get_time_of_counter(TIMER_LED_TRAFFIC_1));
 8000570:	2004      	movs	r0, #4
 8000572:	f000 fefd 	bl	8001370 <get_time_of_counter>
 8000576:	4603      	mov	r3, r0
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f981 	bl	8000880 <update_buffer_high>
			update_buffer_low(get_time_of_counter(TIMER_LED_TRAFFIC_2));
 800057e:	2005      	movs	r0, #5
 8000580:	f000 fef6 	bl	8001370 <get_time_of_counter>
 8000584:	4603      	mov	r3, r0
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f992 	bl	80008b0 <update_buffer_low>

			//STATE STRANSITION
			//button 1 is pressed,  NORMAl_MODE -> MODIFY_RED_MODE
			if(is_pressed(BUTTON_1)){
 800058c:	2001      	movs	r0, #1
 800058e:	f7ff fddd 	bl	800014c <is_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	f000 815a 	beq.w	800084e <fsm_system_run+0x36a>
				clear_timer(TIMER_LED_TRAFFIC_1);
 800059a:	2004      	movs	r0, #4
 800059c:	f000 fed0 	bl	8001340 <clear_timer>
				clear_timer(TIMER_LED_TRAFFIC_2);
 80005a0:	2005      	movs	r0, #5
 80005a2:	f000 fecd 	bl	8001340 <clear_timer>
				state_led_traffic_1 = RED;
 80005a6:	4b6f      	ldr	r3, [pc, #444]	; (8000764 <fsm_system_run+0x280>)
 80005a8:	220a      	movs	r2, #10
 80005aa:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 80005ac:	4b6d      	ldr	r3, [pc, #436]	; (8000764 <fsm_system_run+0x280>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 ff3b 	bl	800142c <turn_on_traffic_led_1>
				state_led_traffic_2 = RED;
 80005b6:	4b6c      	ldr	r3, [pc, #432]	; (8000768 <fsm_system_run+0x284>)
 80005b8:	220a      	movs	r2, #10
 80005ba:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 80005bc:	4b6a      	ldr	r3, [pc, #424]	; (8000768 <fsm_system_run+0x284>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 ff85 	bl	80014d0 <turn_on_traffic_led_2>

				is_led_ON= 0;
 80005c6:	4b6b      	ldr	r3, [pc, #428]	; (8000774 <fsm_system_run+0x290>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
				set_timer(TIMER_BLINKING_LED, 500);
 80005cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005d0:	2006      	movs	r0, #6
 80005d2:	f000 fe9b 	bl	800130c <set_timer>
				buffer_duration_time = duration_time_of_RED;
 80005d6:	4b65      	ldr	r3, [pc, #404]	; (800076c <fsm_system_run+0x288>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a67      	ldr	r2, [pc, #412]	; (8000778 <fsm_system_run+0x294>)
 80005dc:	6013      	str	r3, [r2, #0]


				update_buffer_high(1000);
 80005de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e2:	f000 f94d 	bl	8000880 <update_buffer_high>
				update_buffer_low(buffer_duration_time);
 80005e6:	4b64      	ldr	r3, [pc, #400]	; (8000778 <fsm_system_run+0x294>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f960 	bl	80008b0 <update_buffer_low>
				mode = MODIFY_RED_MODE;
 80005f0:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <fsm_system_run+0x27c>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	601a      	str	r2, [r3, #0]
			}
		break;
 80005f6:	e12a      	b.n	800084e <fsm_system_run+0x36a>
		case MODIFY_RED_MODE:
			//todo

			blinking_led_traffic(state_led_traffic_1);
 80005f8:	4b5a      	ldr	r3, [pc, #360]	; (8000764 <fsm_system_run+0x280>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 ffc1 	bl	8001584 <blinking_led_traffic>



			//button 2 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(BUTTON_2)){
 8000602:	2002      	movs	r0, #2
 8000604:	f7ff fda2 	bl	800014c <is_pressed>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d014      	beq.n	8000638 <fsm_system_run+0x154>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 800060e:	4b5a      	ldr	r3, [pc, #360]	; (8000778 <fsm_system_run+0x294>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000616:	4b59      	ldr	r3, [pc, #356]	; (800077c <fsm_system_run+0x298>)
 8000618:	fb83 1302 	smull	r1, r3, r3, r2
 800061c:	1359      	asrs	r1, r3, #13
 800061e:	17d3      	asrs	r3, r2, #31
 8000620:	1acb      	subs	r3, r1, r3
 8000622:	4957      	ldr	r1, [pc, #348]	; (8000780 <fsm_system_run+0x29c>)
 8000624:	fb01 f303 	mul.w	r3, r1, r3
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	4a53      	ldr	r2, [pc, #332]	; (8000778 <fsm_system_run+0x294>)
 800062c:	6013      	str	r3, [r2, #0]
				update_buffer_low(buffer_duration_time);
 800062e:	4b52      	ldr	r3, [pc, #328]	; (8000778 <fsm_system_run+0x294>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f93c 	bl	80008b0 <update_buffer_low>
			}
			//button 3 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(BUTTON_3)){
 8000638:	2003      	movs	r0, #3
 800063a:	f7ff fd87 	bl	800014c <is_pressed>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d003      	beq.n	800064c <fsm_system_run+0x168>
				duration_time_of_RED = buffer_duration_time;
 8000644:	4b4c      	ldr	r3, [pc, #304]	; (8000778 <fsm_system_run+0x294>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a48      	ldr	r2, [pc, #288]	; (800076c <fsm_system_run+0x288>)
 800064a:	6013      	str	r3, [r2, #0]
			}
			//STATE STRANSITION
			//button 1 is pressed, MODIFY_RED_MODE -> MODIFY_YELLOW_MODE
			if(is_pressed(BUTTON_1)){
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff fd7d 	bl	800014c <is_pressed>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	f000 80fc 	beq.w	8000852 <fsm_system_run+0x36e>
				state_led_traffic_1 = YELLOW;
 800065a:	4b42      	ldr	r3, [pc, #264]	; (8000764 <fsm_system_run+0x280>)
 800065c:	220b      	movs	r2, #11
 800065e:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 8000660:	4b40      	ldr	r3, [pc, #256]	; (8000764 <fsm_system_run+0x280>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fee1 	bl	800142c <turn_on_traffic_led_1>
				state_led_traffic_2 = YELLOW;
 800066a:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <fsm_system_run+0x284>)
 800066c:	220b      	movs	r2, #11
 800066e:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 8000670:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <fsm_system_run+0x284>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 ff2b 	bl	80014d0 <turn_on_traffic_led_2>

				is_led_ON= 0;
 800067a:	4b3e      	ldr	r3, [pc, #248]	; (8000774 <fsm_system_run+0x290>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
				set_timer(TIMER_BLINKING_LED, 500);
 8000680:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000684:	2006      	movs	r0, #6
 8000686:	f000 fe41 	bl	800130c <set_timer>
				buffer_duration_time = duration_time_of_YELLOW;
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <fsm_system_run+0x2a0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a3a      	ldr	r2, [pc, #232]	; (8000778 <fsm_system_run+0x294>)
 8000690:	6013      	str	r3, [r2, #0]

				update_buffer_high(2000);
 8000692:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000696:	f000 f8f3 	bl	8000880 <update_buffer_high>
				update_buffer_low(buffer_duration_time);
 800069a:	4b37      	ldr	r3, [pc, #220]	; (8000778 <fsm_system_run+0x294>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f906 	bl	80008b0 <update_buffer_low>

				mode = MODIFY_YELLOW_MODE;
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <fsm_system_run+0x27c>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	601a      	str	r2, [r3, #0]
			}
		break;
 80006aa:	e0d2      	b.n	8000852 <fsm_system_run+0x36e>
		case MODIFY_YELLOW_MODE:
			blinking_led_traffic(state_led_traffic_1);
 80006ac:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <fsm_system_run+0x280>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 ff67 	bl	8001584 <blinking_led_traffic>

			//button 2 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(BUTTON_2)){
 80006b6:	2002      	movs	r0, #2
 80006b8:	f7ff fd48 	bl	800014c <is_pressed>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d014      	beq.n	80006ec <fsm_system_run+0x208>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 80006c2:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <fsm_system_run+0x294>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <fsm_system_run+0x298>)
 80006cc:	fb83 1302 	smull	r1, r3, r3, r2
 80006d0:	1359      	asrs	r1, r3, #13
 80006d2:	17d3      	asrs	r3, r2, #31
 80006d4:	1acb      	subs	r3, r1, r3
 80006d6:	492a      	ldr	r1, [pc, #168]	; (8000780 <fsm_system_run+0x29c>)
 80006d8:	fb01 f303 	mul.w	r3, r1, r3
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	4a26      	ldr	r2, [pc, #152]	; (8000778 <fsm_system_run+0x294>)
 80006e0:	6013      	str	r3, [r2, #0]
				update_buffer_low(buffer_duration_time);
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <fsm_system_run+0x294>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f8e2 	bl	80008b0 <update_buffer_low>
			}
			//button 3 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(BUTTON_3)){
 80006ec:	2003      	movs	r0, #3
 80006ee:	f7ff fd2d 	bl	800014c <is_pressed>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d003      	beq.n	8000700 <fsm_system_run+0x21c>
				duration_time_of_YELLOW = buffer_duration_time;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <fsm_system_run+0x294>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <fsm_system_run+0x2a0>)
 80006fe:	6013      	str	r3, [r2, #0]
			}

			//STATE STRANSITION
			//button 1 is pressed,MODIFY_YELLOW_MODE  ->  MODIFY_GREEN_MODE
			if(is_pressed(BUTTON_1)){
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff fd23 	bl	800014c <is_pressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	f000 80a4 	beq.w	8000856 <fsm_system_run+0x372>
				state_led_traffic_1 = GREEN;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <fsm_system_run+0x280>)
 8000710:	220c      	movs	r2, #12
 8000712:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <fsm_system_run+0x280>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fe87 	bl	800142c <turn_on_traffic_led_1>
				state_led_traffic_2 = GREEN;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <fsm_system_run+0x284>)
 8000720:	220c      	movs	r2, #12
 8000722:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <fsm_system_run+0x284>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fed1 	bl	80014d0 <turn_on_traffic_led_2>

				is_led_ON= 0;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <fsm_system_run+0x290>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
				set_timer(TIMER_BLINKING_LED, 500);
 8000734:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000738:	2006      	movs	r0, #6
 800073a:	f000 fde7 	bl	800130c <set_timer>
				buffer_duration_time = duration_time_of_GREEN;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <fsm_system_run+0x28c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <fsm_system_run+0x294>)
 8000744:	6013      	str	r3, [r2, #0]

				update_buffer_high(3000);
 8000746:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800074a:	f000 f899 	bl	8000880 <update_buffer_high>
				update_buffer_low(buffer_duration_time);
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <fsm_system_run+0x294>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f8ac 	bl	80008b0 <update_buffer_low>

				mode = MODIFY_GREEN_MODE;
 8000758:	4b01      	ldr	r3, [pc, #4]	; (8000760 <fsm_system_run+0x27c>)
 800075a:	2204      	movs	r2, #4
 800075c:	601a      	str	r2, [r3, #0]
			}
		break;
 800075e:	e07a      	b.n	8000856 <fsm_system_run+0x372>
 8000760:	20000124 	.word	0x20000124
 8000764:	20000050 	.word	0x20000050
 8000768:	20000054 	.word	0x20000054
 800076c:	20000058 	.word	0x20000058
 8000770:	20000060 	.word	0x20000060
 8000774:	200001b8 	.word	0x200001b8
 8000778:	20000064 	.word	0x20000064
 800077c:	14f8b589 	.word	0x14f8b589
 8000780:	000186a0 	.word	0x000186a0
 8000784:	2000005c 	.word	0x2000005c
		case MODIFY_GREEN_MODE:
			blinking_led_traffic(state_led_traffic_1);
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <fsm_system_run+0x37c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fef9 	bl	8001584 <blinking_led_traffic>
			//button 2 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(BUTTON_2)){
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff fcda 	bl	800014c <is_pressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d014      	beq.n	80007c8 <fsm_system_run+0x2e4>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <fsm_system_run+0x380>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <fsm_system_run+0x384>)
 80007a8:	fb83 1302 	smull	r1, r3, r3, r2
 80007ac:	1359      	asrs	r1, r3, #13
 80007ae:	17d3      	asrs	r3, r2, #31
 80007b0:	1acb      	subs	r3, r1, r3
 80007b2:	492e      	ldr	r1, [pc, #184]	; (800086c <fsm_system_run+0x388>)
 80007b4:	fb01 f303 	mul.w	r3, r1, r3
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <fsm_system_run+0x380>)
 80007bc:	6013      	str	r3, [r2, #0]
				update_buffer_low(buffer_duration_time);
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <fsm_system_run+0x380>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f874 	bl	80008b0 <update_buffer_low>
			}
			//button 3 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(BUTTON_3)){
 80007c8:	2003      	movs	r0, #3
 80007ca:	f7ff fcbf 	bl	800014c <is_pressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <fsm_system_run+0x2f8>
				duration_time_of_GREEN = buffer_duration_time;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <fsm_system_run+0x380>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a25      	ldr	r2, [pc, #148]	; (8000870 <fsm_system_run+0x38c>)
 80007da:	6013      	str	r3, [r2, #0]
			}

			//STATE STRANSITION
			//button 1 is pressed, MODIFY_GREEN_MODE -> NORMAL_MODE
			if(is_pressed(BUTTON_1)){
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff fcb5 	bl	800014c <is_pressed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d038      	beq.n	800085a <fsm_system_run+0x376>
				clear_timer(TIMER_BLINKING_LED);
 80007e8:	2006      	movs	r0, #6
 80007ea:	f000 fda9 	bl	8001340 <clear_timer>
				state_led_traffic_1 = RED;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <fsm_system_run+0x37c>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <fsm_system_run+0x37c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fe17 	bl	800142c <turn_on_traffic_led_1>
				state_led_traffic_2 = GREEN;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <fsm_system_run+0x390>)
 8000800:	220c      	movs	r2, #12
 8000802:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_2(state_led_traffic_2);
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <fsm_system_run+0x390>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fe61 	bl	80014d0 <turn_on_traffic_led_2>
				set_timer(TIMER_LED_TRAFFIC_1, duration_time_of_RED);
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <fsm_system_run+0x394>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4619      	mov	r1, r3
 8000814:	2004      	movs	r0, #4
 8000816:	f000 fd79 	bl	800130c <set_timer>
				set_timer(TIMER_LED_TRAFFIC_2, duration_time_of_GREEN);
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <fsm_system_run+0x38c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	2005      	movs	r0, #5
 8000822:	f000 fd73 	bl	800130c <set_timer>
				update_buffer_high(get_time_of_counter(TIMER_LED_TRAFFIC_1));
 8000826:	2004      	movs	r0, #4
 8000828:	f000 fda2 	bl	8001370 <get_time_of_counter>
 800082c:	4603      	mov	r3, r0
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f826 	bl	8000880 <update_buffer_high>
				update_buffer_low(get_time_of_counter(TIMER_LED_TRAFFIC_2));
 8000834:	2005      	movs	r0, #5
 8000836:	f000 fd9b 	bl	8001370 <get_time_of_counter>
 800083a:	4603      	mov	r3, r0
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f837 	bl	80008b0 <update_buffer_low>
				mode = NORMAL_MODE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <fsm_system_run+0x398>)
 8000844:	2201      	movs	r2, #1
 8000846:	601a      	str	r2, [r3, #0]
			}
		break;
 8000848:	e007      	b.n	800085a <fsm_system_run+0x376>
		default:
		break;
 800084a:	bf00      	nop
 800084c:	e006      	b.n	800085c <fsm_system_run+0x378>
		break;
 800084e:	bf00      	nop
 8000850:	e004      	b.n	800085c <fsm_system_run+0x378>
		break;
 8000852:	bf00      	nop
 8000854:	e002      	b.n	800085c <fsm_system_run+0x378>
		break;
 8000856:	bf00      	nop
 8000858:	e000      	b.n	800085c <fsm_system_run+0x378>
		break;
 800085a:	bf00      	nop
	}
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000050 	.word	0x20000050
 8000864:	20000064 	.word	0x20000064
 8000868:	14f8b589 	.word	0x14f8b589
 800086c:	000186a0 	.word	0x000186a0
 8000870:	20000060 	.word	0x20000060
 8000874:	20000054 	.word	0x20000054
 8000878:	20000058 	.word	0x20000058
 800087c:	20000124 	.word	0x20000124

08000880 <update_buffer_high>:
 */
#include "led_7_seg.h"

int buffer_output [NUMBER_OF_BUFFER] = {0};

void update_buffer_high(int number){
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	number /= 1000;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <update_buffer_high+0x28>)
 800088c:	fb82 1203 	smull	r1, r2, r2, r3
 8000890:	1192      	asrs	r2, r2, #6
 8000892:	17db      	asrs	r3, r3, #31
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	607b      	str	r3, [r7, #4]
	buffer_output[0] = number;
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <update_buffer_high+0x2c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	10624dd3 	.word	0x10624dd3
 80008ac:	20000128 	.word	0x20000128

080008b0 <update_buffer_low>:
void update_buffer_low(int number){
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	number /= 1000;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <update_buffer_low+0x28>)
 80008bc:	fb82 1203 	smull	r1, r2, r2, r3
 80008c0:	1192      	asrs	r2, r2, #6
 80008c2:	17db      	asrs	r3, r3, #31
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	607b      	str	r3, [r7, #4]
	buffer_output[1] = number;
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <update_buffer_low+0x2c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6053      	str	r3, [r2, #4]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	10624dd3 	.word	0x10624dd3
 80008dc:	20000128 	.word	0x20000128

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f000 fe9e 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f824 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f000 f950 	bl	8000b90 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008f0:	f000 f862 	bl	80009b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008f4:	f000 f8ac 	bl	8000a50 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80008f8:	f000 f920 	bl	8000b3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <main+0x48>)
 80008fe:	f001 fecf 	bl	80026a0 <HAL_TIM_Base_Start_IT>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000902:	2100      	movs	r1, #0
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <main+0x4c>)
 8000906:	f001 ff75 	bl	80027f4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
mode = INIT_SYSTEM;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <main+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]


  while (1)
  {

	  fsm_for_button();
 8000910:	f7ff fcbe 	bl	8000290 <fsm_for_button>
	  fsm_system_run();
 8000914:	f7ff fde6 	bl	80004e4 <fsm_system_run>
	  fsm_pedestrian_run();
 8000918:	f000 faac 	bl	8000e74 <fsm_pedestrian_run>
	  control_buzzer();
 800091c:	f000 f9b2 	bl	8000c84 <control_buzzer>
	  send_uart();
 8000920:	f000 fa00 	bl	8000d24 <send_uart>
	  fsm_for_button();
 8000924:	e7f4      	b.n	8000910 <main+0x30>
 8000926:	bf00      	nop
 8000928:	2000020c 	.word	0x2000020c
 800092c:	200001c4 	.word	0x200001c4
 8000930:	20000124 	.word	0x20000124

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b090      	sub	sp, #64	; 0x40
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	2228      	movs	r2, #40	; 0x28
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fabc 	bl	8003ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095a:	2301      	movs	r3, #1
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095e:	2310      	movs	r3, #16
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000966:	2300      	movs	r3, #0
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800096a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fa29 	bl	8001dcc <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000980:	f000 f9ea 	bl	8000d58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2302      	movs	r3, #2
 800098a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 fc94 	bl	80022cc <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80009aa:	f000 f9d5 	bl	8000d58 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3740      	adds	r7, #64	; 0x40
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009de:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80009e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009ec:	220a      	movs	r2, #10
 80009ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_TIM2_Init+0x94>)
 80009fe:	f001 fdff 	bl	8002600 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a08:	f000 f9a6 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM2_Init+0x94>)
 8000a1a:	f002 f953 	bl	8002cc4 <HAL_TIM_ConfigClockSource>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a24:	f000 f998 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM2_Init+0x94>)
 8000a36:	f002 fcd1 	bl	80033dc <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f98a 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000020c 	.word	0x2000020c

08000a50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
 8000a7c:	615a      	str	r2, [r3, #20]
 8000a7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000a82:	4a2d      	ldr	r2, [pc, #180]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000a84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000a86:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000a88:	223f      	movs	r2, #63	; 0x3f
 8000a8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000a94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aa6:	4823      	ldr	r0, [pc, #140]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000aa8:	f001 fdaa 	bl	8002600 <HAL_TIM_Base_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ab2:	f000 f951 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000abc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481c      	ldr	r0, [pc, #112]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000ac4:	f002 f8fe 	bl	8002cc4 <HAL_TIM_ConfigClockSource>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ace:	f000 f943 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ad2:	4818      	ldr	r0, [pc, #96]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000ad4:	f001 fe36 	bl	8002744 <HAL_TIM_PWM_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ade:	f000 f93b 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	4619      	mov	r1, r3
 8000af0:	4810      	ldr	r0, [pc, #64]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000af2:	f002 fc73 	bl	80033dc <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000afc:	f000 f92c 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000b18:	f002 f816 	bl	8002b48 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b22:	f000 f919 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <MX_TIM3_Init+0xe4>)
 8000b28:	f000 faf4 	bl	8001114 <HAL_TIM_MspPostInit>

}
 8000b2c:	bf00      	nop
 8000b2e:	3738      	adds	r7, #56	; 0x38
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200001c4 	.word	0x200001c4
 8000b38:	40000400 	.word	0x40000400

08000b3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <MX_USART2_UART_Init+0x50>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USART2_UART_Init+0x4c>)
 8000b74:	f002 fca2 	bl	80034bc <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7e:	f000 f8eb 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000254 	.word	0x20000254
 8000b8c:	40004400 	.word	0x40004400

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_GPIO_Init+0xd0>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000bda:	4822      	ldr	r0, [pc, #136]	; (8000c64 <MX_GPIO_Init+0xd4>)
 8000bdc:	f001 f8dd 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000be6:	4820      	ldr	r0, [pc, #128]	; (8000c68 <MX_GPIO_Init+0xd8>)
 8000be8:	f001 f8d7 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000bec:	2313      	movs	r3, #19
 8000bee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481a      	ldr	r0, [pc, #104]	; (8000c68 <MX_GPIO_Init+0xd8>)
 8000c00:	f000 ff30 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	4619      	mov	r1, r3
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <MX_GPIO_Init+0xd4>)
 8000c18:	f000 ff24 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000c1c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4619      	mov	r1, r3
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <MX_GPIO_Init+0xd4>)
 8000c36:	f000 ff15 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000c3a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000c3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_GPIO_Init+0xd8>)
 8000c54:	f000 ff06 	bl	8001a64 <HAL_GPIO_Init>

}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	40010800 	.word	0x40010800

08000c6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	timer_run();
 8000c74:	f000 fbaa 	bl	80013cc <timer_run>
	read_input();
 8000c78:	f7ff fa86 	bl	8000188 <read_input>

}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <control_buzzer>:



void control_buzzer(){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	if(buzzer_flag == 1){
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <control_buzzer+0x8c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d138      	bne.n	8000d02 <control_buzzer+0x7e>
		// pedestrian led is GREEN
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1, 1000 - pulse_width);
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <control_buzzer+0x90>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <control_buzzer+0x94>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34
		if(is_timer_timeout(TIMER_BUZZER)){
 8000c9e:	2008      	movs	r0, #8
 8000ca0:	f000 fb7a 	bl	8001398 <is_timer_timeout>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d030      	beq.n	8000d0c <control_buzzer+0x88>
			if(is_buzzer_active){
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <control_buzzer+0x98>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00c      	beq.n	8000ccc <control_buzzer+0x48>
				pulse_width = 0;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <control_buzzer+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
				is_buzzer_active = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <control_buzzer+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
				set_timer(TIMER_BUZZER,  time_of_buzzer );
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <control_buzzer+0x9c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2008      	movs	r0, #8
 8000cc6:	f000 fb21 	bl	800130c <set_timer>
	else{
		// pedestrian led is RED
		//turn_of_buzzer
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1, 1000);
	}
}
 8000cca:	e01f      	b.n	8000d0c <control_buzzer+0x88>
				pulse_width = 500;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <control_buzzer+0x90>)
 8000cce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cd2:	601a      	str	r2, [r3, #0]
				if( time_of_buzzer  > 50) time_of_buzzer =  time_of_buzzer - 50 ;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <control_buzzer+0x9c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b32      	cmp	r3, #50	; 0x32
 8000cda:	dd05      	ble.n	8000ce8 <control_buzzer+0x64>
 8000cdc:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <control_buzzer+0x9c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3b32      	subs	r3, #50	; 0x32
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <control_buzzer+0x9c>)
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e002      	b.n	8000cee <control_buzzer+0x6a>
				else time_of_buzzer = 50;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <control_buzzer+0x9c>)
 8000cea:	2232      	movs	r2, #50	; 0x32
 8000cec:	601a      	str	r2, [r3, #0]
				set_timer(TIMER_BUZZER,  time_of_buzzer );
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <control_buzzer+0x9c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	2008      	movs	r0, #8
 8000cf6:	f000 fb09 	bl	800130c <set_timer>
				is_buzzer_active = 1;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <control_buzzer+0x98>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	e004      	b.n	8000d0c <control_buzzer+0x88>
		__HAL_TIM_SetCompare (&htim3,TIM_CHANNEL_1, 1000);
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <control_buzzer+0x94>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000134 	.word	0x20000134
 8000d14:	20000130 	.word	0x20000130
 8000d18:	200001c4 	.word	0x200001c4
 8000d1c:	20000074 	.word	0x20000074
 8000d20:	20000138 	.word	0x20000138

08000d24 <send_uart>:
void send_uart(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (void *)str, sprintf(str, "!7SEG:%d\n#", buffer_output[0]), 50);
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <send_uart+0x24>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4907      	ldr	r1, [pc, #28]	; (8000d4c <send_uart+0x28>)
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <send_uart+0x2c>)
 8000d32:	f003 f8cd 	bl	8003ed0 <siprintf>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	2332      	movs	r3, #50	; 0x32
 8000d3c:	4904      	ldr	r1, [pc, #16]	; (8000d50 <send_uart+0x2c>)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <send_uart+0x30>)
 8000d40:	f002 fc09 	bl	8003556 <HAL_UART_Transmit>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000128 	.word	0x20000128
 8000d4c:	0800475c 	.word	0x0800475c
 8000d50:	20000298 	.word	0x20000298
 8000d54:	20000254 	.word	0x20000254

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <turn_on_buzzer>:
int safe_time = 5000;
int time_of_buzzer = 0;

int is_buzzer_active= 1;

void turn_on_buzzer(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	pulse_width = 500;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <turn_on_buzzer+0x2c>)
 8000d6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d6e:	601a      	str	r2, [r3, #0]
	time_of_buzzer = 300;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <turn_on_buzzer+0x30>)
 8000d72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d76:	601a      	str	r2, [r3, #0]
	buzzer_flag = 1;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <turn_on_buzzer+0x34>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
	set_timer(TIMER_BUZZER, time_of_buzzer);
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <turn_on_buzzer+0x30>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	2008      	movs	r0, #8
 8000d86:	f000 fac1 	bl	800130c <set_timer>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000130 	.word	0x20000130
 8000d94:	20000138 	.word	0x20000138
 8000d98:	20000134 	.word	0x20000134

08000d9c <turn_off_buzzer>:

void turn_off_buzzer(){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	pulse_width = 0;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <turn_off_buzzer+0x20>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
	time_of_buzzer = 0;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <turn_off_buzzer+0x24>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
	buzzer_flag = 0;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <turn_off_buzzer+0x28>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
	clear_timer(TIMER_BUZZER);
 8000db2:	2008      	movs	r0, #8
 8000db4:	f000 fac4 	bl	8001340 <clear_timer>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000130 	.word	0x20000130
 8000dc0:	20000138 	.word	0x20000138
 8000dc4:	20000134 	.word	0x20000134

08000dc8 <turn_on_led_PED>:


void turn_on_led_PED(int state){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	switch(state){
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b0c      	cmp	r3, #12
 8000dd4:	d016      	beq.n	8000e04 <turn_on_led_PED+0x3c>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0c      	cmp	r3, #12
 8000dda:	dc2d      	bgt.n	8000e38 <turn_on_led_PED+0x70>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b0a      	cmp	r3, #10
 8000de0:	d003      	beq.n	8000dea <turn_on_led_PED+0x22>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0b      	cmp	r3, #11
 8000de6:	d01a      	beq.n	8000e1e <turn_on_led_PED+0x56>
		case YELLOW:
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
		break;
		default:
		break;
 8000de8:	e026      	b.n	8000e38 <turn_on_led_PED+0x70>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df0:	4814      	ldr	r0, [pc, #80]	; (8000e44 <turn_on_led_PED+0x7c>)
 8000df2:	f000 ffd2 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfc:	4812      	ldr	r0, [pc, #72]	; (8000e48 <turn_on_led_PED+0x80>)
 8000dfe:	f000 ffcc 	bl	8001d9a <HAL_GPIO_WritePin>
		break;
 8000e02:	e01a      	b.n	8000e3a <turn_on_led_PED+0x72>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0a:	480e      	ldr	r0, [pc, #56]	; (8000e44 <turn_on_led_PED+0x7c>)
 8000e0c:	f000 ffc5 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e16:	480c      	ldr	r0, [pc, #48]	; (8000e48 <turn_on_led_PED+0x80>)
 8000e18:	f000 ffbf 	bl	8001d9a <HAL_GPIO_WritePin>
		break;
 8000e1c:	e00d      	b.n	8000e3a <turn_on_led_PED+0x72>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <turn_on_led_PED+0x7c>)
 8000e26:	f000 ffb8 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <turn_on_led_PED+0x80>)
 8000e32:	f000 ffb2 	bl	8001d9a <HAL_GPIO_WritePin>
		break;
 8000e36:	e000      	b.n	8000e3a <turn_on_led_PED+0x72>
		break;
 8000e38:	bf00      	nop
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40010c00 	.word	0x40010c00
 8000e48:	40010800 	.word	0x40010800

08000e4c <turn_off_led_PED>:
void turn_off_led_PED(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <turn_off_led_PED+0x20>)
 8000e58:	f000 ff9f 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e62:	4803      	ldr	r0, [pc, #12]	; (8000e70 <turn_off_led_PED+0x24>)
 8000e64:	f000 ff99 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40010c00 	.word	0x40010c00
 8000e70:	40010800 	.word	0x40010800

08000e74 <fsm_pedestrian_run>:




void fsm_pedestrian_run(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	switch(state_of_pedestrian){
 8000e78:	4b68      	ldr	r3, [pc, #416]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3b1e      	subs	r3, #30
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	f200 80c0 	bhi.w	8001004 <fsm_pedestrian_run+0x190>
 8000e84:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <fsm_pedestrian_run+0x18>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000e9d 	.word	0x08000e9d
 8000e90:	08000f05 	.word	0x08000f05
 8000e94:	08000f63 	.word	0x08000f63
 8000e98:	08000ff1 	.word	0x08000ff1
	case OFF_PEDESTRIAN:
		cycle_of_pedestrian =( duration_time_of_RED + duration_time_of_YELLOW+ duration_time_of_GREEN) *2;
 8000e9c:	4b60      	ldr	r3, [pc, #384]	; (8001020 <fsm_pedestrian_run+0x1ac>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b60      	ldr	r3, [pc, #384]	; (8001024 <fsm_pedestrian_run+0x1b0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	441a      	add	r2, r3
 8000ea6:	4b60      	ldr	r3, [pc, #384]	; (8001028 <fsm_pedestrian_run+0x1b4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4a5f      	ldr	r2, [pc, #380]	; (800102c <fsm_pedestrian_run+0x1b8>)
 8000eb0:	6013      	str	r3, [r2, #0]
		if(is_pressed( BUTTON_0 )){
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff f94a 	bl	800014c <is_pressed>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d016      	beq.n	8000eec <fsm_pedestrian_run+0x78>
			set_timer(TIMER_PEDESTRIAN ,cycle_of_pedestrian);
 8000ebe:	4b5b      	ldr	r3, [pc, #364]	; (800102c <fsm_pedestrian_run+0x1b8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	2007      	movs	r0, #7
 8000ec6:	f000 fa21 	bl	800130c <set_timer>
			if(state_led_traffic_1 != RED){
 8000eca:	4b59      	ldr	r3, [pc, #356]	; (8001030 <fsm_pedestrian_run+0x1bc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b0a      	cmp	r3, #10
 8000ed0:	d006      	beq.n	8000ee0 <fsm_pedestrian_run+0x6c>
				state_of_pedestrian = RED_PEDESTRIAN;
 8000ed2:	4b52      	ldr	r3, [pc, #328]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000ed4:	221f      	movs	r2, #31
 8000ed6:	601a      	str	r2, [r3, #0]
				turn_on_led_PED(RED);
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f7ff ff75 	bl	8000dc8 <turn_on_led_PED>
 8000ede:	e005      	b.n	8000eec <fsm_pedestrian_run+0x78>
			}
			else {
				state_of_pedestrian = GREEN_PEDESTRIAN;
 8000ee0:	4b4e      	ldr	r3, [pc, #312]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	601a      	str	r2, [r3, #0]
				turn_on_led_PED(GREEN);
 8000ee6:	200c      	movs	r0, #12
 8000ee8:	f7ff ff6e 	bl	8000dc8 <turn_on_led_PED>
			}
		}

		if(mode != NORMAL_MODE){
 8000eec:	4b51      	ldr	r3, [pc, #324]	; (8001034 <fsm_pedestrian_run+0x1c0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	f000 8089 	beq.w	8001008 <fsm_pedestrian_run+0x194>
			state_of_pedestrian = YELLOW_PEDESTRIAN;
 8000ef6:	4b49      	ldr	r3, [pc, #292]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000ef8:	2221      	movs	r2, #33	; 0x21
 8000efa:	601a      	str	r2, [r3, #0]
			turn_on_led_PED(YELLOW);
 8000efc:	200b      	movs	r0, #11
 8000efe:	f7ff ff63 	bl	8000dc8 <turn_on_led_PED>
		}

	break;
 8000f02:	e081      	b.n	8001008 <fsm_pedestrian_run+0x194>
	case RED_PEDESTRIAN:

		if(is_pressed( BUTTON_0 )){
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff f921 	bl	800014c <is_pressed>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <fsm_pedestrian_run+0xa8>
			set_timer(TIMER_PEDESTRIAN ,cycle_of_pedestrian);
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <fsm_pedestrian_run+0x1b8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	2007      	movs	r0, #7
 8000f18:	f000 f9f8 	bl	800130c <set_timer>
		}


		if(is_timer_timeout( TIMER_PEDESTRIAN )){
 8000f1c:	2007      	movs	r0, #7
 8000f1e:	f000 fa3b 	bl	8001398 <is_timer_timeout>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <fsm_pedestrian_run+0xbe>
			turn_off_led_PED();
 8000f28:	f7ff ff90 	bl	8000e4c <turn_off_led_PED>
			state_of_pedestrian = OFF_PEDESTRIAN;
 8000f2c:	4b3b      	ldr	r3, [pc, #236]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000f2e:	221e      	movs	r2, #30
 8000f30:	601a      	str	r2, [r3, #0]
		}


		if(state_led_traffic_1 == RED){
 8000f32:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <fsm_pedestrian_run+0x1bc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b0a      	cmp	r3, #10
 8000f38:	d105      	bne.n	8000f46 <fsm_pedestrian_run+0xd2>
			state_of_pedestrian = GREEN_PEDESTRIAN;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	601a      	str	r2, [r3, #0]
			turn_on_led_PED(GREEN);
 8000f40:	200c      	movs	r0, #12
 8000f42:	f7ff ff41 	bl	8000dc8 <turn_on_led_PED>
		}

		if(mode != NORMAL_MODE){
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <fsm_pedestrian_run+0x1c0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d05e      	beq.n	800100c <fsm_pedestrian_run+0x198>
			clear_timer( TIMER_PEDESTRIAN );
 8000f4e:	2007      	movs	r0, #7
 8000f50:	f000 f9f6 	bl	8001340 <clear_timer>
			turn_on_led_PED(YELLOW);
 8000f54:	200b      	movs	r0, #11
 8000f56:	f7ff ff37 	bl	8000dc8 <turn_on_led_PED>
			state_of_pedestrian = YELLOW_PEDESTRIAN;
 8000f5a:	4b30      	ldr	r3, [pc, #192]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000f5c:	2221      	movs	r2, #33	; 0x21
 8000f5e:	601a      	str	r2, [r3, #0]
		}


	break;
 8000f60:	e054      	b.n	800100c <fsm_pedestrian_run+0x198>
	case GREEN_PEDESTRIAN:


		if(is_pressed( BUTTON_0 )){
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff f8f2 	bl	800014c <is_pressed>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d005      	beq.n	8000f7a <fsm_pedestrian_run+0x106>
			set_timer(TIMER_PEDESTRIAN ,cycle_of_pedestrian);
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <fsm_pedestrian_run+0x1b8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4619      	mov	r1, r3
 8000f74:	2007      	movs	r0, #7
 8000f76:	f000 f9c9 	bl	800130c <set_timer>
		}
// bat loa khi chi con 1 khoang thoi gian cuoi
		if(get_time_of_counter(TIMER_LED_TRAFFIC_1) <= safe_time && state_led_traffic_1 == RED){
 8000f7a:	2004      	movs	r0, #4
 8000f7c:	f000 f9f8 	bl	8001370 <get_time_of_counter>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <fsm_pedestrian_run+0x1c4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	dc09      	bgt.n	8000f9e <fsm_pedestrian_run+0x12a>
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <fsm_pedestrian_run+0x1bc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b0a      	cmp	r3, #10
 8000f90:	d105      	bne.n	8000f9e <fsm_pedestrian_run+0x12a>
			if(buzzer_flag == 0) turn_on_buzzer();
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <fsm_pedestrian_run+0x1c8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <fsm_pedestrian_run+0x12a>
 8000f9a:	f7ff fee3 	bl	8000d64 <turn_on_buzzer>
		}

		if(is_timer_timeout( TIMER_PEDESTRIAN )){
 8000f9e:	2007      	movs	r0, #7
 8000fa0:	f000 f9fa 	bl	8001398 <is_timer_timeout>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <fsm_pedestrian_run+0x144>
			turn_off_buzzer();
 8000faa:	f7ff fef7 	bl	8000d9c <turn_off_buzzer>
			turn_off_led_PED();
 8000fae:	f7ff ff4d 	bl	8000e4c <turn_off_led_PED>
			state_of_pedestrian = OFF_PEDESTRIAN;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000fb4:	221e      	movs	r2, #30
 8000fb6:	601a      	str	r2, [r3, #0]
		}

		if(state_led_traffic_1 != RED){
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <fsm_pedestrian_run+0x1bc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b0a      	cmp	r3, #10
 8000fbe:	d007      	beq.n	8000fd0 <fsm_pedestrian_run+0x15c>
			turn_off_buzzer();
 8000fc0:	f7ff feec 	bl	8000d9c <turn_off_buzzer>
			state_of_pedestrian = RED_PEDESTRIAN;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000fc6:	221f      	movs	r2, #31
 8000fc8:	601a      	str	r2, [r3, #0]
			turn_on_led_PED(RED);
 8000fca:	200a      	movs	r0, #10
 8000fcc:	f7ff fefc 	bl	8000dc8 <turn_on_led_PED>
		}

		if(mode != NORMAL_MODE){
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <fsm_pedestrian_run+0x1c0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d01b      	beq.n	8001010 <fsm_pedestrian_run+0x19c>
			turn_off_buzzer();
 8000fd8:	f7ff fee0 	bl	8000d9c <turn_off_buzzer>
			clear_timer( TIMER_PEDESTRIAN );
 8000fdc:	2007      	movs	r0, #7
 8000fde:	f000 f9af 	bl	8001340 <clear_timer>
			turn_on_led_PED(YELLOW);
 8000fe2:	200b      	movs	r0, #11
 8000fe4:	f7ff fef0 	bl	8000dc8 <turn_on_led_PED>
			state_of_pedestrian = YELLOW_PEDESTRIAN;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000fea:	2221      	movs	r2, #33	; 0x21
 8000fec:	601a      	str	r2, [r3, #0]
		}
	break;
 8000fee:	e00f      	b.n	8001010 <fsm_pedestrian_run+0x19c>

	case YELLOW_PEDESTRIAN:
		if(mode == NORMAL_MODE){
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <fsm_pedestrian_run+0x1c0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d10d      	bne.n	8001014 <fsm_pedestrian_run+0x1a0>
			turn_off_led_PED();
 8000ff8:	f7ff ff28 	bl	8000e4c <turn_off_led_PED>
			state_of_pedestrian = OFF_PEDESTRIAN;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <fsm_pedestrian_run+0x1a8>)
 8000ffe:	221e      	movs	r2, #30
 8001000:	601a      	str	r2, [r3, #0]
		}
	break;
 8001002:	e007      	b.n	8001014 <fsm_pedestrian_run+0x1a0>
	default:

	break;
 8001004:	bf00      	nop
 8001006:	e006      	b.n	8001016 <fsm_pedestrian_run+0x1a2>
	break;
 8001008:	bf00      	nop
 800100a:	e004      	b.n	8001016 <fsm_pedestrian_run+0x1a2>
	break;
 800100c:	bf00      	nop
 800100e:	e002      	b.n	8001016 <fsm_pedestrian_run+0x1a2>
	break;
 8001010:	bf00      	nop
 8001012:	e000      	b.n	8001016 <fsm_pedestrian_run+0x1a2>
	break;
 8001014:	bf00      	nop
	}


}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000068 	.word	0x20000068
 8001020:	20000058 	.word	0x20000058
 8001024:	2000005c 	.word	0x2000005c
 8001028:	20000060 	.word	0x20000060
 800102c:	2000006c 	.word	0x2000006c
 8001030:	20000050 	.word	0x20000050
 8001034:	20000124 	.word	0x20000124
 8001038:	20000070 	.word	0x20000070
 800103c:	20000134 	.word	0x20000134

08001040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_MspInit+0x5c>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_MspInit+0x5c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_MspInit+0x5c>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x5c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_MspInit+0x5c>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x5c>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_MspInit+0x60>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_MspInit+0x60>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000

080010a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b4:	d114      	bne.n	80010e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	201c      	movs	r0, #28
 80010d4:	f000 fbdf 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010d8:	201c      	movs	r0, #28
 80010da:	f000 fbf8 	bl	80018ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010de:	e010      	b.n	8001102 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_TIM_Base_MspInit+0x6c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10b      	bne.n	8001102 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_TIM_Base_MspInit+0x68>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	40000400 	.word	0x40000400

08001114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_TIM_MspPostInit+0x58>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d117      	bne.n	8001164 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_TIM_MspPostInit+0x5c>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_TIM_MspPostInit+0x5c>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_TIM_MspPostInit+0x5c>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800114c:	2340      	movs	r3, #64	; 0x40
 800114e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_TIM_MspPostInit+0x60>)
 8001160:	f000 fc80 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001164:	bf00      	nop
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40000400 	.word	0x40000400
 8001170:	40021000 	.word	0x40021000
 8001174:	40010800 	.word	0x40010800

08001178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <HAL_UART_MspInit+0x98>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d137      	bne.n	8001208 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_UART_MspInit+0x9c>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_UART_MspInit+0x9c>)
 800119e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a2:	61d3      	str	r3, [r2, #28]
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_UART_MspInit+0x9c>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_UART_MspInit+0x9c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_UART_MspInit+0x9c>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_UART_MspInit+0x9c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c8:	2304      	movs	r3, #4
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <HAL_UART_MspInit+0xa0>)
 80011dc:	f000 fc42 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011e0:	2308      	movs	r3, #8
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4809      	ldr	r0, [pc, #36]	; (8001218 <HAL_UART_MspInit+0xa0>)
 80011f4:	f000 fc36 	bl	8001a64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	2026      	movs	r0, #38	; 0x26
 80011fe:	f000 fb4a 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001202:	2026      	movs	r0, #38	; 0x26
 8001204:	f000 fb63 	bl	80018ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40004400 	.word	0x40004400
 8001214:	40021000 	.word	0x40021000
 8001218:	40010800 	.word	0x40010800

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f000 fa25 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <TIM2_IRQHandler+0x10>)
 8001272:	f001 fb61 	bl	8002938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000020c 	.word	0x2000020c

08001280 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <USART2_IRQHandler+0x10>)
 8001286:	f002 f9f9 	bl	800367c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000254 	.word	0x20000254

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f002 fdd2 	bl	8003e6c <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20005000 	.word	0x20005000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	2000013c 	.word	0x2000013c
 80012fc:	200002d8 	.word	0x200002d8

08001300 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <set_timer>:
#include "timer.h"

int timer_counter[NUMBER_OF_TIMER] = {0};
int timer_flag[NUMBER_OF_TIMER] = {0};

void set_timer(int index, int duration){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <set_timer+0x2c>)
 800131a:	fb82 1203 	smull	r1, r2, r2, r3
 800131e:	1092      	asrs	r2, r2, #2
 8001320:	17db      	asrs	r3, r3, #31
 8001322:	1ad2      	subs	r2, r2, r3
 8001324:	4905      	ldr	r1, [pc, #20]	; (800133c <set_timer+0x30>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	66666667 	.word	0x66666667
 800133c:	20000140 	.word	0x20000140

08001340 <clear_timer>:
void clear_timer(int index){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <clear_timer+0x28>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2100      	movs	r1, #0
 800134e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 8001352:	4a06      	ldr	r2, [pc, #24]	; (800136c <clear_timer+0x2c>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2100      	movs	r1, #0
 8001358:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000140 	.word	0x20000140
 800136c:	2000017c 	.word	0x2000017c

08001370 <get_time_of_counter>:


int get_time_of_counter(int index){
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	return timer_counter[index]*TIME_CYCLE;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <get_time_of_counter+0x24>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000140 	.word	0x20000140

08001398 <is_timer_timeout>:


int is_timer_timeout(int index){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]){
 80013a0:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <is_timer_timeout+0x30>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <is_timer_timeout+0x22>
		timer_flag[index] = 0;
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <is_timer_timeout+0x30>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2100      	movs	r1, #0
 80013b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <is_timer_timeout+0x24>
	}
	return 0;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000017c 	.word	0x2000017c

080013cc <timer_run>:
void timer_run(){
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	e01c      	b.n	8001412 <timer_run+0x46>
		if(timer_counter[i] > 0){
 80013d8:	4a12      	ldr	r2, [pc, #72]	; (8001424 <timer_run+0x58>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd13      	ble.n	800140c <timer_run+0x40>
			timer_counter[i]--;
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <timer_run+0x58>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	1e5a      	subs	r2, r3, #1
 80013ee:	490d      	ldr	r1, [pc, #52]	; (8001424 <timer_run+0x58>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <timer_run+0x58>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc04      	bgt.n	800140c <timer_run+0x40>
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <timer_run+0x5c>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2101      	movs	r1, #1
 8001408:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3301      	adds	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0e      	cmp	r3, #14
 8001416:	dddf      	ble.n	80013d8 <timer_run+0xc>
		}
	}
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000140 	.word	0x20000140
 8001428:	2000017c 	.word	0x2000017c

0800142c <turn_on_traffic_led_1>:
#include "traffic_led.h"

int is_led_ON = 0;


void turn_on_traffic_led_1(int state){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	switch(state){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d021      	beq.n	800147e <turn_on_traffic_led_1+0x52>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	dc2a      	bgt.n	8001496 <turn_on_traffic_led_1+0x6a>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b0a      	cmp	r3, #10
 8001444:	d003      	beq.n	800144e <turn_on_traffic_led_1+0x22>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0b      	cmp	r3, #11
 800144a:	d00c      	beq.n	8001466 <turn_on_traffic_led_1+0x3a>
		case GREEN:
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
		break;
		default:
		break;
 800144c:	e023      	b.n	8001496 <turn_on_traffic_led_1+0x6a>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800144e:	2201      	movs	r2, #1
 8001450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001454:	4812      	ldr	r0, [pc, #72]	; (80014a0 <turn_on_traffic_led_1+0x74>)
 8001456:	f000 fca0 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2108      	movs	r1, #8
 800145e:	4811      	ldr	r0, [pc, #68]	; (80014a4 <turn_on_traffic_led_1+0x78>)
 8001460:	f000 fc9b 	bl	8001d9a <HAL_GPIO_WritePin>
		break;
 8001464:	e018      	b.n	8001498 <turn_on_traffic_led_1+0x6c>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <turn_on_traffic_led_1+0x74>)
 800146e:	f000 fc94 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2108      	movs	r1, #8
 8001476:	480b      	ldr	r0, [pc, #44]	; (80014a4 <turn_on_traffic_led_1+0x78>)
 8001478:	f000 fc8f 	bl	8001d9a <HAL_GPIO_WritePin>
		break;
 800147c:	e00c      	b.n	8001498 <turn_on_traffic_led_1+0x6c>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <turn_on_traffic_led_1+0x74>)
 8001486:	f000 fc88 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2108      	movs	r1, #8
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <turn_on_traffic_led_1+0x78>)
 8001490:	f000 fc83 	bl	8001d9a <HAL_GPIO_WritePin>
		break;
 8001494:	e000      	b.n	8001498 <turn_on_traffic_led_1+0x6c>
		break;
 8001496:	bf00      	nop
	}
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40010c00 	.word	0x40010c00

080014a8 <turn_off_traffic_led_1>:

void turn_off_traffic_led_1(){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <turn_off_traffic_led_1+0x20>)
 80014b4:	f000 fc71 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2108      	movs	r1, #8
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <turn_off_traffic_led_1+0x24>)
 80014be:	f000 fc6c 	bl	8001d9a <HAL_GPIO_WritePin>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40010800 	.word	0x40010800
 80014cc:	40010c00 	.word	0x40010c00

080014d0 <turn_on_traffic_led_2>:

void turn_on_traffic_led_2(int state){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b0a      	subs	r3, #10
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d839      	bhi.n	8001554 <turn_on_traffic_led_2+0x84>
 80014e0:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <turn_on_traffic_led_2+0x18>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	080014fd 	.word	0x080014fd
 80014ec:	08001513 	.word	0x08001513
 80014f0:	08001529 	.word	0x08001529
 80014f4:	08001555 	.word	0x08001555
 80014f8:	0800153f 	.word	0x0800153f
	switch(state){
		case RED:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2120      	movs	r1, #32
 8001500:	4817      	ldr	r0, [pc, #92]	; (8001560 <turn_on_traffic_led_2+0x90>)
 8001502:	f000 fc4a 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2110      	movs	r1, #16
 800150a:	4815      	ldr	r0, [pc, #84]	; (8001560 <turn_on_traffic_led_2+0x90>)
 800150c:	f000 fc45 	bl	8001d9a <HAL_GPIO_WritePin>
		break;
 8001510:	e021      	b.n	8001556 <turn_on_traffic_led_2+0x86>
		case YELLOW:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001512:	2201      	movs	r2, #1
 8001514:	2120      	movs	r1, #32
 8001516:	4812      	ldr	r0, [pc, #72]	; (8001560 <turn_on_traffic_led_2+0x90>)
 8001518:	f000 fc3f 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800151c:	2201      	movs	r2, #1
 800151e:	2110      	movs	r1, #16
 8001520:	480f      	ldr	r0, [pc, #60]	; (8001560 <turn_on_traffic_led_2+0x90>)
 8001522:	f000 fc3a 	bl	8001d9a <HAL_GPIO_WritePin>
		break;
 8001526:	e016      	b.n	8001556 <turn_on_traffic_led_2+0x86>
		case GREEN:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2120      	movs	r1, #32
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <turn_on_traffic_led_2+0x90>)
 800152e:	f000 fc34 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8001532:	2201      	movs	r2, #1
 8001534:	2110      	movs	r1, #16
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <turn_on_traffic_led_2+0x90>)
 8001538:	f000 fc2f 	bl	8001d9a <HAL_GPIO_WritePin>
		break;
 800153c:	e00b      	b.n	8001556 <turn_on_traffic_led_2+0x86>
		case OFF:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2120      	movs	r1, #32
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <turn_on_traffic_led_2+0x90>)
 8001544:	f000 fc29 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2110      	movs	r1, #16
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <turn_on_traffic_led_2+0x90>)
 800154e:	f000 fc24 	bl	8001d9a <HAL_GPIO_WritePin>
		break;
 8001552:	e000      	b.n	8001556 <turn_on_traffic_led_2+0x86>
		default:
		break;
 8001554:	bf00      	nop
	}
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40010c00 	.word	0x40010c00

08001564 <turn_off_traffic_led_2>:
void turn_off_traffic_led_2(){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2120      	movs	r1, #32
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <turn_off_traffic_led_2+0x1c>)
 800156e:	f000 fc14 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2110      	movs	r1, #16
 8001576:	4802      	ldr	r0, [pc, #8]	; (8001580 <turn_off_traffic_led_2+0x1c>)
 8001578:	f000 fc0f 	bl	8001d9a <HAL_GPIO_WritePin>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40010c00 	.word	0x40010c00

08001584 <blinking_led_traffic>:

void blinking_led_traffic(int state){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	if(is_timer_timeout( TIMER_BLINKING_LED )){
 800158c:	2006      	movs	r0, #6
 800158e:	f7ff ff03 	bl	8001398 <is_timer_timeout>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d019      	beq.n	80015cc <blinking_led_traffic+0x48>
		if(is_led_ON){
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <blinking_led_traffic+0x50>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <blinking_led_traffic+0x30>
			turn_on_traffic_led_1(state);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff43 	bl	800142c <turn_on_traffic_led_1>
			turn_on_traffic_led_2(state);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff92 	bl	80014d0 <turn_on_traffic_led_2>
			is_led_ON= 0;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <blinking_led_traffic+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e006      	b.n	80015c2 <blinking_led_traffic+0x3e>
		}
		else{
			turn_off_traffic_led_1();
 80015b4:	f7ff ff78 	bl	80014a8 <turn_off_traffic_led_1>
			turn_off_traffic_led_2();
 80015b8:	f7ff ffd4 	bl	8001564 <turn_off_traffic_led_2>
			is_led_ON = 1;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <blinking_led_traffic+0x50>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
		}
		set_timer(TIMER_BLINKING_LED, 500);
 80015c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015c6:	2006      	movs	r0, #6
 80015c8:	f7ff fea0 	bl	800130c <set_timer>
	}
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200001b8 	.word	0x200001b8

080015d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015da:	490d      	ldr	r1, [pc, #52]	; (8001610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f0:	4c0a      	ldr	r4, [pc, #40]	; (800161c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015fe:	f7ff fe7f 	bl	8001300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001602:	f002 fc39 	bl	8003e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001606:	f7ff f96b 	bl	80008e0 <main>
  bx lr
 800160a:	4770      	bx	lr
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001614:	080047cc 	.word	0x080047cc
  ldr r2, =_sbss
 8001618:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 800161c:	200002d4 	.word	0x200002d4

08001620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC1_2_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x28>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x28>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 f923 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	200f      	movs	r0, #15
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fcfe 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f93b 	bl	80018ea <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 f903 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000078 	.word	0x20000078
 80016a8:	20000080 	.word	0x20000080
 80016ac:	2000007c 	.word	0x2000007c

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x1c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x20>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <HAL_IncTick+0x20>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000080 	.word	0x20000080
 80016d0:	200002c0 	.word	0x200002c0

080016d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_GetTick+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	200002c0 	.word	0x200002c0

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4906      	ldr	r1, [pc, #24]	; (8001780 <__NVIC_EnableIRQ+0x34>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff90 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff2d 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff42 	bl	8001730 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff90 	bl	80017d8 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5f 	bl	8001784 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff35 	bl	800174c <__NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffa2 	bl	800183c <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001914:	2b02      	cmp	r3, #2
 8001916:	d008      	beq.n	800192a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2204      	movs	r2, #4
 800191c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e020      	b.n	800196c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 020e 	bic.w	r2, r2, #14
 8001938:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0201 	bic.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f202 	lsl.w	r2, r1, r2
 8001958:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
	...

08001978 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800198a:	2b02      	cmp	r3, #2
 800198c:	d005      	beq.n	800199a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2204      	movs	r2, #4
 8001992:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	e051      	b.n	8001a3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 020e 	bic.w	r2, r2, #14
 80019a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <HAL_DMA_Abort_IT+0xd0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d029      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xa0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <HAL_DMA_Abort_IT+0xd4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d022      	beq.n	8001a14 <HAL_DMA_Abort_IT+0x9c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <HAL_DMA_Abort_IT+0xd8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d01a      	beq.n	8001a0e <HAL_DMA_Abort_IT+0x96>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_DMA_Abort_IT+0xdc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d012      	beq.n	8001a08 <HAL_DMA_Abort_IT+0x90>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <HAL_DMA_Abort_IT+0xe0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00a      	beq.n	8001a02 <HAL_DMA_Abort_IT+0x8a>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_DMA_Abort_IT+0xe4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d102      	bne.n	80019fc <HAL_DMA_Abort_IT+0x84>
 80019f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019fa:	e00e      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 80019fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a00:	e00b      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 8001a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a06:	e008      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 8001a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0c:	e005      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 8001a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a12:	e002      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 8001a14:	2310      	movs	r3, #16
 8001a16:	e000      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_DMA_Abort_IT+0xe8>)
 8001a1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
    } 
  }
  return status;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40020008 	.word	0x40020008
 8001a4c:	4002001c 	.word	0x4002001c
 8001a50:	40020030 	.word	0x40020030
 8001a54:	40020044 	.word	0x40020044
 8001a58:	40020058 	.word	0x40020058
 8001a5c:	4002006c 	.word	0x4002006c
 8001a60:	40020000 	.word	0x40020000

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b08b      	sub	sp, #44	; 0x2c
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a76:	e169      	b.n	8001d4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 8158 	bne.w	8001d46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a9a      	ldr	r2, [pc, #616]	; (8001d04 <HAL_GPIO_Init+0x2a0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d05e      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001aa0:	4a98      	ldr	r2, [pc, #608]	; (8001d04 <HAL_GPIO_Init+0x2a0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d875      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001aa6:	4a98      	ldr	r2, [pc, #608]	; (8001d08 <HAL_GPIO_Init+0x2a4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d058      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001aac:	4a96      	ldr	r2, [pc, #600]	; (8001d08 <HAL_GPIO_Init+0x2a4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d86f      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ab2:	4a96      	ldr	r2, [pc, #600]	; (8001d0c <HAL_GPIO_Init+0x2a8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d052      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ab8:	4a94      	ldr	r2, [pc, #592]	; (8001d0c <HAL_GPIO_Init+0x2a8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d869      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001abe:	4a94      	ldr	r2, [pc, #592]	; (8001d10 <HAL_GPIO_Init+0x2ac>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d04c      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ac4:	4a92      	ldr	r2, [pc, #584]	; (8001d10 <HAL_GPIO_Init+0x2ac>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d863      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001aca:	4a92      	ldr	r2, [pc, #584]	; (8001d14 <HAL_GPIO_Init+0x2b0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d046      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ad0:	4a90      	ldr	r2, [pc, #576]	; (8001d14 <HAL_GPIO_Init+0x2b0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d85d      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ad6:	2b12      	cmp	r3, #18
 8001ad8:	d82a      	bhi.n	8001b30 <HAL_GPIO_Init+0xcc>
 8001ada:	2b12      	cmp	r3, #18
 8001adc:	d859      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ade:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <HAL_GPIO_Init+0x80>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001b5f 	.word	0x08001b5f
 8001ae8:	08001b39 	.word	0x08001b39
 8001aec:	08001b4b 	.word	0x08001b4b
 8001af0:	08001b8d 	.word	0x08001b8d
 8001af4:	08001b93 	.word	0x08001b93
 8001af8:	08001b93 	.word	0x08001b93
 8001afc:	08001b93 	.word	0x08001b93
 8001b00:	08001b93 	.word	0x08001b93
 8001b04:	08001b93 	.word	0x08001b93
 8001b08:	08001b93 	.word	0x08001b93
 8001b0c:	08001b93 	.word	0x08001b93
 8001b10:	08001b93 	.word	0x08001b93
 8001b14:	08001b93 	.word	0x08001b93
 8001b18:	08001b93 	.word	0x08001b93
 8001b1c:	08001b93 	.word	0x08001b93
 8001b20:	08001b93 	.word	0x08001b93
 8001b24:	08001b93 	.word	0x08001b93
 8001b28:	08001b41 	.word	0x08001b41
 8001b2c:	08001b55 	.word	0x08001b55
 8001b30:	4a79      	ldr	r2, [pc, #484]	; (8001d18 <HAL_GPIO_Init+0x2b4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b36:	e02c      	b.n	8001b92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e029      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	3304      	adds	r3, #4
 8001b46:	623b      	str	r3, [r7, #32]
          break;
 8001b48:	e024      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e01f      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	330c      	adds	r3, #12
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e01a      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b66:	2304      	movs	r3, #4
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e013      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b74:	2308      	movs	r3, #8
 8001b76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	611a      	str	r2, [r3, #16]
          break;
 8001b7e:	e009      	b.n	8001b94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b80:	2308      	movs	r3, #8
 8001b82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	615a      	str	r2, [r3, #20]
          break;
 8001b8a:	e003      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
          break;
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          break;
 8001b92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d801      	bhi.n	8001b9e <HAL_GPIO_Init+0x13a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	e001      	b.n	8001ba2 <HAL_GPIO_Init+0x13e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d802      	bhi.n	8001bb0 <HAL_GPIO_Init+0x14c>
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	e002      	b.n	8001bb6 <HAL_GPIO_Init+0x152>
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	3b08      	subs	r3, #8
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80b1 	beq.w	8001d46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be4:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a4c      	ldr	r2, [pc, #304]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bfc:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_GPIO_Init+0x2bc>)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <HAL_GPIO_Init+0x2c0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_GPIO_Init+0x1ec>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3f      	ldr	r2, [pc, #252]	; (8001d28 <HAL_GPIO_Init+0x2c4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00d      	beq.n	8001c4c <HAL_GPIO_Init+0x1e8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3e      	ldr	r2, [pc, #248]	; (8001d2c <HAL_GPIO_Init+0x2c8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x1e4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3d      	ldr	r2, [pc, #244]	; (8001d30 <HAL_GPIO_Init+0x2cc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_GPIO_Init+0x1e0>
 8001c40:	2303      	movs	r3, #3
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e004      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c50:	2300      	movs	r3, #0
 8001c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c54:	f002 0203 	and.w	r2, r2, #3
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c62:	492f      	ldr	r1, [pc, #188]	; (8001d20 <HAL_GPIO_Init+0x2bc>)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	492c      	ldr	r1, [pc, #176]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4928      	ldr	r1, [pc, #160]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4922      	ldr	r1, [pc, #136]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	491e      	ldr	r1, [pc, #120]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4918      	ldr	r1, [pc, #96]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4914      	ldr	r1, [pc, #80]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d021      	beq.n	8001d38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	490e      	ldr	r1, [pc, #56]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	e021      	b.n	8001d46 <HAL_GPIO_Init+0x2e2>
 8001d02:	bf00      	nop
 8001d04:	10320000 	.word	0x10320000
 8001d08:	10310000 	.word	0x10310000
 8001d0c:	10220000 	.word	0x10220000
 8001d10:	10210000 	.word	0x10210000
 8001d14:	10120000 	.word	0x10120000
 8001d18:	10110000 	.word	0x10110000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40010800 	.word	0x40010800
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40011000 	.word	0x40011000
 8001d30:	40011400 	.word	0x40011400
 8001d34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	4909      	ldr	r1, [pc, #36]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	3301      	adds	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f47f ae8e 	bne.w	8001a78 <HAL_GPIO_Init+0x14>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	372c      	adds	r7, #44	; 0x2c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e001      	b.n	8001d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
 8001da6:	4613      	mov	r3, r2
 8001da8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001daa:	787b      	ldrb	r3, [r7, #1]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db6:	e003      	b.n	8001dc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	041a      	lsls	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e26c      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8087 	beq.w	8001efa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dec:	4b92      	ldr	r3, [pc, #584]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d00c      	beq.n	8001e12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df8:	4b8f      	ldr	r3, [pc, #572]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d112      	bne.n	8001e2a <HAL_RCC_OscConfig+0x5e>
 8001e04:	4b8c      	ldr	r3, [pc, #560]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e10:	d10b      	bne.n	8001e2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e12:	4b89      	ldr	r3, [pc, #548]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d06c      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x12c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d168      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e246      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x76>
 8001e34:	4b80      	ldr	r3, [pc, #512]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a7f      	ldr	r2, [pc, #508]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	e02e      	b.n	8001ea0 <HAL_RCC_OscConfig+0xd4>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b7b      	ldr	r3, [pc, #492]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a7a      	ldr	r2, [pc, #488]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b78      	ldr	r3, [pc, #480]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a77      	ldr	r2, [pc, #476]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e01d      	b.n	8001ea0 <HAL_RCC_OscConfig+0xd4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0xbc>
 8001e6e:	4b72      	ldr	r3, [pc, #456]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a71      	ldr	r2, [pc, #452]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b6f      	ldr	r3, [pc, #444]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6e      	ldr	r2, [pc, #440]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0xd4>
 8001e88:	4b6b      	ldr	r3, [pc, #428]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a67      	ldr	r2, [pc, #412]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fc14 	bl	80016d4 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fc10 	bl	80016d4 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1fa      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xe4>
 8001ece:	e014      	b.n	8001efa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fc00 	bl	80016d4 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fbfc 	bl	80016d4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1e6      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x10c>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d063      	beq.n	8001fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f06:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f12:	4b49      	ldr	r3, [pc, #292]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d11c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x18c>
 8001f1e:	4b46      	ldr	r3, [pc, #280]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x176>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1ba      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4939      	ldr	r1, [pc, #228]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	e03a      	b.n	8001fce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fbb5 	bl	80016d4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fbb1 	bl	80016d4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e19b      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4927      	ldr	r1, [pc, #156]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fb94 	bl	80016d4 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fb90 	bl	80016d4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e17a      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03a      	beq.n	8002050 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d019      	beq.n	8002016 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe8:	f7ff fb74 	bl	80016d4 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7ff fb70 	bl	80016d4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e15a      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800200e:	2001      	movs	r0, #1
 8002010:	f000 fad8 	bl	80025c4 <RCC_Delay>
 8002014:	e01c      	b.n	8002050 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_OscConfig+0x274>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7ff fb5a 	bl	80016d4 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002022:	e00f      	b.n	8002044 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff fb56 	bl	80016d4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d908      	bls.n	8002044 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e140      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	42420000 	.word	0x42420000
 8002040:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	4b9e      	ldr	r3, [pc, #632]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e9      	bne.n	8002024 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80a6 	beq.w	80021aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b97      	ldr	r3, [pc, #604]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b94      	ldr	r3, [pc, #592]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a93      	ldr	r2, [pc, #588]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]
 800207a:	4b91      	ldr	r3, [pc, #580]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002086:	2301      	movs	r3, #1
 8002088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b8e      	ldr	r3, [pc, #568]	; (80022c4 <HAL_RCC_OscConfig+0x4f8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d118      	bne.n	80020c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002096:	4b8b      	ldr	r3, [pc, #556]	; (80022c4 <HAL_RCC_OscConfig+0x4f8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a8a      	ldr	r2, [pc, #552]	; (80022c4 <HAL_RCC_OscConfig+0x4f8>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7ff fb17 	bl	80016d4 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7ff fb13 	bl	80016d4 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b64      	cmp	r3, #100	; 0x64
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0fd      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b81      	ldr	r3, [pc, #516]	; (80022c4 <HAL_RCC_OscConfig+0x4f8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x312>
 80020d0:	4b7b      	ldr	r3, [pc, #492]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a7a      	ldr	r2, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	e02d      	b.n	800213a <HAL_RCC_OscConfig+0x36e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x334>
 80020e6:	4b76      	ldr	r3, [pc, #472]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4a75      	ldr	r2, [pc, #468]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6213      	str	r3, [r2, #32]
 80020f2:	4b73      	ldr	r3, [pc, #460]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a72      	ldr	r2, [pc, #456]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	f023 0304 	bic.w	r3, r3, #4
 80020fc:	6213      	str	r3, [r2, #32]
 80020fe:	e01c      	b.n	800213a <HAL_RCC_OscConfig+0x36e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x356>
 8002108:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4a6c      	ldr	r2, [pc, #432]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6213      	str	r3, [r2, #32]
 8002114:	4b6a      	ldr	r3, [pc, #424]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a69      	ldr	r2, [pc, #420]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6213      	str	r3, [r2, #32]
 8002120:	e00b      	b.n	800213a <HAL_RCC_OscConfig+0x36e>
 8002122:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a66      	ldr	r2, [pc, #408]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	4b64      	ldr	r3, [pc, #400]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d015      	beq.n	800216e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002142:	f7ff fac7 	bl	80016d4 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7ff fac3 	bl	80016d4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0ab      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ee      	beq.n	800214a <HAL_RCC_OscConfig+0x37e>
 800216c:	e014      	b.n	8002198 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff fab1 	bl	80016d4 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7ff faad 	bl	80016d4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e095      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ee      	bne.n	8002176 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4b48      	ldr	r3, [pc, #288]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8081 	beq.w	80022b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b4:	4b42      	ldr	r3, [pc, #264]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d061      	beq.n	8002284 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d146      	bne.n	8002256 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_OscConfig+0x4fc>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff fa81 	bl	80016d4 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d6:	f7ff fa7d 	bl	80016d4 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e067      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e8:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d108      	bne.n	8002210 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021fe:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	492d      	ldr	r1, [pc, #180]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002210:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a19      	ldr	r1, [r3, #32]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	430b      	orrs	r3, r1
 8002222:	4927      	ldr	r1, [pc, #156]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x4fc>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff fa51 	bl	80016d4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7ff fa4d 	bl	80016d4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e037      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x46a>
 8002254:	e02f      	b.n	80022b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_RCC_OscConfig+0x4fc>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fa3a 	bl	80016d4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff fa36 	bl	80016d4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e020      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x498>
 8002282:	e018      	b.n	80022b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e013      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42420060 	.word	0x42420060

080022cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0d0      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d910      	bls.n	8002310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	4965      	ldr	r1, [pc, #404]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800234a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d040      	beq.n	80023ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e073      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06b      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023aa:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f023 0203 	bic.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4936      	ldr	r1, [pc, #216]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023bc:	f7ff f98a 	bl	80016d4 <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	e00a      	b.n	80023da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7ff f986 	bl	80016d4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e053      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 020c 	and.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1eb      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d210      	bcs.n	800241c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4922      	ldr	r1, [pc, #136]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	; (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1cc>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f8e8 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40021000 	.word	0x40021000
 8002494:	08004778 	.word	0x08004778
 8002498:	20000078 	.word	0x20000078
 800249c:	2000007c 	.word	0x2000007c

080024a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	b490      	push	{r4, r7}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024a8:	1d3c      	adds	r4, r7, #4
 80024aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024b0:	f240 2301 	movw	r3, #513	; 0x201
 80024b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ca:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d002      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x40>
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0x46>
 80024de:	e02d      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e2:	623b      	str	r3, [r7, #32]
      break;
 80024e4:	e02d      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	0c9b      	lsrs	r3, r3, #18
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024f2:	4413      	add	r3, r2
 80024f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	0c5b      	lsrs	r3, r3, #17
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002512:	4413      	add	r3, r2
 8002514:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002518:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_RCC_GetSysClockFreq+0xb8>)
 800251e:	fb02 f203 	mul.w	r2, r2, r3
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	e004      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	4a0b      	ldr	r2, [pc, #44]	; (800255c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002530:	fb02 f303 	mul.w	r3, r2, r3
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	623b      	str	r3, [r7, #32]
      break;
 800253a:	e002      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_GetSysClockFreq+0xb8>)
 800253e:	623b      	str	r3, [r7, #32]
      break;
 8002540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002542:	6a3b      	ldr	r3, [r7, #32]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bc90      	pop	{r4, r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	08004768 	.word	0x08004768
 8002554:	40021000 	.word	0x40021000
 8002558:	007a1200 	.word	0x007a1200
 800255c:	003d0900 	.word	0x003d0900

08002560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002564:	4b02      	ldr	r3, [pc, #8]	; (8002570 <HAL_RCC_GetHCLKFreq+0x10>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	20000078 	.word	0x20000078

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002578:	f7ff fff2 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4903      	ldr	r1, [pc, #12]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	08004788 	.word	0x08004788

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025a0:	f7ff ffde 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0adb      	lsrs	r3, r3, #11
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08004788 	.word	0x08004788

080025c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <RCC_Delay+0x34>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <RCC_Delay+0x38>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0a5b      	lsrs	r3, r3, #9
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025e0:	bf00      	nop
  }
  while (Delay --);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	60fa      	str	r2, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f9      	bne.n	80025e0 <RCC_Delay+0x1c>
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	20000078 	.word	0x20000078
 80025fc:	10624dd3 	.word	0x10624dd3

08002600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e041      	b.n	8002696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe fd3c 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f000 fc28 	bl	8002e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d001      	beq.n	80026b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e03a      	b.n	800272e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a18      	ldr	r2, [pc, #96]	; (8002738 <HAL_TIM_Base_Start_IT+0x98>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x58>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e2:	d009      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x58>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a14      	ldr	r2, [pc, #80]	; (800273c <HAL_TIM_Base_Start_IT+0x9c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x58>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <HAL_TIM_Base_Start_IT+0xa0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d111      	bne.n	800271c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b06      	cmp	r3, #6
 8002708:	d010      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	e007      	b.n	800272c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40000400 	.word	0x40000400
 8002740:	40000800 	.word	0x40000800

08002744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e041      	b.n	80027da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f839 	bl	80027e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3304      	adds	r3, #4
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f000 fb86 	bl	8002e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HAL_TIM_PWM_Start+0x24>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	bf14      	ite	ne
 8002810:	2301      	movne	r3, #1
 8002812:	2300      	moveq	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	e022      	b.n	800285e <HAL_TIM_PWM_Start+0x6a>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b04      	cmp	r3, #4
 800281c:	d109      	bne.n	8002832 <HAL_TIM_PWM_Start+0x3e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b01      	cmp	r3, #1
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	e015      	b.n	800285e <HAL_TIM_PWM_Start+0x6a>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d109      	bne.n	800284c <HAL_TIM_PWM_Start+0x58>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e008      	b.n	800285e <HAL_TIM_PWM_Start+0x6a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e05e      	b.n	8002924 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d104      	bne.n	8002876 <HAL_TIM_PWM_Start+0x82>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002874:	e013      	b.n	800289e <HAL_TIM_PWM_Start+0xaa>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b04      	cmp	r3, #4
 800287a:	d104      	bne.n	8002886 <HAL_TIM_PWM_Start+0x92>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002884:	e00b      	b.n	800289e <HAL_TIM_PWM_Start+0xaa>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d104      	bne.n	8002896 <HAL_TIM_PWM_Start+0xa2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002894:	e003      	b.n	800289e <HAL_TIM_PWM_Start+0xaa>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2201      	movs	r2, #1
 80028a4:	6839      	ldr	r1, [r7, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fd74 	bl	8003394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_TIM_PWM_Start+0x138>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d107      	bne.n	80028c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a18      	ldr	r2, [pc, #96]	; (800292c <HAL_TIM_PWM_Start+0x138>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00e      	beq.n	80028ee <HAL_TIM_PWM_Start+0xfa>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d009      	beq.n	80028ee <HAL_TIM_PWM_Start+0xfa>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a14      	ldr	r2, [pc, #80]	; (8002930 <HAL_TIM_PWM_Start+0x13c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d004      	beq.n	80028ee <HAL_TIM_PWM_Start+0xfa>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a12      	ldr	r2, [pc, #72]	; (8002934 <HAL_TIM_PWM_Start+0x140>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d111      	bne.n	8002912 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b06      	cmp	r3, #6
 80028fe:	d010      	beq.n	8002922 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	e007      	b.n	8002922 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800

08002938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b02      	cmp	r3, #2
 800294c:	d122      	bne.n	8002994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d11b      	bne.n	8002994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0202 	mvn.w	r2, #2
 8002964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa6f 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 8002980:	e005      	b.n	800298e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa62 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fa71 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d122      	bne.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d11b      	bne.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0204 	mvn.w	r2, #4
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa45 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa38 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fa47 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d122      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d11b      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0208 	mvn.w	r2, #8
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2204      	movs	r2, #4
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa1b 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fa0e 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fa1d 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0210 	mvn.w	r2, #16
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2208      	movs	r2, #8
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9f1 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9e4 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f9f3 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10e      	bne.n	8002abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d107      	bne.n	8002abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0201 	mvn.w	r2, #1
 8002ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe f8d8 	bl	8000c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	2b80      	cmp	r3, #128	; 0x80
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d107      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fce1 	bl	80034aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b40      	cmp	r3, #64	; 0x40
 8002af4:	d10e      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b00:	2b40      	cmp	r3, #64	; 0x40
 8002b02:	d107      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f9b7 	bl	8002e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d10e      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d107      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0220 	mvn.w	r2, #32
 8002b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fcac 	bl	8003498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e0ac      	b.n	8002cbc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b0c      	cmp	r3, #12
 8002b6e:	f200 809f 	bhi.w	8002cb0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002bad 	.word	0x08002bad
 8002b7c:	08002cb1 	.word	0x08002cb1
 8002b80:	08002cb1 	.word	0x08002cb1
 8002b84:	08002cb1 	.word	0x08002cb1
 8002b88:	08002bed 	.word	0x08002bed
 8002b8c:	08002cb1 	.word	0x08002cb1
 8002b90:	08002cb1 	.word	0x08002cb1
 8002b94:	08002cb1 	.word	0x08002cb1
 8002b98:	08002c2f 	.word	0x08002c2f
 8002b9c:	08002cb1 	.word	0x08002cb1
 8002ba0:	08002cb1 	.word	0x08002cb1
 8002ba4:	08002cb1 	.word	0x08002cb1
 8002ba8:	08002c6f 	.word	0x08002c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f9d0 	bl	8002f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0208 	orr.w	r2, r2, #8
 8002bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0204 	bic.w	r2, r2, #4
 8002bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6999      	ldr	r1, [r3, #24]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	619a      	str	r2, [r3, #24]
      break;
 8002bea:	e062      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fa16 	bl	8003024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6999      	ldr	r1, [r3, #24]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	021a      	lsls	r2, r3, #8
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	619a      	str	r2, [r3, #24]
      break;
 8002c2c:	e041      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fa5f 	bl	80030f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0208 	orr.w	r2, r2, #8
 8002c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0204 	bic.w	r2, r2, #4
 8002c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69d9      	ldr	r1, [r3, #28]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	61da      	str	r2, [r3, #28]
      break;
 8002c6c:	e021      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 faa9 	bl	80031cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69d9      	ldr	r1, [r3, #28]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	021a      	lsls	r2, r3, #8
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	61da      	str	r2, [r3, #28]
      break;
 8002cae:	e000      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIM_ConfigClockSource+0x18>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e0b3      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x180>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d14:	d03e      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0xd0>
 8002d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1a:	f200 8087 	bhi.w	8002e2c <HAL_TIM_ConfigClockSource+0x168>
 8002d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d22:	f000 8085 	beq.w	8002e30 <HAL_TIM_ConfigClockSource+0x16c>
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	d87f      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x168>
 8002d2c:	2b70      	cmp	r3, #112	; 0x70
 8002d2e:	d01a      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0xa2>
 8002d30:	2b70      	cmp	r3, #112	; 0x70
 8002d32:	d87b      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x168>
 8002d34:	2b60      	cmp	r3, #96	; 0x60
 8002d36:	d050      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0x116>
 8002d38:	2b60      	cmp	r3, #96	; 0x60
 8002d3a:	d877      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x168>
 8002d3c:	2b50      	cmp	r3, #80	; 0x50
 8002d3e:	d03c      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0xf6>
 8002d40:	2b50      	cmp	r3, #80	; 0x50
 8002d42:	d873      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x168>
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d058      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x136>
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d86f      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x168>
 8002d4c:	2b30      	cmp	r3, #48	; 0x30
 8002d4e:	d064      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x156>
 8002d50:	2b30      	cmp	r3, #48	; 0x30
 8002d52:	d86b      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x168>
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d060      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x156>
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d867      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x168>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d05c      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x156>
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d05a      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d64:	e062      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f000 faee 	bl	8003356 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	609a      	str	r2, [r3, #8]
      break;
 8002d92:	e04e      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6899      	ldr	r1, [r3, #8]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f000 fad7 	bl	8003356 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db6:	609a      	str	r2, [r3, #8]
      break;
 8002db8:	e03b      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6859      	ldr	r1, [r3, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f000 fa4e 	bl	8003268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2150      	movs	r1, #80	; 0x50
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 faa5 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 8002dd8:	e02b      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	461a      	mov	r2, r3
 8002de8:	f000 fa6c 	bl	80032c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2160      	movs	r1, #96	; 0x60
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fa95 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 8002df8:	e01b      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f000 fa2e 	bl	8003268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2140      	movs	r1, #64	; 0x40
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fa85 	bl	8003322 <TIM_ITRx_SetConfig>
      break;
 8002e18:	e00b      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f000 fa7c 	bl	8003322 <TIM_ITRx_SetConfig>
        break;
 8002e2a:	e002      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e2c:	bf00      	nop
 8002e2e:	e000      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <TIM_Base_SetConfig+0xb8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00b      	beq.n	8002ec4 <TIM_Base_SetConfig+0x30>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d007      	beq.n	8002ec4 <TIM_Base_SetConfig+0x30>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <TIM_Base_SetConfig+0xbc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <TIM_Base_SetConfig+0x30>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a25      	ldr	r2, [pc, #148]	; (8002f54 <TIM_Base_SetConfig+0xc0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d108      	bne.n	8002ed6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <TIM_Base_SetConfig+0xb8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00b      	beq.n	8002ef6 <TIM_Base_SetConfig+0x62>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d007      	beq.n	8002ef6 <TIM_Base_SetConfig+0x62>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <TIM_Base_SetConfig+0xbc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_Base_SetConfig+0x62>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <TIM_Base_SetConfig+0xc0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d108      	bne.n	8002f08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <TIM_Base_SetConfig+0xb8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d103      	bne.n	8002f3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	615a      	str	r2, [r3, #20]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800

08002f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f023 0201 	bic.w	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f023 0302 	bic.w	r3, r3, #2
 8002fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <TIM_OC1_SetConfig+0xc8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d10c      	bne.n	8002fce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 0308 	bic.w	r3, r3, #8
 8002fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a13      	ldr	r2, [pc, #76]	; (8003020 <TIM_OC1_SetConfig+0xc8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d111      	bne.n	8002ffa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	621a      	str	r2, [r3, #32]
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40012c00 	.word	0x40012c00

08003024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f023 0210 	bic.w	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f023 0320 	bic.w	r3, r3, #32
 800306e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a1d      	ldr	r2, [pc, #116]	; (80030f4 <TIM_OC2_SetConfig+0xd0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d10d      	bne.n	80030a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800308a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800309e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <TIM_OC2_SetConfig+0xd0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d113      	bne.n	80030d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	621a      	str	r2, [r3, #32]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	40012c00 	.word	0x40012c00

080030f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0303 	bic.w	r3, r3, #3
 800312e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <TIM_OC3_SetConfig+0xd0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10d      	bne.n	8003172 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800315c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <TIM_OC3_SetConfig+0xd0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d113      	bne.n	80031a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40012c00 	.word	0x40012c00

080031cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	031b      	lsls	r3, r3, #12
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a0f      	ldr	r2, [pc, #60]	; (8003264 <TIM_OC4_SetConfig+0x98>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d109      	bne.n	8003240 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	019b      	lsls	r3, r3, #6
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	621a      	str	r2, [r3, #32]
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	40012c00 	.word	0x40012c00

08003268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f023 0201 	bic.w	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f023 030a 	bic.w	r3, r3, #10
 80032a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f023 0210 	bic.w	r2, r3, #16
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	031b      	lsls	r3, r3, #12
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003300:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	f043 0307 	orr.w	r3, r3, #7
 8003344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003356:	b480      	push	{r7}
 8003358:	b087      	sub	sp, #28
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003370:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	021a      	lsls	r2, r3, #8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	431a      	orrs	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4313      	orrs	r3, r2
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	609a      	str	r2, [r3, #8]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2201      	movs	r2, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1a      	ldr	r2, [r3, #32]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	401a      	ands	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	431a      	orrs	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e046      	b.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a16      	ldr	r2, [pc, #88]	; (800348c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d009      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a10      	ldr	r2, [pc, #64]	; (8003494 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10c      	bne.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	4313      	orrs	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800

08003498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e03f      	b.n	800354e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd fe48 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2224      	movs	r2, #36	; 0x24
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fc25 	bl	8003d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b08a      	sub	sp, #40	; 0x28
 800355a:	af02      	add	r7, sp, #8
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b20      	cmp	r3, #32
 8003574:	d17c      	bne.n	8003670 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_UART_Transmit+0x2c>
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e075      	b.n	8003672 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_UART_Transmit+0x3e>
 8003590:	2302      	movs	r3, #2
 8003592:	e06e      	b.n	8003672 <HAL_UART_Transmit+0x11c>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2221      	movs	r2, #33	; 0x21
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035aa:	f7fe f893 	bl	80016d4 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c4:	d108      	bne.n	80035d8 <HAL_UART_Transmit+0x82>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e003      	b.n	80035e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035e8:	e02a      	b.n	8003640 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fa11 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e036      	b.n	8003672 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003618:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	3302      	adds	r3, #2
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	e007      	b.n	8003632 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	3301      	adds	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1cf      	bne.n	80035ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2200      	movs	r2, #0
 8003652:	2140      	movs	r1, #64	; 0x40
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f9e1 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e006      	b.n	8003672 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e000      	b.n	8003672 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
  }
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10d      	bne.n	80036ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_UART_IRQHandler+0x52>
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa99 	bl	8003bfe <UART_Receive_IT>
      return;
 80036cc:	e17b      	b.n	80039c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80b1 	beq.w	8003838 <HAL_UART_IRQHandler+0x1bc>
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <HAL_UART_IRQHandler+0x70>
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80a6 	beq.w	8003838 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_UART_IRQHandler+0x90>
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_UART_IRQHandler+0xb0>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f043 0202 	orr.w	r2, r3, #2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_UART_IRQHandler+0xd0>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0204 	orr.w	r2, r3, #4
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00f      	beq.n	8003776 <HAL_UART_IRQHandler+0xfa>
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d104      	bne.n	800376a <HAL_UART_IRQHandler+0xee>
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f043 0208 	orr.w	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 811e 	beq.w	80039bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <HAL_UART_IRQHandler+0x11e>
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fa32 	bl	8003bfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf14      	ite	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	2300      	moveq	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <HAL_UART_IRQHandler+0x146>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d031      	beq.n	8003826 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f974 	bl	8003ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d023      	beq.n	800381e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695a      	ldr	r2, [r3, #20]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d013      	beq.n	8003816 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	4a76      	ldr	r2, [pc, #472]	; (80039cc <HAL_UART_IRQHandler+0x350>)
 80037f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe f8bc 	bl	8001978 <HAL_DMA_Abort_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003810:	4610      	mov	r0, r2
 8003812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	e00e      	b.n	8003834 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8ec 	bl	80039f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	e00a      	b.n	8003834 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8e8 	bl	80039f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	e006      	b.n	8003834 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8e4 	bl	80039f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003832:	e0c3      	b.n	80039bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	bf00      	nop
    return;
 8003836:	e0c1      	b.n	80039bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 80a1 	bne.w	8003984 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 809b 	beq.w	8003984 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8095 	beq.w	8003984 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d04e      	beq.n	800391c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003888:	8a3b      	ldrh	r3, [r7, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8098 	beq.w	80039c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003894:	8a3a      	ldrh	r2, [r7, #16]
 8003896:	429a      	cmp	r2, r3
 8003898:	f080 8092 	bcs.w	80039c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8a3a      	ldrh	r2, [r7, #16]
 80038a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d02b      	beq.n	8003904 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0210 	bic.w	r2, r2, #16
 80038f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd ffff 	bl	8001902 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800390c:	b29b      	uxth	r3, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	b29b      	uxth	r3, r3
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f876 	bl	8003a06 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800391a:	e051      	b.n	80039c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003924:	b29b      	uxth	r3, r3
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d047      	beq.n	80039c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003934:	8a7b      	ldrh	r3, [r7, #18]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d044      	beq.n	80039c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003948:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0210 	bic.w	r2, r2, #16
 8003976:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003978:	8a7b      	ldrh	r3, [r7, #18]
 800397a:	4619      	mov	r1, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f842 	bl	8003a06 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003982:	e01f      	b.n	80039c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <HAL_UART_IRQHandler+0x324>
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8c9 	bl	8003b30 <UART_Transmit_IT>
    return;
 800399e:	e012      	b.n	80039c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <HAL_UART_IRQHandler+0x34a>
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f90a 	bl	8003bce <UART_EndTransmit_IT>
    return;
 80039ba:	e004      	b.n	80039c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80039bc:	bf00      	nop
 80039be:	e002      	b.n	80039c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80039c0:	bf00      	nop
 80039c2:	e000      	b.n	80039c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80039c4:	bf00      	nop
  }
}
 80039c6:	3728      	adds	r7, #40	; 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	08003b09 	.word	0x08003b09

080039d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2c:	e02c      	b.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d028      	beq.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3c:	f7fd fe4a 	bl	80016d4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d21d      	bcs.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e00f      	b.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4013      	ands	r3, r2
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d0c3      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ac6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0210 	bic.w	r2, r2, #16
 8003aee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f7ff ff66 	bl	80039f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b21      	cmp	r3, #33	; 0x21
 8003b42:	d13e      	bne.n	8003bc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4c:	d114      	bne.n	8003b78 <UART_Transmit_IT+0x48>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d110      	bne.n	8003b78 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	1c9a      	adds	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]
 8003b76:	e008      	b.n	8003b8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	1c59      	adds	r1, r3, #1
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6211      	str	r1, [r2, #32]
 8003b82:	781a      	ldrb	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	4619      	mov	r1, r3
 8003b98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10f      	bne.n	8003bbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff feee 	bl	80039d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b086      	sub	sp, #24
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b22      	cmp	r3, #34	; 0x22
 8003c10:	f040 8099 	bne.w	8003d46 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1c:	d117      	bne.n	8003c4e <UART_Receive_IT+0x50>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d113      	bne.n	8003c4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c4c:	e026      	b.n	8003c9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c60:	d007      	beq.n	8003c72 <UART_Receive_IT+0x74>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <UART_Receive_IT+0x82>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e008      	b.n	8003c92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d148      	bne.n	8003d42 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0220 	bic.w	r2, r2, #32
 8003cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d123      	bne.n	8003d38 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0210 	bic.w	r2, r2, #16
 8003d04:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d10a      	bne.n	8003d2a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff fe68 	bl	8003a06 <HAL_UARTEx_RxEventCallback>
 8003d36:	e002      	b.n	8003d3e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fe52 	bl	80039e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e002      	b.n	8003d48 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d8a:	f023 030c 	bic.w	r3, r3, #12
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2c      	ldr	r2, [pc, #176]	; (8003e64 <UART_SetConfig+0x114>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d103      	bne.n	8003dc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7fe fbf0 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	e002      	b.n	8003dc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dc0:	f7fe fbd8 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003dc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009a      	lsls	r2, r3, #2
 8003dd0:	441a      	add	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <UART_SetConfig+0x118>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	0119      	lsls	r1, r3, #4
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009a      	lsls	r2, r3, #2
 8003df0:	441a      	add	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <UART_SetConfig+0x118>)
 8003dfe:	fba3 0302 	umull	r0, r3, r3, r2
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2064      	movs	r0, #100	; 0x64
 8003e06:	fb00 f303 	mul.w	r3, r0, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	3332      	adds	r3, #50	; 0x32
 8003e10:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <UART_SetConfig+0x118>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1c:	4419      	add	r1, r3
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <UART_SetConfig+0x118>)
 8003e36:	fba3 0302 	umull	r0, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2064      	movs	r0, #100	; 0x64
 8003e3e:	fb00 f303 	mul.w	r3, r0, r3
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	3332      	adds	r3, #50	; 0x32
 8003e48:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <UART_SetConfig+0x118>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	f003 020f 	and.w	r2, r3, #15
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	440a      	add	r2, r1
 8003e5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40013800 	.word	0x40013800
 8003e68:	51eb851f 	.word	0x51eb851f

08003e6c <__errno>:
 8003e6c:	4b01      	ldr	r3, [pc, #4]	; (8003e74 <__errno+0x8>)
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000084 	.word	0x20000084

08003e78 <__libc_init_array>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	4d0c      	ldr	r5, [pc, #48]	; (8003eb0 <__libc_init_array+0x38>)
 8003e7e:	4c0d      	ldr	r4, [pc, #52]	; (8003eb4 <__libc_init_array+0x3c>)
 8003e80:	1b64      	subs	r4, r4, r5
 8003e82:	10a4      	asrs	r4, r4, #2
 8003e84:	42a6      	cmp	r6, r4
 8003e86:	d109      	bne.n	8003e9c <__libc_init_array+0x24>
 8003e88:	f000 fc5c 	bl	8004744 <_init>
 8003e8c:	2600      	movs	r6, #0
 8003e8e:	4d0a      	ldr	r5, [pc, #40]	; (8003eb8 <__libc_init_array+0x40>)
 8003e90:	4c0a      	ldr	r4, [pc, #40]	; (8003ebc <__libc_init_array+0x44>)
 8003e92:	1b64      	subs	r4, r4, r5
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	42a6      	cmp	r6, r4
 8003e98:	d105      	bne.n	8003ea6 <__libc_init_array+0x2e>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea0:	4798      	blx	r3
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7ee      	b.n	8003e84 <__libc_init_array+0xc>
 8003ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eaa:	4798      	blx	r3
 8003eac:	3601      	adds	r6, #1
 8003eae:	e7f2      	b.n	8003e96 <__libc_init_array+0x1e>
 8003eb0:	080047c4 	.word	0x080047c4
 8003eb4:	080047c4 	.word	0x080047c4
 8003eb8:	080047c4 	.word	0x080047c4
 8003ebc:	080047c8 	.word	0x080047c8

08003ec0 <memset>:
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4402      	add	r2, r0
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d100      	bne.n	8003eca <memset+0xa>
 8003ec8:	4770      	bx	lr
 8003eca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ece:	e7f9      	b.n	8003ec4 <memset+0x4>

08003ed0 <siprintf>:
 8003ed0:	b40e      	push	{r1, r2, r3}
 8003ed2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ed6:	b500      	push	{lr}
 8003ed8:	b09c      	sub	sp, #112	; 0x70
 8003eda:	ab1d      	add	r3, sp, #116	; 0x74
 8003edc:	9002      	str	r0, [sp, #8]
 8003ede:	9006      	str	r0, [sp, #24]
 8003ee0:	9107      	str	r1, [sp, #28]
 8003ee2:	9104      	str	r1, [sp, #16]
 8003ee4:	4808      	ldr	r0, [pc, #32]	; (8003f08 <siprintf+0x38>)
 8003ee6:	4909      	ldr	r1, [pc, #36]	; (8003f0c <siprintf+0x3c>)
 8003ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eec:	9105      	str	r1, [sp, #20]
 8003eee:	6800      	ldr	r0, [r0, #0]
 8003ef0:	a902      	add	r1, sp, #8
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	f000 f868 	bl	8003fc8 <_svfiprintf_r>
 8003ef8:	2200      	movs	r2, #0
 8003efa:	9b02      	ldr	r3, [sp, #8]
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	b01c      	add	sp, #112	; 0x70
 8003f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f04:	b003      	add	sp, #12
 8003f06:	4770      	bx	lr
 8003f08:	20000084 	.word	0x20000084
 8003f0c:	ffff0208 	.word	0xffff0208

08003f10 <__ssputs_r>:
 8003f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	688e      	ldr	r6, [r1, #8]
 8003f16:	4682      	mov	sl, r0
 8003f18:	429e      	cmp	r6, r3
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	4690      	mov	r8, r2
 8003f1e:	461f      	mov	r7, r3
 8003f20:	d838      	bhi.n	8003f94 <__ssputs_r+0x84>
 8003f22:	898a      	ldrh	r2, [r1, #12]
 8003f24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f28:	d032      	beq.n	8003f90 <__ssputs_r+0x80>
 8003f2a:	6825      	ldr	r5, [r4, #0]
 8003f2c:	6909      	ldr	r1, [r1, #16]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	eba5 0901 	sub.w	r9, r5, r1
 8003f34:	6965      	ldr	r5, [r4, #20]
 8003f36:	444b      	add	r3, r9
 8003f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f40:	106d      	asrs	r5, r5, #1
 8003f42:	429d      	cmp	r5, r3
 8003f44:	bf38      	it	cc
 8003f46:	461d      	movcc	r5, r3
 8003f48:	0553      	lsls	r3, r2, #21
 8003f4a:	d531      	bpl.n	8003fb0 <__ssputs_r+0xa0>
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	f000 fb53 	bl	80045f8 <_malloc_r>
 8003f52:	4606      	mov	r6, r0
 8003f54:	b950      	cbnz	r0, 8003f6c <__ssputs_r+0x5c>
 8003f56:	230c      	movs	r3, #12
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5c:	f8ca 3000 	str.w	r3, [sl]
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f6c:	464a      	mov	r2, r9
 8003f6e:	6921      	ldr	r1, [r4, #16]
 8003f70:	f000 face 	bl	8004510 <memcpy>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	81a3      	strh	r3, [r4, #12]
 8003f80:	6126      	str	r6, [r4, #16]
 8003f82:	444e      	add	r6, r9
 8003f84:	6026      	str	r6, [r4, #0]
 8003f86:	463e      	mov	r6, r7
 8003f88:	6165      	str	r5, [r4, #20]
 8003f8a:	eba5 0509 	sub.w	r5, r5, r9
 8003f8e:	60a5      	str	r5, [r4, #8]
 8003f90:	42be      	cmp	r6, r7
 8003f92:	d900      	bls.n	8003f96 <__ssputs_r+0x86>
 8003f94:	463e      	mov	r6, r7
 8003f96:	4632      	mov	r2, r6
 8003f98:	4641      	mov	r1, r8
 8003f9a:	6820      	ldr	r0, [r4, #0]
 8003f9c:	f000 fac6 	bl	800452c <memmove>
 8003fa0:	68a3      	ldr	r3, [r4, #8]
 8003fa2:	6822      	ldr	r2, [r4, #0]
 8003fa4:	1b9b      	subs	r3, r3, r6
 8003fa6:	4432      	add	r2, r6
 8003fa8:	2000      	movs	r0, #0
 8003faa:	60a3      	str	r3, [r4, #8]
 8003fac:	6022      	str	r2, [r4, #0]
 8003fae:	e7db      	b.n	8003f68 <__ssputs_r+0x58>
 8003fb0:	462a      	mov	r2, r5
 8003fb2:	f000 fb7b 	bl	80046ac <_realloc_r>
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d1e1      	bne.n	8003f80 <__ssputs_r+0x70>
 8003fbc:	4650      	mov	r0, sl
 8003fbe:	6921      	ldr	r1, [r4, #16]
 8003fc0:	f000 face 	bl	8004560 <_free_r>
 8003fc4:	e7c7      	b.n	8003f56 <__ssputs_r+0x46>
	...

08003fc8 <_svfiprintf_r>:
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	4698      	mov	r8, r3
 8003fce:	898b      	ldrh	r3, [r1, #12]
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	460d      	mov	r5, r1
 8003fd6:	4614      	mov	r4, r2
 8003fd8:	b09d      	sub	sp, #116	; 0x74
 8003fda:	d50e      	bpl.n	8003ffa <_svfiprintf_r+0x32>
 8003fdc:	690b      	ldr	r3, [r1, #16]
 8003fde:	b963      	cbnz	r3, 8003ffa <_svfiprintf_r+0x32>
 8003fe0:	2140      	movs	r1, #64	; 0x40
 8003fe2:	f000 fb09 	bl	80045f8 <_malloc_r>
 8003fe6:	6028      	str	r0, [r5, #0]
 8003fe8:	6128      	str	r0, [r5, #16]
 8003fea:	b920      	cbnz	r0, 8003ff6 <_svfiprintf_r+0x2e>
 8003fec:	230c      	movs	r3, #12
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	e0d1      	b.n	800419a <_svfiprintf_r+0x1d2>
 8003ff6:	2340      	movs	r3, #64	; 0x40
 8003ff8:	616b      	str	r3, [r5, #20]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ffe:	2320      	movs	r3, #32
 8004000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004004:	2330      	movs	r3, #48	; 0x30
 8004006:	f04f 0901 	mov.w	r9, #1
 800400a:	f8cd 800c 	str.w	r8, [sp, #12]
 800400e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041b4 <_svfiprintf_r+0x1ec>
 8004012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004016:	4623      	mov	r3, r4
 8004018:	469a      	mov	sl, r3
 800401a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800401e:	b10a      	cbz	r2, 8004024 <_svfiprintf_r+0x5c>
 8004020:	2a25      	cmp	r2, #37	; 0x25
 8004022:	d1f9      	bne.n	8004018 <_svfiprintf_r+0x50>
 8004024:	ebba 0b04 	subs.w	fp, sl, r4
 8004028:	d00b      	beq.n	8004042 <_svfiprintf_r+0x7a>
 800402a:	465b      	mov	r3, fp
 800402c:	4622      	mov	r2, r4
 800402e:	4629      	mov	r1, r5
 8004030:	4638      	mov	r0, r7
 8004032:	f7ff ff6d 	bl	8003f10 <__ssputs_r>
 8004036:	3001      	adds	r0, #1
 8004038:	f000 80aa 	beq.w	8004190 <_svfiprintf_r+0x1c8>
 800403c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800403e:	445a      	add	r2, fp
 8004040:	9209      	str	r2, [sp, #36]	; 0x24
 8004042:	f89a 3000 	ldrb.w	r3, [sl]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a2 	beq.w	8004190 <_svfiprintf_r+0x1c8>
 800404c:	2300      	movs	r3, #0
 800404e:	f04f 32ff 	mov.w	r2, #4294967295
 8004052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004056:	f10a 0a01 	add.w	sl, sl, #1
 800405a:	9304      	str	r3, [sp, #16]
 800405c:	9307      	str	r3, [sp, #28]
 800405e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004062:	931a      	str	r3, [sp, #104]	; 0x68
 8004064:	4654      	mov	r4, sl
 8004066:	2205      	movs	r2, #5
 8004068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800406c:	4851      	ldr	r0, [pc, #324]	; (80041b4 <_svfiprintf_r+0x1ec>)
 800406e:	f000 fa41 	bl	80044f4 <memchr>
 8004072:	9a04      	ldr	r2, [sp, #16]
 8004074:	b9d8      	cbnz	r0, 80040ae <_svfiprintf_r+0xe6>
 8004076:	06d0      	lsls	r0, r2, #27
 8004078:	bf44      	itt	mi
 800407a:	2320      	movmi	r3, #32
 800407c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004080:	0711      	lsls	r1, r2, #28
 8004082:	bf44      	itt	mi
 8004084:	232b      	movmi	r3, #43	; 0x2b
 8004086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800408a:	f89a 3000 	ldrb.w	r3, [sl]
 800408e:	2b2a      	cmp	r3, #42	; 0x2a
 8004090:	d015      	beq.n	80040be <_svfiprintf_r+0xf6>
 8004092:	4654      	mov	r4, sl
 8004094:	2000      	movs	r0, #0
 8004096:	f04f 0c0a 	mov.w	ip, #10
 800409a:	9a07      	ldr	r2, [sp, #28]
 800409c:	4621      	mov	r1, r4
 800409e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040a2:	3b30      	subs	r3, #48	; 0x30
 80040a4:	2b09      	cmp	r3, #9
 80040a6:	d94e      	bls.n	8004146 <_svfiprintf_r+0x17e>
 80040a8:	b1b0      	cbz	r0, 80040d8 <_svfiprintf_r+0x110>
 80040aa:	9207      	str	r2, [sp, #28]
 80040ac:	e014      	b.n	80040d8 <_svfiprintf_r+0x110>
 80040ae:	eba0 0308 	sub.w	r3, r0, r8
 80040b2:	fa09 f303 	lsl.w	r3, r9, r3
 80040b6:	4313      	orrs	r3, r2
 80040b8:	46a2      	mov	sl, r4
 80040ba:	9304      	str	r3, [sp, #16]
 80040bc:	e7d2      	b.n	8004064 <_svfiprintf_r+0x9c>
 80040be:	9b03      	ldr	r3, [sp, #12]
 80040c0:	1d19      	adds	r1, r3, #4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	9103      	str	r1, [sp, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bfbb      	ittet	lt
 80040ca:	425b      	neglt	r3, r3
 80040cc:	f042 0202 	orrlt.w	r2, r2, #2
 80040d0:	9307      	strge	r3, [sp, #28]
 80040d2:	9307      	strlt	r3, [sp, #28]
 80040d4:	bfb8      	it	lt
 80040d6:	9204      	strlt	r2, [sp, #16]
 80040d8:	7823      	ldrb	r3, [r4, #0]
 80040da:	2b2e      	cmp	r3, #46	; 0x2e
 80040dc:	d10c      	bne.n	80040f8 <_svfiprintf_r+0x130>
 80040de:	7863      	ldrb	r3, [r4, #1]
 80040e0:	2b2a      	cmp	r3, #42	; 0x2a
 80040e2:	d135      	bne.n	8004150 <_svfiprintf_r+0x188>
 80040e4:	9b03      	ldr	r3, [sp, #12]
 80040e6:	3402      	adds	r4, #2
 80040e8:	1d1a      	adds	r2, r3, #4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	9203      	str	r2, [sp, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bfb8      	it	lt
 80040f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80040f6:	9305      	str	r3, [sp, #20]
 80040f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041c4 <_svfiprintf_r+0x1fc>
 80040fc:	2203      	movs	r2, #3
 80040fe:	4650      	mov	r0, sl
 8004100:	7821      	ldrb	r1, [r4, #0]
 8004102:	f000 f9f7 	bl	80044f4 <memchr>
 8004106:	b140      	cbz	r0, 800411a <_svfiprintf_r+0x152>
 8004108:	2340      	movs	r3, #64	; 0x40
 800410a:	eba0 000a 	sub.w	r0, r0, sl
 800410e:	fa03 f000 	lsl.w	r0, r3, r0
 8004112:	9b04      	ldr	r3, [sp, #16]
 8004114:	3401      	adds	r4, #1
 8004116:	4303      	orrs	r3, r0
 8004118:	9304      	str	r3, [sp, #16]
 800411a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800411e:	2206      	movs	r2, #6
 8004120:	4825      	ldr	r0, [pc, #148]	; (80041b8 <_svfiprintf_r+0x1f0>)
 8004122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004126:	f000 f9e5 	bl	80044f4 <memchr>
 800412a:	2800      	cmp	r0, #0
 800412c:	d038      	beq.n	80041a0 <_svfiprintf_r+0x1d8>
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <_svfiprintf_r+0x1f4>)
 8004130:	bb1b      	cbnz	r3, 800417a <_svfiprintf_r+0x1b2>
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	3307      	adds	r3, #7
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	3308      	adds	r3, #8
 800413c:	9303      	str	r3, [sp, #12]
 800413e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004140:	4433      	add	r3, r6
 8004142:	9309      	str	r3, [sp, #36]	; 0x24
 8004144:	e767      	b.n	8004016 <_svfiprintf_r+0x4e>
 8004146:	460c      	mov	r4, r1
 8004148:	2001      	movs	r0, #1
 800414a:	fb0c 3202 	mla	r2, ip, r2, r3
 800414e:	e7a5      	b.n	800409c <_svfiprintf_r+0xd4>
 8004150:	2300      	movs	r3, #0
 8004152:	f04f 0c0a 	mov.w	ip, #10
 8004156:	4619      	mov	r1, r3
 8004158:	3401      	adds	r4, #1
 800415a:	9305      	str	r3, [sp, #20]
 800415c:	4620      	mov	r0, r4
 800415e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004162:	3a30      	subs	r2, #48	; 0x30
 8004164:	2a09      	cmp	r2, #9
 8004166:	d903      	bls.n	8004170 <_svfiprintf_r+0x1a8>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0c5      	beq.n	80040f8 <_svfiprintf_r+0x130>
 800416c:	9105      	str	r1, [sp, #20]
 800416e:	e7c3      	b.n	80040f8 <_svfiprintf_r+0x130>
 8004170:	4604      	mov	r4, r0
 8004172:	2301      	movs	r3, #1
 8004174:	fb0c 2101 	mla	r1, ip, r1, r2
 8004178:	e7f0      	b.n	800415c <_svfiprintf_r+0x194>
 800417a:	ab03      	add	r3, sp, #12
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	462a      	mov	r2, r5
 8004180:	4638      	mov	r0, r7
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <_svfiprintf_r+0x1f8>)
 8004184:	a904      	add	r1, sp, #16
 8004186:	f3af 8000 	nop.w
 800418a:	1c42      	adds	r2, r0, #1
 800418c:	4606      	mov	r6, r0
 800418e:	d1d6      	bne.n	800413e <_svfiprintf_r+0x176>
 8004190:	89ab      	ldrh	r3, [r5, #12]
 8004192:	065b      	lsls	r3, r3, #25
 8004194:	f53f af2c 	bmi.w	8003ff0 <_svfiprintf_r+0x28>
 8004198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800419a:	b01d      	add	sp, #116	; 0x74
 800419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a0:	ab03      	add	r3, sp, #12
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	462a      	mov	r2, r5
 80041a6:	4638      	mov	r0, r7
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <_svfiprintf_r+0x1f8>)
 80041aa:	a904      	add	r1, sp, #16
 80041ac:	f000 f87c 	bl	80042a8 <_printf_i>
 80041b0:	e7eb      	b.n	800418a <_svfiprintf_r+0x1c2>
 80041b2:	bf00      	nop
 80041b4:	08004790 	.word	0x08004790
 80041b8:	0800479a 	.word	0x0800479a
 80041bc:	00000000 	.word	0x00000000
 80041c0:	08003f11 	.word	0x08003f11
 80041c4:	08004796 	.word	0x08004796

080041c8 <_printf_common>:
 80041c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	4616      	mov	r6, r2
 80041ce:	4699      	mov	r9, r3
 80041d0:	688a      	ldr	r2, [r1, #8]
 80041d2:	690b      	ldr	r3, [r1, #16]
 80041d4:	4607      	mov	r7, r0
 80041d6:	4293      	cmp	r3, r2
 80041d8:	bfb8      	it	lt
 80041da:	4613      	movlt	r3, r2
 80041dc:	6033      	str	r3, [r6, #0]
 80041de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041e2:	460c      	mov	r4, r1
 80041e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041e8:	b10a      	cbz	r2, 80041ee <_printf_common+0x26>
 80041ea:	3301      	adds	r3, #1
 80041ec:	6033      	str	r3, [r6, #0]
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	0699      	lsls	r1, r3, #26
 80041f2:	bf42      	ittt	mi
 80041f4:	6833      	ldrmi	r3, [r6, #0]
 80041f6:	3302      	addmi	r3, #2
 80041f8:	6033      	strmi	r3, [r6, #0]
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	f015 0506 	ands.w	r5, r5, #6
 8004200:	d106      	bne.n	8004210 <_printf_common+0x48>
 8004202:	f104 0a19 	add.w	sl, r4, #25
 8004206:	68e3      	ldr	r3, [r4, #12]
 8004208:	6832      	ldr	r2, [r6, #0]
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	42ab      	cmp	r3, r5
 800420e:	dc28      	bgt.n	8004262 <_printf_common+0x9a>
 8004210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004214:	1e13      	subs	r3, r2, #0
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	bf18      	it	ne
 800421a:	2301      	movne	r3, #1
 800421c:	0692      	lsls	r2, r2, #26
 800421e:	d42d      	bmi.n	800427c <_printf_common+0xb4>
 8004220:	4649      	mov	r1, r9
 8004222:	4638      	mov	r0, r7
 8004224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004228:	47c0      	blx	r8
 800422a:	3001      	adds	r0, #1
 800422c:	d020      	beq.n	8004270 <_printf_common+0xa8>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	68e5      	ldr	r5, [r4, #12]
 8004232:	f003 0306 	and.w	r3, r3, #6
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf18      	it	ne
 800423a:	2500      	movne	r5, #0
 800423c:	6832      	ldr	r2, [r6, #0]
 800423e:	f04f 0600 	mov.w	r6, #0
 8004242:	68a3      	ldr	r3, [r4, #8]
 8004244:	bf08      	it	eq
 8004246:	1aad      	subeq	r5, r5, r2
 8004248:	6922      	ldr	r2, [r4, #16]
 800424a:	bf08      	it	eq
 800424c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004250:	4293      	cmp	r3, r2
 8004252:	bfc4      	itt	gt
 8004254:	1a9b      	subgt	r3, r3, r2
 8004256:	18ed      	addgt	r5, r5, r3
 8004258:	341a      	adds	r4, #26
 800425a:	42b5      	cmp	r5, r6
 800425c:	d11a      	bne.n	8004294 <_printf_common+0xcc>
 800425e:	2000      	movs	r0, #0
 8004260:	e008      	b.n	8004274 <_printf_common+0xac>
 8004262:	2301      	movs	r3, #1
 8004264:	4652      	mov	r2, sl
 8004266:	4649      	mov	r1, r9
 8004268:	4638      	mov	r0, r7
 800426a:	47c0      	blx	r8
 800426c:	3001      	adds	r0, #1
 800426e:	d103      	bne.n	8004278 <_printf_common+0xb0>
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004278:	3501      	adds	r5, #1
 800427a:	e7c4      	b.n	8004206 <_printf_common+0x3e>
 800427c:	2030      	movs	r0, #48	; 0x30
 800427e:	18e1      	adds	r1, r4, r3
 8004280:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800428a:	4422      	add	r2, r4
 800428c:	3302      	adds	r3, #2
 800428e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004292:	e7c5      	b.n	8004220 <_printf_common+0x58>
 8004294:	2301      	movs	r3, #1
 8004296:	4622      	mov	r2, r4
 8004298:	4649      	mov	r1, r9
 800429a:	4638      	mov	r0, r7
 800429c:	47c0      	blx	r8
 800429e:	3001      	adds	r0, #1
 80042a0:	d0e6      	beq.n	8004270 <_printf_common+0xa8>
 80042a2:	3601      	adds	r6, #1
 80042a4:	e7d9      	b.n	800425a <_printf_common+0x92>
	...

080042a8 <_printf_i>:
 80042a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042ac:	460c      	mov	r4, r1
 80042ae:	7e27      	ldrb	r7, [r4, #24]
 80042b0:	4691      	mov	r9, r2
 80042b2:	2f78      	cmp	r7, #120	; 0x78
 80042b4:	4680      	mov	r8, r0
 80042b6:	469a      	mov	sl, r3
 80042b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042be:	d807      	bhi.n	80042d0 <_printf_i+0x28>
 80042c0:	2f62      	cmp	r7, #98	; 0x62
 80042c2:	d80a      	bhi.n	80042da <_printf_i+0x32>
 80042c4:	2f00      	cmp	r7, #0
 80042c6:	f000 80d9 	beq.w	800447c <_printf_i+0x1d4>
 80042ca:	2f58      	cmp	r7, #88	; 0x58
 80042cc:	f000 80a4 	beq.w	8004418 <_printf_i+0x170>
 80042d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042d8:	e03a      	b.n	8004350 <_printf_i+0xa8>
 80042da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042de:	2b15      	cmp	r3, #21
 80042e0:	d8f6      	bhi.n	80042d0 <_printf_i+0x28>
 80042e2:	a001      	add	r0, pc, #4	; (adr r0, 80042e8 <_printf_i+0x40>)
 80042e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042e8:	08004341 	.word	0x08004341
 80042ec:	08004355 	.word	0x08004355
 80042f0:	080042d1 	.word	0x080042d1
 80042f4:	080042d1 	.word	0x080042d1
 80042f8:	080042d1 	.word	0x080042d1
 80042fc:	080042d1 	.word	0x080042d1
 8004300:	08004355 	.word	0x08004355
 8004304:	080042d1 	.word	0x080042d1
 8004308:	080042d1 	.word	0x080042d1
 800430c:	080042d1 	.word	0x080042d1
 8004310:	080042d1 	.word	0x080042d1
 8004314:	08004463 	.word	0x08004463
 8004318:	08004385 	.word	0x08004385
 800431c:	08004445 	.word	0x08004445
 8004320:	080042d1 	.word	0x080042d1
 8004324:	080042d1 	.word	0x080042d1
 8004328:	08004485 	.word	0x08004485
 800432c:	080042d1 	.word	0x080042d1
 8004330:	08004385 	.word	0x08004385
 8004334:	080042d1 	.word	0x080042d1
 8004338:	080042d1 	.word	0x080042d1
 800433c:	0800444d 	.word	0x0800444d
 8004340:	680b      	ldr	r3, [r1, #0]
 8004342:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004346:	1d1a      	adds	r2, r3, #4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	600a      	str	r2, [r1, #0]
 800434c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004350:	2301      	movs	r3, #1
 8004352:	e0a4      	b.n	800449e <_printf_i+0x1f6>
 8004354:	6825      	ldr	r5, [r4, #0]
 8004356:	6808      	ldr	r0, [r1, #0]
 8004358:	062e      	lsls	r6, r5, #24
 800435a:	f100 0304 	add.w	r3, r0, #4
 800435e:	d50a      	bpl.n	8004376 <_printf_i+0xce>
 8004360:	6805      	ldr	r5, [r0, #0]
 8004362:	600b      	str	r3, [r1, #0]
 8004364:	2d00      	cmp	r5, #0
 8004366:	da03      	bge.n	8004370 <_printf_i+0xc8>
 8004368:	232d      	movs	r3, #45	; 0x2d
 800436a:	426d      	negs	r5, r5
 800436c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004370:	230a      	movs	r3, #10
 8004372:	485e      	ldr	r0, [pc, #376]	; (80044ec <_printf_i+0x244>)
 8004374:	e019      	b.n	80043aa <_printf_i+0x102>
 8004376:	f015 0f40 	tst.w	r5, #64	; 0x40
 800437a:	6805      	ldr	r5, [r0, #0]
 800437c:	600b      	str	r3, [r1, #0]
 800437e:	bf18      	it	ne
 8004380:	b22d      	sxthne	r5, r5
 8004382:	e7ef      	b.n	8004364 <_printf_i+0xbc>
 8004384:	680b      	ldr	r3, [r1, #0]
 8004386:	6825      	ldr	r5, [r4, #0]
 8004388:	1d18      	adds	r0, r3, #4
 800438a:	6008      	str	r0, [r1, #0]
 800438c:	0628      	lsls	r0, r5, #24
 800438e:	d501      	bpl.n	8004394 <_printf_i+0xec>
 8004390:	681d      	ldr	r5, [r3, #0]
 8004392:	e002      	b.n	800439a <_printf_i+0xf2>
 8004394:	0669      	lsls	r1, r5, #25
 8004396:	d5fb      	bpl.n	8004390 <_printf_i+0xe8>
 8004398:	881d      	ldrh	r5, [r3, #0]
 800439a:	2f6f      	cmp	r7, #111	; 0x6f
 800439c:	bf0c      	ite	eq
 800439e:	2308      	moveq	r3, #8
 80043a0:	230a      	movne	r3, #10
 80043a2:	4852      	ldr	r0, [pc, #328]	; (80044ec <_printf_i+0x244>)
 80043a4:	2100      	movs	r1, #0
 80043a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043aa:	6866      	ldr	r6, [r4, #4]
 80043ac:	2e00      	cmp	r6, #0
 80043ae:	bfa8      	it	ge
 80043b0:	6821      	ldrge	r1, [r4, #0]
 80043b2:	60a6      	str	r6, [r4, #8]
 80043b4:	bfa4      	itt	ge
 80043b6:	f021 0104 	bicge.w	r1, r1, #4
 80043ba:	6021      	strge	r1, [r4, #0]
 80043bc:	b90d      	cbnz	r5, 80043c2 <_printf_i+0x11a>
 80043be:	2e00      	cmp	r6, #0
 80043c0:	d04d      	beq.n	800445e <_printf_i+0x1b6>
 80043c2:	4616      	mov	r6, r2
 80043c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80043c8:	fb03 5711 	mls	r7, r3, r1, r5
 80043cc:	5dc7      	ldrb	r7, [r0, r7]
 80043ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043d2:	462f      	mov	r7, r5
 80043d4:	42bb      	cmp	r3, r7
 80043d6:	460d      	mov	r5, r1
 80043d8:	d9f4      	bls.n	80043c4 <_printf_i+0x11c>
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d10b      	bne.n	80043f6 <_printf_i+0x14e>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	07df      	lsls	r7, r3, #31
 80043e2:	d508      	bpl.n	80043f6 <_printf_i+0x14e>
 80043e4:	6923      	ldr	r3, [r4, #16]
 80043e6:	6861      	ldr	r1, [r4, #4]
 80043e8:	4299      	cmp	r1, r3
 80043ea:	bfde      	ittt	le
 80043ec:	2330      	movle	r3, #48	; 0x30
 80043ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043f6:	1b92      	subs	r2, r2, r6
 80043f8:	6122      	str	r2, [r4, #16]
 80043fa:	464b      	mov	r3, r9
 80043fc:	4621      	mov	r1, r4
 80043fe:	4640      	mov	r0, r8
 8004400:	f8cd a000 	str.w	sl, [sp]
 8004404:	aa03      	add	r2, sp, #12
 8004406:	f7ff fedf 	bl	80041c8 <_printf_common>
 800440a:	3001      	adds	r0, #1
 800440c:	d14c      	bne.n	80044a8 <_printf_i+0x200>
 800440e:	f04f 30ff 	mov.w	r0, #4294967295
 8004412:	b004      	add	sp, #16
 8004414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004418:	4834      	ldr	r0, [pc, #208]	; (80044ec <_printf_i+0x244>)
 800441a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800441e:	680e      	ldr	r6, [r1, #0]
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	f856 5b04 	ldr.w	r5, [r6], #4
 8004426:	061f      	lsls	r7, r3, #24
 8004428:	600e      	str	r6, [r1, #0]
 800442a:	d514      	bpl.n	8004456 <_printf_i+0x1ae>
 800442c:	07d9      	lsls	r1, r3, #31
 800442e:	bf44      	itt	mi
 8004430:	f043 0320 	orrmi.w	r3, r3, #32
 8004434:	6023      	strmi	r3, [r4, #0]
 8004436:	b91d      	cbnz	r5, 8004440 <_printf_i+0x198>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	f023 0320 	bic.w	r3, r3, #32
 800443e:	6023      	str	r3, [r4, #0]
 8004440:	2310      	movs	r3, #16
 8004442:	e7af      	b.n	80043a4 <_printf_i+0xfc>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	f043 0320 	orr.w	r3, r3, #32
 800444a:	6023      	str	r3, [r4, #0]
 800444c:	2378      	movs	r3, #120	; 0x78
 800444e:	4828      	ldr	r0, [pc, #160]	; (80044f0 <_printf_i+0x248>)
 8004450:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004454:	e7e3      	b.n	800441e <_printf_i+0x176>
 8004456:	065e      	lsls	r6, r3, #25
 8004458:	bf48      	it	mi
 800445a:	b2ad      	uxthmi	r5, r5
 800445c:	e7e6      	b.n	800442c <_printf_i+0x184>
 800445e:	4616      	mov	r6, r2
 8004460:	e7bb      	b.n	80043da <_printf_i+0x132>
 8004462:	680b      	ldr	r3, [r1, #0]
 8004464:	6826      	ldr	r6, [r4, #0]
 8004466:	1d1d      	adds	r5, r3, #4
 8004468:	6960      	ldr	r0, [r4, #20]
 800446a:	600d      	str	r5, [r1, #0]
 800446c:	0635      	lsls	r5, r6, #24
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	d501      	bpl.n	8004476 <_printf_i+0x1ce>
 8004472:	6018      	str	r0, [r3, #0]
 8004474:	e002      	b.n	800447c <_printf_i+0x1d4>
 8004476:	0671      	lsls	r1, r6, #25
 8004478:	d5fb      	bpl.n	8004472 <_printf_i+0x1ca>
 800447a:	8018      	strh	r0, [r3, #0]
 800447c:	2300      	movs	r3, #0
 800447e:	4616      	mov	r6, r2
 8004480:	6123      	str	r3, [r4, #16]
 8004482:	e7ba      	b.n	80043fa <_printf_i+0x152>
 8004484:	680b      	ldr	r3, [r1, #0]
 8004486:	1d1a      	adds	r2, r3, #4
 8004488:	600a      	str	r2, [r1, #0]
 800448a:	681e      	ldr	r6, [r3, #0]
 800448c:	2100      	movs	r1, #0
 800448e:	4630      	mov	r0, r6
 8004490:	6862      	ldr	r2, [r4, #4]
 8004492:	f000 f82f 	bl	80044f4 <memchr>
 8004496:	b108      	cbz	r0, 800449c <_printf_i+0x1f4>
 8004498:	1b80      	subs	r0, r0, r6
 800449a:	6060      	str	r0, [r4, #4]
 800449c:	6863      	ldr	r3, [r4, #4]
 800449e:	6123      	str	r3, [r4, #16]
 80044a0:	2300      	movs	r3, #0
 80044a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a6:	e7a8      	b.n	80043fa <_printf_i+0x152>
 80044a8:	4632      	mov	r2, r6
 80044aa:	4649      	mov	r1, r9
 80044ac:	4640      	mov	r0, r8
 80044ae:	6923      	ldr	r3, [r4, #16]
 80044b0:	47d0      	blx	sl
 80044b2:	3001      	adds	r0, #1
 80044b4:	d0ab      	beq.n	800440e <_printf_i+0x166>
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	079b      	lsls	r3, r3, #30
 80044ba:	d413      	bmi.n	80044e4 <_printf_i+0x23c>
 80044bc:	68e0      	ldr	r0, [r4, #12]
 80044be:	9b03      	ldr	r3, [sp, #12]
 80044c0:	4298      	cmp	r0, r3
 80044c2:	bfb8      	it	lt
 80044c4:	4618      	movlt	r0, r3
 80044c6:	e7a4      	b.n	8004412 <_printf_i+0x16a>
 80044c8:	2301      	movs	r3, #1
 80044ca:	4632      	mov	r2, r6
 80044cc:	4649      	mov	r1, r9
 80044ce:	4640      	mov	r0, r8
 80044d0:	47d0      	blx	sl
 80044d2:	3001      	adds	r0, #1
 80044d4:	d09b      	beq.n	800440e <_printf_i+0x166>
 80044d6:	3501      	adds	r5, #1
 80044d8:	68e3      	ldr	r3, [r4, #12]
 80044da:	9903      	ldr	r1, [sp, #12]
 80044dc:	1a5b      	subs	r3, r3, r1
 80044de:	42ab      	cmp	r3, r5
 80044e0:	dcf2      	bgt.n	80044c8 <_printf_i+0x220>
 80044e2:	e7eb      	b.n	80044bc <_printf_i+0x214>
 80044e4:	2500      	movs	r5, #0
 80044e6:	f104 0619 	add.w	r6, r4, #25
 80044ea:	e7f5      	b.n	80044d8 <_printf_i+0x230>
 80044ec:	080047a1 	.word	0x080047a1
 80044f0:	080047b2 	.word	0x080047b2

080044f4 <memchr>:
 80044f4:	4603      	mov	r3, r0
 80044f6:	b510      	push	{r4, lr}
 80044f8:	b2c9      	uxtb	r1, r1
 80044fa:	4402      	add	r2, r0
 80044fc:	4293      	cmp	r3, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	d101      	bne.n	8004506 <memchr+0x12>
 8004502:	2000      	movs	r0, #0
 8004504:	e003      	b.n	800450e <memchr+0x1a>
 8004506:	7804      	ldrb	r4, [r0, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	428c      	cmp	r4, r1
 800450c:	d1f6      	bne.n	80044fc <memchr+0x8>
 800450e:	bd10      	pop	{r4, pc}

08004510 <memcpy>:
 8004510:	440a      	add	r2, r1
 8004512:	4291      	cmp	r1, r2
 8004514:	f100 33ff 	add.w	r3, r0, #4294967295
 8004518:	d100      	bne.n	800451c <memcpy+0xc>
 800451a:	4770      	bx	lr
 800451c:	b510      	push	{r4, lr}
 800451e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004522:	4291      	cmp	r1, r2
 8004524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004528:	d1f9      	bne.n	800451e <memcpy+0xe>
 800452a:	bd10      	pop	{r4, pc}

0800452c <memmove>:
 800452c:	4288      	cmp	r0, r1
 800452e:	b510      	push	{r4, lr}
 8004530:	eb01 0402 	add.w	r4, r1, r2
 8004534:	d902      	bls.n	800453c <memmove+0x10>
 8004536:	4284      	cmp	r4, r0
 8004538:	4623      	mov	r3, r4
 800453a:	d807      	bhi.n	800454c <memmove+0x20>
 800453c:	1e43      	subs	r3, r0, #1
 800453e:	42a1      	cmp	r1, r4
 8004540:	d008      	beq.n	8004554 <memmove+0x28>
 8004542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800454a:	e7f8      	b.n	800453e <memmove+0x12>
 800454c:	4601      	mov	r1, r0
 800454e:	4402      	add	r2, r0
 8004550:	428a      	cmp	r2, r1
 8004552:	d100      	bne.n	8004556 <memmove+0x2a>
 8004554:	bd10      	pop	{r4, pc}
 8004556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800455a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800455e:	e7f7      	b.n	8004550 <memmove+0x24>

08004560 <_free_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4605      	mov	r5, r0
 8004564:	2900      	cmp	r1, #0
 8004566:	d043      	beq.n	80045f0 <_free_r+0x90>
 8004568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800456c:	1f0c      	subs	r4, r1, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	bfb8      	it	lt
 8004572:	18e4      	addlt	r4, r4, r3
 8004574:	f000 f8d0 	bl	8004718 <__malloc_lock>
 8004578:	4a1e      	ldr	r2, [pc, #120]	; (80045f4 <_free_r+0x94>)
 800457a:	6813      	ldr	r3, [r2, #0]
 800457c:	4610      	mov	r0, r2
 800457e:	b933      	cbnz	r3, 800458e <_free_r+0x2e>
 8004580:	6063      	str	r3, [r4, #4]
 8004582:	6014      	str	r4, [r2, #0]
 8004584:	4628      	mov	r0, r5
 8004586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800458a:	f000 b8cb 	b.w	8004724 <__malloc_unlock>
 800458e:	42a3      	cmp	r3, r4
 8004590:	d90a      	bls.n	80045a8 <_free_r+0x48>
 8004592:	6821      	ldr	r1, [r4, #0]
 8004594:	1862      	adds	r2, r4, r1
 8004596:	4293      	cmp	r3, r2
 8004598:	bf01      	itttt	eq
 800459a:	681a      	ldreq	r2, [r3, #0]
 800459c:	685b      	ldreq	r3, [r3, #4]
 800459e:	1852      	addeq	r2, r2, r1
 80045a0:	6022      	streq	r2, [r4, #0]
 80045a2:	6063      	str	r3, [r4, #4]
 80045a4:	6004      	str	r4, [r0, #0]
 80045a6:	e7ed      	b.n	8004584 <_free_r+0x24>
 80045a8:	461a      	mov	r2, r3
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	b10b      	cbz	r3, 80045b2 <_free_r+0x52>
 80045ae:	42a3      	cmp	r3, r4
 80045b0:	d9fa      	bls.n	80045a8 <_free_r+0x48>
 80045b2:	6811      	ldr	r1, [r2, #0]
 80045b4:	1850      	adds	r0, r2, r1
 80045b6:	42a0      	cmp	r0, r4
 80045b8:	d10b      	bne.n	80045d2 <_free_r+0x72>
 80045ba:	6820      	ldr	r0, [r4, #0]
 80045bc:	4401      	add	r1, r0
 80045be:	1850      	adds	r0, r2, r1
 80045c0:	4283      	cmp	r3, r0
 80045c2:	6011      	str	r1, [r2, #0]
 80045c4:	d1de      	bne.n	8004584 <_free_r+0x24>
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4401      	add	r1, r0
 80045cc:	6011      	str	r1, [r2, #0]
 80045ce:	6053      	str	r3, [r2, #4]
 80045d0:	e7d8      	b.n	8004584 <_free_r+0x24>
 80045d2:	d902      	bls.n	80045da <_free_r+0x7a>
 80045d4:	230c      	movs	r3, #12
 80045d6:	602b      	str	r3, [r5, #0]
 80045d8:	e7d4      	b.n	8004584 <_free_r+0x24>
 80045da:	6820      	ldr	r0, [r4, #0]
 80045dc:	1821      	adds	r1, r4, r0
 80045de:	428b      	cmp	r3, r1
 80045e0:	bf01      	itttt	eq
 80045e2:	6819      	ldreq	r1, [r3, #0]
 80045e4:	685b      	ldreq	r3, [r3, #4]
 80045e6:	1809      	addeq	r1, r1, r0
 80045e8:	6021      	streq	r1, [r4, #0]
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	6054      	str	r4, [r2, #4]
 80045ee:	e7c9      	b.n	8004584 <_free_r+0x24>
 80045f0:	bd38      	pop	{r3, r4, r5, pc}
 80045f2:	bf00      	nop
 80045f4:	200001bc 	.word	0x200001bc

080045f8 <_malloc_r>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	1ccd      	adds	r5, r1, #3
 80045fc:	f025 0503 	bic.w	r5, r5, #3
 8004600:	3508      	adds	r5, #8
 8004602:	2d0c      	cmp	r5, #12
 8004604:	bf38      	it	cc
 8004606:	250c      	movcc	r5, #12
 8004608:	2d00      	cmp	r5, #0
 800460a:	4606      	mov	r6, r0
 800460c:	db01      	blt.n	8004612 <_malloc_r+0x1a>
 800460e:	42a9      	cmp	r1, r5
 8004610:	d903      	bls.n	800461a <_malloc_r+0x22>
 8004612:	230c      	movs	r3, #12
 8004614:	6033      	str	r3, [r6, #0]
 8004616:	2000      	movs	r0, #0
 8004618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800461a:	f000 f87d 	bl	8004718 <__malloc_lock>
 800461e:	4921      	ldr	r1, [pc, #132]	; (80046a4 <_malloc_r+0xac>)
 8004620:	680a      	ldr	r2, [r1, #0]
 8004622:	4614      	mov	r4, r2
 8004624:	b99c      	cbnz	r4, 800464e <_malloc_r+0x56>
 8004626:	4f20      	ldr	r7, [pc, #128]	; (80046a8 <_malloc_r+0xb0>)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b923      	cbnz	r3, 8004636 <_malloc_r+0x3e>
 800462c:	4621      	mov	r1, r4
 800462e:	4630      	mov	r0, r6
 8004630:	f000 f862 	bl	80046f8 <_sbrk_r>
 8004634:	6038      	str	r0, [r7, #0]
 8004636:	4629      	mov	r1, r5
 8004638:	4630      	mov	r0, r6
 800463a:	f000 f85d 	bl	80046f8 <_sbrk_r>
 800463e:	1c43      	adds	r3, r0, #1
 8004640:	d123      	bne.n	800468a <_malloc_r+0x92>
 8004642:	230c      	movs	r3, #12
 8004644:	4630      	mov	r0, r6
 8004646:	6033      	str	r3, [r6, #0]
 8004648:	f000 f86c 	bl	8004724 <__malloc_unlock>
 800464c:	e7e3      	b.n	8004616 <_malloc_r+0x1e>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	1b5b      	subs	r3, r3, r5
 8004652:	d417      	bmi.n	8004684 <_malloc_r+0x8c>
 8004654:	2b0b      	cmp	r3, #11
 8004656:	d903      	bls.n	8004660 <_malloc_r+0x68>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	441c      	add	r4, r3
 800465c:	6025      	str	r5, [r4, #0]
 800465e:	e004      	b.n	800466a <_malloc_r+0x72>
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	42a2      	cmp	r2, r4
 8004664:	bf0c      	ite	eq
 8004666:	600b      	streq	r3, [r1, #0]
 8004668:	6053      	strne	r3, [r2, #4]
 800466a:	4630      	mov	r0, r6
 800466c:	f000 f85a 	bl	8004724 <__malloc_unlock>
 8004670:	f104 000b 	add.w	r0, r4, #11
 8004674:	1d23      	adds	r3, r4, #4
 8004676:	f020 0007 	bic.w	r0, r0, #7
 800467a:	1ac2      	subs	r2, r0, r3
 800467c:	d0cc      	beq.n	8004618 <_malloc_r+0x20>
 800467e:	1a1b      	subs	r3, r3, r0
 8004680:	50a3      	str	r3, [r4, r2]
 8004682:	e7c9      	b.n	8004618 <_malloc_r+0x20>
 8004684:	4622      	mov	r2, r4
 8004686:	6864      	ldr	r4, [r4, #4]
 8004688:	e7cc      	b.n	8004624 <_malloc_r+0x2c>
 800468a:	1cc4      	adds	r4, r0, #3
 800468c:	f024 0403 	bic.w	r4, r4, #3
 8004690:	42a0      	cmp	r0, r4
 8004692:	d0e3      	beq.n	800465c <_malloc_r+0x64>
 8004694:	1a21      	subs	r1, r4, r0
 8004696:	4630      	mov	r0, r6
 8004698:	f000 f82e 	bl	80046f8 <_sbrk_r>
 800469c:	3001      	adds	r0, #1
 800469e:	d1dd      	bne.n	800465c <_malloc_r+0x64>
 80046a0:	e7cf      	b.n	8004642 <_malloc_r+0x4a>
 80046a2:	bf00      	nop
 80046a4:	200001bc 	.word	0x200001bc
 80046a8:	200001c0 	.word	0x200001c0

080046ac <_realloc_r>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	4607      	mov	r7, r0
 80046b0:	4614      	mov	r4, r2
 80046b2:	460e      	mov	r6, r1
 80046b4:	b921      	cbnz	r1, 80046c0 <_realloc_r+0x14>
 80046b6:	4611      	mov	r1, r2
 80046b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046bc:	f7ff bf9c 	b.w	80045f8 <_malloc_r>
 80046c0:	b922      	cbnz	r2, 80046cc <_realloc_r+0x20>
 80046c2:	f7ff ff4d 	bl	8004560 <_free_r>
 80046c6:	4625      	mov	r5, r4
 80046c8:	4628      	mov	r0, r5
 80046ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046cc:	f000 f830 	bl	8004730 <_malloc_usable_size_r>
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	d20f      	bcs.n	80046f4 <_realloc_r+0x48>
 80046d4:	4621      	mov	r1, r4
 80046d6:	4638      	mov	r0, r7
 80046d8:	f7ff ff8e 	bl	80045f8 <_malloc_r>
 80046dc:	4605      	mov	r5, r0
 80046de:	2800      	cmp	r0, #0
 80046e0:	d0f2      	beq.n	80046c8 <_realloc_r+0x1c>
 80046e2:	4631      	mov	r1, r6
 80046e4:	4622      	mov	r2, r4
 80046e6:	f7ff ff13 	bl	8004510 <memcpy>
 80046ea:	4631      	mov	r1, r6
 80046ec:	4638      	mov	r0, r7
 80046ee:	f7ff ff37 	bl	8004560 <_free_r>
 80046f2:	e7e9      	b.n	80046c8 <_realloc_r+0x1c>
 80046f4:	4635      	mov	r5, r6
 80046f6:	e7e7      	b.n	80046c8 <_realloc_r+0x1c>

080046f8 <_sbrk_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	2300      	movs	r3, #0
 80046fc:	4d05      	ldr	r5, [pc, #20]	; (8004714 <_sbrk_r+0x1c>)
 80046fe:	4604      	mov	r4, r0
 8004700:	4608      	mov	r0, r1
 8004702:	602b      	str	r3, [r5, #0]
 8004704:	f7fc fdc6 	bl	8001294 <_sbrk>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d102      	bne.n	8004712 <_sbrk_r+0x1a>
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	b103      	cbz	r3, 8004712 <_sbrk_r+0x1a>
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	200002c4 	.word	0x200002c4

08004718 <__malloc_lock>:
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <__malloc_lock+0x8>)
 800471a:	f000 b811 	b.w	8004740 <__retarget_lock_acquire_recursive>
 800471e:	bf00      	nop
 8004720:	200002cc 	.word	0x200002cc

08004724 <__malloc_unlock>:
 8004724:	4801      	ldr	r0, [pc, #4]	; (800472c <__malloc_unlock+0x8>)
 8004726:	f000 b80c 	b.w	8004742 <__retarget_lock_release_recursive>
 800472a:	bf00      	nop
 800472c:	200002cc 	.word	0x200002cc

08004730 <_malloc_usable_size_r>:
 8004730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004734:	1f18      	subs	r0, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	bfbc      	itt	lt
 800473a:	580b      	ldrlt	r3, [r1, r0]
 800473c:	18c0      	addlt	r0, r0, r3
 800473e:	4770      	bx	lr

08004740 <__retarget_lock_acquire_recursive>:
 8004740:	4770      	bx	lr

08004742 <__retarget_lock_release_recursive>:
 8004742:	4770      	bx	lr

08004744 <_init>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	bf00      	nop
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr

08004750 <_fini>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	bf00      	nop
 8004754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004756:	bc08      	pop	{r3}
 8004758:	469e      	mov	lr, r3
 800475a:	4770      	bx	lr
